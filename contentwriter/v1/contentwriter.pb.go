// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: contentwriter/v1/contentwriter.proto

package contentwriter

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "github.com/nlnwa/veidemann-api-go/config/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNum int32  `protobuf:"varint,1,opt,name=record_num,json=recordNum,proto3" json:"record_num,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_contentwriter_v1_contentwriter_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetRecordNum() int32 {
	if x != nil {
		return x.RecordNum
	}
	return 0
}

func (x *Data) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WriteRequestMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId    string                                 `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	TargetUri      string                                 `protobuf:"bytes,2,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	RecordMeta     map[int32]*WriteRequestMeta_RecordMeta `protobuf:"bytes,3,rep,name=record_meta,json=recordMeta,proto3" json:"record_meta,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FetchTimeStamp *timestamp.Timestamp                   `protobuf:"bytes,4,opt,name=fetch_time_stamp,json=fetchTimeStamp,proto3" json:"fetch_time_stamp,omitempty"`
	IpAddress      string                                 `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	CollectionRef  *v1.ConfigRef                          `protobuf:"bytes,7,opt,name=collection_ref,json=collectionRef,proto3" json:"collection_ref,omitempty"`
}

func (x *WriteRequestMeta) Reset() {
	*x = WriteRequestMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequestMeta) ProtoMessage() {}

func (x *WriteRequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequestMeta.ProtoReflect.Descriptor instead.
func (*WriteRequestMeta) Descriptor() ([]byte, []int) {
	return file_contentwriter_v1_contentwriter_proto_rawDescGZIP(), []int{1}
}

func (x *WriteRequestMeta) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *WriteRequestMeta) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

func (x *WriteRequestMeta) GetRecordMeta() map[int32]*WriteRequestMeta_RecordMeta {
	if x != nil {
		return x.RecordMeta
	}
	return nil
}

func (x *WriteRequestMeta) GetFetchTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.FetchTimeStamp
	}
	return nil
}

func (x *WriteRequestMeta) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *WriteRequestMeta) GetCollectionRef() *v1.ConfigRef {
	if x != nil {
		return x.CollectionRef
	}
	return nil
}

type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*WriteRequest_Meta
	//	*WriteRequest_ProtocolHeader
	//	*WriteRequest_Payload
	//	*WriteRequest_Cancel
	Value isWriteRequest_Value `protobuf_oneof:"value"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_contentwriter_v1_contentwriter_proto_rawDescGZIP(), []int{2}
}

func (m *WriteRequest) GetValue() isWriteRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *WriteRequest) GetMeta() *WriteRequestMeta {
	if x, ok := x.GetValue().(*WriteRequest_Meta); ok {
		return x.Meta
	}
	return nil
}

func (x *WriteRequest) GetProtocolHeader() *Data {
	if x, ok := x.GetValue().(*WriteRequest_ProtocolHeader); ok {
		return x.ProtocolHeader
	}
	return nil
}

func (x *WriteRequest) GetPayload() *Data {
	if x, ok := x.GetValue().(*WriteRequest_Payload); ok {
		return x.Payload
	}
	return nil
}

func (x *WriteRequest) GetCancel() string {
	if x, ok := x.GetValue().(*WriteRequest_Cancel); ok {
		return x.Cancel
	}
	return ""
}

type isWriteRequest_Value interface {
	isWriteRequest_Value()
}

type WriteRequest_Meta struct {
	Meta *WriteRequestMeta `protobuf:"bytes,1,opt,name=meta,proto3,oneof"`
}

type WriteRequest_ProtocolHeader struct {
	ProtocolHeader *Data `protobuf:"bytes,2,opt,name=protocol_header,json=protocolHeader,proto3,oneof"` // Send protocol headers for the payload, e.g. http headers.
}

type WriteRequest_Payload struct {
	Payload *Data `protobuf:"bytes,3,opt,name=payload,proto3,oneof"` // Send part of the payload for the request. Repeat until complete payload is sent.
}

type WriteRequest_Cancel struct {
	Cancel string `protobuf:"bytes,4,opt,name=cancel,proto3,oneof"` // Roll back the request. The message should contain the reason for canceling the request.
}

func (*WriteRequest_Meta) isWriteRequest_Value() {}

func (*WriteRequest_ProtocolHeader) isWriteRequest_Value() {}

func (*WriteRequest_Payload) isWriteRequest_Value() {}

func (*WriteRequest_Cancel) isWriteRequest_Value() {}

type WriteResponseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordMeta map[int32]*WriteResponseMeta_RecordMeta `protobuf:"bytes,1,rep,name=record_meta,json=recordMeta,proto3" json:"record_meta,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteResponseMeta) Reset() {
	*x = WriteResponseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponseMeta) ProtoMessage() {}

func (x *WriteResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponseMeta.ProtoReflect.Descriptor instead.
func (*WriteResponseMeta) Descriptor() ([]byte, []int) {
	return file_contentwriter_v1_contentwriter_proto_rawDescGZIP(), []int{3}
}

func (x *WriteResponseMeta) GetRecordMeta() map[int32]*WriteResponseMeta_RecordMeta {
	if x != nil {
		return x.RecordMeta
	}
	return nil
}

type WriteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *WriteResponseMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *WriteReply) Reset() {
	*x = WriteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteReply) ProtoMessage() {}

func (x *WriteReply) ProtoReflect() protoreflect.Message {
	mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteReply.ProtoReflect.Descriptor instead.
func (*WriteReply) Descriptor() ([]byte, []int) {
	return file_contentwriter_v1_contentwriter_proto_rawDescGZIP(), []int{4}
}

func (x *WriteReply) GetMeta() *WriteResponseMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type WriteRequestMeta_RecordMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNum         int32                           `protobuf:"varint,1,opt,name=record_num,json=recordNum,proto3" json:"record_num,omitempty"`
	Type              RecordType                      `protobuf:"varint,2,opt,name=type,proto3,enum=veidemann.api.contentwriter.v1.RecordType" json:"type,omitempty"`
	RecordContentType string                          `protobuf:"bytes,3,opt,name=record_content_type,json=recordContentType,proto3" json:"record_content_type,omitempty"`
	BlockDigest       string                          `protobuf:"bytes,4,opt,name=block_digest,json=blockDigest,proto3" json:"block_digest,omitempty"`
	PayloadDigest     string                          `protobuf:"bytes,5,opt,name=payload_digest,json=payloadDigest,proto3" json:"payload_digest,omitempty"`
	Size              int64                           `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	SubCollection     v1.Collection_SubCollectionType `protobuf:"varint,7,opt,name=sub_collection,json=subCollection,proto3,enum=veidemann.api.config.v1.Collection_SubCollectionType" json:"sub_collection,omitempty"`
	WarcConcurrentTo  []string                        `protobuf:"bytes,8,rep,name=warc_concurrent_to,json=warcConcurrentTo,proto3" json:"warc_concurrent_to,omitempty"`
}

func (x *WriteRequestMeta_RecordMeta) Reset() {
	*x = WriteRequestMeta_RecordMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequestMeta_RecordMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequestMeta_RecordMeta) ProtoMessage() {}

func (x *WriteRequestMeta_RecordMeta) ProtoReflect() protoreflect.Message {
	mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequestMeta_RecordMeta.ProtoReflect.Descriptor instead.
func (*WriteRequestMeta_RecordMeta) Descriptor() ([]byte, []int) {
	return file_contentwriter_v1_contentwriter_proto_rawDescGZIP(), []int{1, 0}
}

func (x *WriteRequestMeta_RecordMeta) GetRecordNum() int32 {
	if x != nil {
		return x.RecordNum
	}
	return 0
}

func (x *WriteRequestMeta_RecordMeta) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_WARCINFO
}

func (x *WriteRequestMeta_RecordMeta) GetRecordContentType() string {
	if x != nil {
		return x.RecordContentType
	}
	return ""
}

func (x *WriteRequestMeta_RecordMeta) GetBlockDigest() string {
	if x != nil {
		return x.BlockDigest
	}
	return ""
}

func (x *WriteRequestMeta_RecordMeta) GetPayloadDigest() string {
	if x != nil {
		return x.PayloadDigest
	}
	return ""
}

func (x *WriteRequestMeta_RecordMeta) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WriteRequestMeta_RecordMeta) GetSubCollection() v1.Collection_SubCollectionType {
	if x != nil {
		return x.SubCollection
	}
	return v1.Collection_UNDEFINED
}

func (x *WriteRequestMeta_RecordMeta) GetWarcConcurrentTo() []string {
	if x != nil {
		return x.WarcConcurrentTo
	}
	return nil
}

type WriteResponseMeta_RecordMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNum     int32      `protobuf:"varint,1,opt,name=record_num,json=recordNum,proto3" json:"record_num,omitempty"`
	Type          RecordType `protobuf:"varint,2,opt,name=type,proto3,enum=veidemann.api.contentwriter.v1.RecordType" json:"type,omitempty"`
	WarcId        string     `protobuf:"bytes,3,opt,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	StorageRef    string     `protobuf:"bytes,4,opt,name=storage_ref,json=storageRef,proto3" json:"storage_ref,omitempty"`
	BlockDigest   string     `protobuf:"bytes,5,opt,name=block_digest,json=blockDigest,proto3" json:"block_digest,omitempty"`
	PayloadDigest string     `protobuf:"bytes,6,opt,name=payload_digest,json=payloadDigest,proto3" json:"payload_digest,omitempty"`
	// If the stored record was detected as a revisit, this field contains the id of the revisited record.
	RevisitReferenceId  string `protobuf:"bytes,7,opt,name=revisit_reference_id,json=revisitReferenceId,proto3" json:"revisit_reference_id,omitempty"`
	CollectionFinalName string `protobuf:"bytes,8,opt,name=collection_final_name,json=collectionFinalName,proto3" json:"collection_final_name,omitempty"`
}

func (x *WriteResponseMeta_RecordMeta) Reset() {
	*x = WriteResponseMeta_RecordMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponseMeta_RecordMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponseMeta_RecordMeta) ProtoMessage() {}

func (x *WriteResponseMeta_RecordMeta) ProtoReflect() protoreflect.Message {
	mi := &file_contentwriter_v1_contentwriter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponseMeta_RecordMeta.ProtoReflect.Descriptor instead.
func (*WriteResponseMeta_RecordMeta) Descriptor() ([]byte, []int) {
	return file_contentwriter_v1_contentwriter_proto_rawDescGZIP(), []int{3, 0}
}

func (x *WriteResponseMeta_RecordMeta) GetRecordNum() int32 {
	if x != nil {
		return x.RecordNum
	}
	return 0
}

func (x *WriteResponseMeta_RecordMeta) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_WARCINFO
}

func (x *WriteResponseMeta_RecordMeta) GetWarcId() string {
	if x != nil {
		return x.WarcId
	}
	return ""
}

func (x *WriteResponseMeta_RecordMeta) GetStorageRef() string {
	if x != nil {
		return x.StorageRef
	}
	return ""
}

func (x *WriteResponseMeta_RecordMeta) GetBlockDigest() string {
	if x != nil {
		return x.BlockDigest
	}
	return ""
}

func (x *WriteResponseMeta_RecordMeta) GetPayloadDigest() string {
	if x != nil {
		return x.PayloadDigest
	}
	return ""
}

func (x *WriteResponseMeta_RecordMeta) GetRevisitReferenceId() string {
	if x != nil {
		return x.RevisitReferenceId
	}
	return ""
}

func (x *WriteResponseMeta_RecordMeta) GetCollectionFinalName() string {
	if x != nil {
		return x.CollectionFinalName
	}
	return ""
}

var File_contentwriter_v1_contentwriter_proto protoreflect.FileDescriptor

var file_contentwriter_v1_contentwriter_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xeb, 0x06, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x72, 0x69, 0x12, 0x61, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x76, 0x65,
	0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49,
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x1a, 0x85, 0x03, 0x0a, 0x0a, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x77, 0x61, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x1a, 0x7a, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02,
	0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcc, 0x04, 0x0a,
	0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x62, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0xd5, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x7b,
	0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0a, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x32, 0x76, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x65, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x84, 0x01, 0x0a, 0x28, 0x6e, 0x6f, 0x2e,
	0x6e, 0x62, 0x2e, 0x6e, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x01, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6c, 0x6e, 0x77, 0x61, 0x2f,
	0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contentwriter_v1_contentwriter_proto_rawDescOnce sync.Once
	file_contentwriter_v1_contentwriter_proto_rawDescData = file_contentwriter_v1_contentwriter_proto_rawDesc
)

func file_contentwriter_v1_contentwriter_proto_rawDescGZIP() []byte {
	file_contentwriter_v1_contentwriter_proto_rawDescOnce.Do(func() {
		file_contentwriter_v1_contentwriter_proto_rawDescData = protoimpl.X.CompressGZIP(file_contentwriter_v1_contentwriter_proto_rawDescData)
	})
	return file_contentwriter_v1_contentwriter_proto_rawDescData
}

var file_contentwriter_v1_contentwriter_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_contentwriter_v1_contentwriter_proto_goTypes = []interface{}{
	(*Data)(nil),                         // 0: veidemann.api.contentwriter.v1.Data
	(*WriteRequestMeta)(nil),             // 1: veidemann.api.contentwriter.v1.WriteRequestMeta
	(*WriteRequest)(nil),                 // 2: veidemann.api.contentwriter.v1.WriteRequest
	(*WriteResponseMeta)(nil),            // 3: veidemann.api.contentwriter.v1.WriteResponseMeta
	(*WriteReply)(nil),                   // 4: veidemann.api.contentwriter.v1.WriteReply
	(*WriteRequestMeta_RecordMeta)(nil),  // 5: veidemann.api.contentwriter.v1.WriteRequestMeta.RecordMeta
	nil,                                  // 6: veidemann.api.contentwriter.v1.WriteRequestMeta.RecordMetaEntry
	(*WriteResponseMeta_RecordMeta)(nil), // 7: veidemann.api.contentwriter.v1.WriteResponseMeta.RecordMeta
	nil,                                  // 8: veidemann.api.contentwriter.v1.WriteResponseMeta.RecordMetaEntry
	(*timestamp.Timestamp)(nil),          // 9: google.protobuf.Timestamp
	(*v1.ConfigRef)(nil),                 // 10: veidemann.api.config.v1.ConfigRef
	(RecordType)(0),                      // 11: veidemann.api.contentwriter.v1.RecordType
	(v1.Collection_SubCollectionType)(0), // 12: veidemann.api.config.v1.Collection.SubCollectionType
}
var file_contentwriter_v1_contentwriter_proto_depIdxs = []int32{
	6,  // 0: veidemann.api.contentwriter.v1.WriteRequestMeta.record_meta:type_name -> veidemann.api.contentwriter.v1.WriteRequestMeta.RecordMetaEntry
	9,  // 1: veidemann.api.contentwriter.v1.WriteRequestMeta.fetch_time_stamp:type_name -> google.protobuf.Timestamp
	10, // 2: veidemann.api.contentwriter.v1.WriteRequestMeta.collection_ref:type_name -> veidemann.api.config.v1.ConfigRef
	1,  // 3: veidemann.api.contentwriter.v1.WriteRequest.meta:type_name -> veidemann.api.contentwriter.v1.WriteRequestMeta
	0,  // 4: veidemann.api.contentwriter.v1.WriteRequest.protocol_header:type_name -> veidemann.api.contentwriter.v1.Data
	0,  // 5: veidemann.api.contentwriter.v1.WriteRequest.payload:type_name -> veidemann.api.contentwriter.v1.Data
	8,  // 6: veidemann.api.contentwriter.v1.WriteResponseMeta.record_meta:type_name -> veidemann.api.contentwriter.v1.WriteResponseMeta.RecordMetaEntry
	3,  // 7: veidemann.api.contentwriter.v1.WriteReply.meta:type_name -> veidemann.api.contentwriter.v1.WriteResponseMeta
	11, // 8: veidemann.api.contentwriter.v1.WriteRequestMeta.RecordMeta.type:type_name -> veidemann.api.contentwriter.v1.RecordType
	12, // 9: veidemann.api.contentwriter.v1.WriteRequestMeta.RecordMeta.sub_collection:type_name -> veidemann.api.config.v1.Collection.SubCollectionType
	5,  // 10: veidemann.api.contentwriter.v1.WriteRequestMeta.RecordMetaEntry.value:type_name -> veidemann.api.contentwriter.v1.WriteRequestMeta.RecordMeta
	11, // 11: veidemann.api.contentwriter.v1.WriteResponseMeta.RecordMeta.type:type_name -> veidemann.api.contentwriter.v1.RecordType
	7,  // 12: veidemann.api.contentwriter.v1.WriteResponseMeta.RecordMetaEntry.value:type_name -> veidemann.api.contentwriter.v1.WriteResponseMeta.RecordMeta
	2,  // 13: veidemann.api.contentwriter.v1.ContentWriter.write:input_type -> veidemann.api.contentwriter.v1.WriteRequest
	4,  // 14: veidemann.api.contentwriter.v1.ContentWriter.write:output_type -> veidemann.api.contentwriter.v1.WriteReply
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_contentwriter_v1_contentwriter_proto_init() }
func file_contentwriter_v1_contentwriter_proto_init() {
	if File_contentwriter_v1_contentwriter_proto != nil {
		return
	}
	file_contentwriter_v1_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contentwriter_v1_contentwriter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentwriter_v1_contentwriter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequestMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentwriter_v1_contentwriter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentwriter_v1_contentwriter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentwriter_v1_contentwriter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentwriter_v1_contentwriter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequestMeta_RecordMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentwriter_v1_contentwriter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponseMeta_RecordMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_contentwriter_v1_contentwriter_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*WriteRequest_Meta)(nil),
		(*WriteRequest_ProtocolHeader)(nil),
		(*WriteRequest_Payload)(nil),
		(*WriteRequest_Cancel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contentwriter_v1_contentwriter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contentwriter_v1_contentwriter_proto_goTypes,
		DependencyIndexes: file_contentwriter_v1_contentwriter_proto_depIdxs,
		MessageInfos:      file_contentwriter_v1_contentwriter_proto_msgTypes,
	}.Build()
	File_contentwriter_v1_contentwriter_proto = out.File
	file_contentwriter_v1_contentwriter_proto_rawDesc = nil
	file_contentwriter_v1_contentwriter_proto_goTypes = nil
	file_contentwriter_v1_contentwriter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContentWriterClient is the client API for ContentWriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentWriterClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (ContentWriter_WriteClient, error)
}

type contentWriterClient struct {
	cc grpc.ClientConnInterface
}

func NewContentWriterClient(cc grpc.ClientConnInterface) ContentWriterClient {
	return &contentWriterClient{cc}
}

func (c *contentWriterClient) Write(ctx context.Context, opts ...grpc.CallOption) (ContentWriter_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContentWriter_serviceDesc.Streams[0], "/veidemann.api.contentwriter.v1.ContentWriter/write", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentWriterWriteClient{stream}
	return x, nil
}

type ContentWriter_WriteClient interface {
	Send(*WriteRequest) error
	CloseAndRecv() (*WriteReply, error)
	grpc.ClientStream
}

type contentWriterWriteClient struct {
	grpc.ClientStream
}

func (x *contentWriterWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentWriterWriteClient) CloseAndRecv() (*WriteReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentWriterServer is the server API for ContentWriter service.
type ContentWriterServer interface {
	Write(ContentWriter_WriteServer) error
}

// UnimplementedContentWriterServer can be embedded to have forward compatible implementations.
type UnimplementedContentWriterServer struct {
}

func (*UnimplementedContentWriterServer) Write(ContentWriter_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}

func RegisterContentWriterServer(s *grpc.Server, srv ContentWriterServer) {
	s.RegisterService(&_ContentWriter_serviceDesc, srv)
}

func _ContentWriter_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentWriterServer).Write(&contentWriterWriteServer{stream})
}

type ContentWriter_WriteServer interface {
	SendAndClose(*WriteReply) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type contentWriterWriteServer struct {
	grpc.ServerStream
}

func (x *contentWriterWriteServer) SendAndClose(m *WriteReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentWriterWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ContentWriter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.contentwriter.v1.ContentWriter",
	HandlerType: (*ContentWriterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "write",
			Handler:       _ContentWriter_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "contentwriter/v1/contentwriter.proto",
}
