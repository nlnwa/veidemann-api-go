// Code generated by protoc-gen-go. DO NOT EDIT.
// source: veidemann_api/dnsresolver.proto

package veidemann_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResolveRequest struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveRequest) Reset()         { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()    {}
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4035bacff408c1d, []int{0}
}

func (m *ResolveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveRequest.Unmarshal(m, b)
}
func (m *ResolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveRequest.Marshal(b, m, deterministic)
}
func (m *ResolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveRequest.Merge(m, src)
}
func (m *ResolveRequest) XXX_Size() int {
	return xxx_messageInfo_ResolveRequest.Size(m)
}
func (m *ResolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveRequest proto.InternalMessageInfo

func (m *ResolveRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ResolveRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ResolveReply struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	TextualIp            string   `protobuf:"bytes,3,opt,name=textual_ip,json=textualIp,proto3" json:"textual_ip,omitempty"`
	RawIp                []byte   `protobuf:"bytes,4,opt,name=raw_ip,json=rawIp,proto3" json:"raw_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveReply) Reset()         { *m = ResolveReply{} }
func (m *ResolveReply) String() string { return proto.CompactTextString(m) }
func (*ResolveReply) ProtoMessage()    {}
func (*ResolveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4035bacff408c1d, []int{1}
}

func (m *ResolveReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveReply.Unmarshal(m, b)
}
func (m *ResolveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveReply.Marshal(b, m, deterministic)
}
func (m *ResolveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveReply.Merge(m, src)
}
func (m *ResolveReply) XXX_Size() int {
	return xxx_messageInfo_ResolveReply.Size(m)
}
func (m *ResolveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveReply proto.InternalMessageInfo

func (m *ResolveReply) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ResolveReply) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ResolveReply) GetTextualIp() string {
	if m != nil {
		return m.TextualIp
	}
	return ""
}

func (m *ResolveReply) GetRawIp() []byte {
	if m != nil {
		return m.RawIp
	}
	return nil
}

func init() {
	proto.RegisterType((*ResolveRequest)(nil), "veidemann.api.ResolveRequest")
	proto.RegisterType((*ResolveReply)(nil), "veidemann.api.ResolveReply")
}

func init() { proto.RegisterFile("veidemann_api/dnsresolver.proto", fileDescriptor_a4035bacff408c1d) }

var fileDescriptor_a4035bacff408c1d = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xad, 0x6e, 0x93, 0x3d, 0xa7, 0x48, 0x40, 0x2c, 0xca, 0xb0, 0xf4, 0xd4, 0xcb, 0x52,
	0xd0, 0x8b, 0x20, 0x5e, 0x86, 0x20, 0xbb, 0x49, 0x0f, 0x1e, 0xbc, 0x8c, 0xd4, 0x85, 0x2d, 0x92,
	0xbd, 0x3c, 0x93, 0x74, 0x75, 0xff, 0xbd, 0xb4, 0x96, 0x62, 0x0e, 0x82, 0xb7, 0x97, 0xf7, 0x7e,
	0x1f, 0x1f, 0xdf, 0x17, 0xb8, 0xd9, 0x49, 0xb5, 0x92, 0x5b, 0x81, 0xb8, 0x14, 0xa4, 0xf2, 0x15,
	0x3a, 0x2b, 0x9d, 0xd1, 0x3b, 0x69, 0x39, 0x59, 0xe3, 0x0d, 0x3b, 0xed, 0x01, 0x2e, 0x48, 0xa5,
	0xf7, 0x70, 0x56, 0xfc, 0x00, 0x85, 0xfc, 0xac, 0xa4, 0xf3, 0x8c, 0xc1, 0x60, 0x63, 0x9c, 0x8f,
	0xa3, 0x24, 0xca, 0xc6, 0x45, 0x3b, 0x37, 0x3b, 0x32, 0xd6, 0xc7, 0x87, 0x49, 0x94, 0x0d, 0x8b,
	0x76, 0x4e, 0x35, 0x4c, 0x7a, 0x25, 0xe9, 0xfd, 0x7f, 0x75, 0x6c, 0x0a, 0xe0, 0xe5, 0x97, 0xaf,
	0x84, 0x5e, 0x2a, 0x8a, 0x8f, 0x5a, 0x7a, 0xdc, 0x6d, 0x16, 0xc4, 0x2e, 0x60, 0x64, 0x45, 0xdd,
	0x9c, 0x06, 0x49, 0x94, 0x4d, 0x8a, 0xa1, 0x15, 0xf5, 0x82, 0x6e, 0x5f, 0xe1, 0xe4, 0x09, 0x5d,
	0x67, 0x68, 0xd9, 0x33, 0x1c, 0x77, 0xb9, 0xd8, 0x94, 0x07, 0x89, 0x78, 0x18, 0xe7, 0xea, 0xfa,
	0xaf, 0x33, 0xe9, 0x7d, 0x7a, 0x30, 0xff, 0x80, 0x4b, 0x34, 0x1c, 0x4b, 0x8e, 0x28, 0x42, 0x72,
	0x7e, 0xfe, 0xcb, 0xf0, 0xa5, 0xe9, 0xee, 0xed, 0x71, 0xad, 0xfc, 0xa6, 0x2a, 0xf9, 0xbb, 0xd9,
	0xe6, 0xa8, 0xb1, 0x16, 0x79, 0xaf, 0x98, 0x09, 0x52, 0xb3, 0xb5, 0xc9, 0x83, 0xfa, 0x1f, 0x82,
	0x57, 0x39, 0x6a, 0x7f, 0xe0, 0xee, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x6f, 0x60, 0x66, 0xa4,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DnsResolverClient is the client API for DnsResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DnsResolverClient interface {
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReply, error)
}

type dnsResolverClient struct {
	cc *grpc.ClientConn
}

func NewDnsResolverClient(cc *grpc.ClientConn) DnsResolverClient {
	return &dnsResolverClient{cc}
}

func (c *dnsResolverClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReply, error) {
	out := new(ResolveReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.DnsResolver/resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsResolverServer is the server API for DnsResolver service.
type DnsResolverServer interface {
	Resolve(context.Context, *ResolveRequest) (*ResolveReply, error)
}

func RegisterDnsResolverServer(s *grpc.Server, srv DnsResolverServer) {
	s.RegisterService(&_DnsResolver_serviceDesc, srv)
}

func _DnsResolver_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsResolverServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.DnsResolver/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsResolverServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DnsResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.DnsResolver",
	HandlerType: (*DnsResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "resolve",
			Handler:    _DnsResolver_Resolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veidemann_api/dnsresolver.proto",
}
