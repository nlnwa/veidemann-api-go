// Code generated by protoc-gen-go. DO NOT EDIT.
// source: veidemann_api/controller.proto

package veidemann_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request for getting an object by id
//
// Deprecated: Do not use.
type GetRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{0}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specification of wich entities to get.
//
// Deprecated: Do not use.
type ListRequest struct {
	// Select objects by id
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	// Select objects by name
	// The name query is a case insensitive regular expresion search on name.
	// <pre>
	// Examples:
	//   "foo"       - matches all names containing the phrase foo
	//   "^foo$"     - matches the exact name foo
	//   "foo.*bar$" - matches names containing foo followed by zero or more tokens and ends with bar
	// </pre>
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Select objects by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	LabelSelector        []string `protobuf:"bytes,3,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	PageSize             int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32    `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{1}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListRequest) GetLabelSelector() []string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *ListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of entities
//
// Deprecated: Do not use.
type CrawlEntityListReply struct {
	Value                []*CrawlEntity `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32          `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CrawlEntityListReply) Reset()         { *m = CrawlEntityListReply{} }
func (m *CrawlEntityListReply) String() string { return proto.CompactTextString(m) }
func (*CrawlEntityListReply) ProtoMessage()    {}
func (*CrawlEntityListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{2}
}

func (m *CrawlEntityListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlEntityListReply.Unmarshal(m, b)
}
func (m *CrawlEntityListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlEntityListReply.Marshal(b, m, deterministic)
}
func (m *CrawlEntityListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlEntityListReply.Merge(m, src)
}
func (m *CrawlEntityListReply) XXX_Size() int {
	return xxx_messageInfo_CrawlEntityListReply.Size(m)
}
func (m *CrawlEntityListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlEntityListReply.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlEntityListReply proto.InternalMessageInfo

func (m *CrawlEntityListReply) GetValue() []*CrawlEntity {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlEntityListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlEntityListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlEntityListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type SeedListRequest struct {
	// Select objects by id
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	// Select objects by name
	// The name query is a case insensitive regular expresion search on name.
	// <pre>
	// Examples:
	//   "foo"       - matches all names containing the phrase foo
	//   "^foo$"     - matches the exact name foo
	//   "foo.*bar$" - matches names containing foo followed by zero or more tokens and ends with bar
	// </pre>
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Select objects by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	LabelSelector []string `protobuf:"bytes,3,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Select objects by crawl job id
	CrawlJobId string `protobuf:"bytes,4,opt,name=crawl_job_id,json=crawlJobId,proto3" json:"crawl_job_id,omitempty"`
	// Select objects by entity id
	EntityId             string   `protobuf:"bytes,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	PageSize             int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32    `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeedListRequest) Reset()         { *m = SeedListRequest{} }
func (m *SeedListRequest) String() string { return proto.CompactTextString(m) }
func (*SeedListRequest) ProtoMessage()    {}
func (*SeedListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{3}
}

func (m *SeedListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeedListRequest.Unmarshal(m, b)
}
func (m *SeedListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeedListRequest.Marshal(b, m, deterministic)
}
func (m *SeedListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedListRequest.Merge(m, src)
}
func (m *SeedListRequest) XXX_Size() int {
	return xxx_messageInfo_SeedListRequest.Size(m)
}
func (m *SeedListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SeedListRequest proto.InternalMessageInfo

func (m *SeedListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SeedListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SeedListRequest) GetLabelSelector() []string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *SeedListRequest) GetCrawlJobId() string {
	if m != nil {
		return m.CrawlJobId
	}
	return ""
}

func (m *SeedListRequest) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *SeedListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SeedListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type SeedListReply struct {
	Value                []*Seed  `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32    `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeedListReply) Reset()         { *m = SeedListReply{} }
func (m *SeedListReply) String() string { return proto.CompactTextString(m) }
func (*SeedListReply) ProtoMessage()    {}
func (*SeedListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{4}
}

func (m *SeedListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeedListReply.Unmarshal(m, b)
}
func (m *SeedListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeedListReply.Marshal(b, m, deterministic)
}
func (m *SeedListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedListReply.Merge(m, src)
}
func (m *SeedListReply) XXX_Size() int {
	return xxx_messageInfo_SeedListReply.Size(m)
}
func (m *SeedListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedListReply.DiscardUnknown(m)
}

var xxx_messageInfo_SeedListReply proto.InternalMessageInfo

func (m *SeedListReply) GetValue() []*Seed {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SeedListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SeedListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SeedListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type CrawlJobListReply struct {
	Value                []*CrawlJob `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32       `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32       `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CrawlJobListReply) Reset()         { *m = CrawlJobListReply{} }
func (m *CrawlJobListReply) String() string { return proto.CompactTextString(m) }
func (*CrawlJobListReply) ProtoMessage()    {}
func (*CrawlJobListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{5}
}

func (m *CrawlJobListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlJobListReply.Unmarshal(m, b)
}
func (m *CrawlJobListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlJobListReply.Marshal(b, m, deterministic)
}
func (m *CrawlJobListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlJobListReply.Merge(m, src)
}
func (m *CrawlJobListReply) XXX_Size() int {
	return xxx_messageInfo_CrawlJobListReply.Size(m)
}
func (m *CrawlJobListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlJobListReply.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlJobListReply proto.InternalMessageInfo

func (m *CrawlJobListReply) GetValue() []*CrawlJob {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlJobListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlJobListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlJobListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type CrawlConfigListReply struct {
	Value                []*CrawlConfig `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32          `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CrawlConfigListReply) Reset()         { *m = CrawlConfigListReply{} }
func (m *CrawlConfigListReply) String() string { return proto.CompactTextString(m) }
func (*CrawlConfigListReply) ProtoMessage()    {}
func (*CrawlConfigListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{6}
}

func (m *CrawlConfigListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlConfigListReply.Unmarshal(m, b)
}
func (m *CrawlConfigListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlConfigListReply.Marshal(b, m, deterministic)
}
func (m *CrawlConfigListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlConfigListReply.Merge(m, src)
}
func (m *CrawlConfigListReply) XXX_Size() int {
	return xxx_messageInfo_CrawlConfigListReply.Size(m)
}
func (m *CrawlConfigListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlConfigListReply.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlConfigListReply proto.InternalMessageInfo

func (m *CrawlConfigListReply) GetValue() []*CrawlConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type CrawlScheduleConfigListReply struct {
	Value                []*CrawlScheduleConfig `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32                  `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32                  `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CrawlScheduleConfigListReply) Reset()         { *m = CrawlScheduleConfigListReply{} }
func (m *CrawlScheduleConfigListReply) String() string { return proto.CompactTextString(m) }
func (*CrawlScheduleConfigListReply) ProtoMessage()    {}
func (*CrawlScheduleConfigListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{7}
}

func (m *CrawlScheduleConfigListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlScheduleConfigListReply.Unmarshal(m, b)
}
func (m *CrawlScheduleConfigListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlScheduleConfigListReply.Marshal(b, m, deterministic)
}
func (m *CrawlScheduleConfigListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlScheduleConfigListReply.Merge(m, src)
}
func (m *CrawlScheduleConfigListReply) XXX_Size() int {
	return xxx_messageInfo_CrawlScheduleConfigListReply.Size(m)
}
func (m *CrawlScheduleConfigListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlScheduleConfigListReply.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlScheduleConfigListReply proto.InternalMessageInfo

func (m *CrawlScheduleConfigListReply) GetValue() []*CrawlScheduleConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlScheduleConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlScheduleConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlScheduleConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type PolitenessConfigListReply struct {
	Value                []*PolitenessConfig `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32               `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32               `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PolitenessConfigListReply) Reset()         { *m = PolitenessConfigListReply{} }
func (m *PolitenessConfigListReply) String() string { return proto.CompactTextString(m) }
func (*PolitenessConfigListReply) ProtoMessage()    {}
func (*PolitenessConfigListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{8}
}

func (m *PolitenessConfigListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolitenessConfigListReply.Unmarshal(m, b)
}
func (m *PolitenessConfigListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolitenessConfigListReply.Marshal(b, m, deterministic)
}
func (m *PolitenessConfigListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolitenessConfigListReply.Merge(m, src)
}
func (m *PolitenessConfigListReply) XXX_Size() int {
	return xxx_messageInfo_PolitenessConfigListReply.Size(m)
}
func (m *PolitenessConfigListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PolitenessConfigListReply.DiscardUnknown(m)
}

var xxx_messageInfo_PolitenessConfigListReply proto.InternalMessageInfo

func (m *PolitenessConfigListReply) GetValue() []*PolitenessConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PolitenessConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PolitenessConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PolitenessConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type BrowserConfigListReply struct {
	Value                []*BrowserConfig `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32            `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32            `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BrowserConfigListReply) Reset()         { *m = BrowserConfigListReply{} }
func (m *BrowserConfigListReply) String() string { return proto.CompactTextString(m) }
func (*BrowserConfigListReply) ProtoMessage()    {}
func (*BrowserConfigListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{9}
}

func (m *BrowserConfigListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserConfigListReply.Unmarshal(m, b)
}
func (m *BrowserConfigListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserConfigListReply.Marshal(b, m, deterministic)
}
func (m *BrowserConfigListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserConfigListReply.Merge(m, src)
}
func (m *BrowserConfigListReply) XXX_Size() int {
	return xxx_messageInfo_BrowserConfigListReply.Size(m)
}
func (m *BrowserConfigListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserConfigListReply.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserConfigListReply proto.InternalMessageInfo

func (m *BrowserConfigListReply) GetValue() []*BrowserConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BrowserConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BrowserConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *BrowserConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of browserscripts
//
// Deprecated: Do not use.
type BrowserScriptListReply struct {
	Value                []*BrowserScript `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32            `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32            `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BrowserScriptListReply) Reset()         { *m = BrowserScriptListReply{} }
func (m *BrowserScriptListReply) String() string { return proto.CompactTextString(m) }
func (*BrowserScriptListReply) ProtoMessage()    {}
func (*BrowserScriptListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{10}
}

func (m *BrowserScriptListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserScriptListReply.Unmarshal(m, b)
}
func (m *BrowserScriptListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserScriptListReply.Marshal(b, m, deterministic)
}
func (m *BrowserScriptListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserScriptListReply.Merge(m, src)
}
func (m *BrowserScriptListReply) XXX_Size() int {
	return xxx_messageInfo_BrowserScriptListReply.Size(m)
}
func (m *BrowserScriptListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserScriptListReply.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserScriptListReply proto.InternalMessageInfo

func (m *BrowserScriptListReply) GetValue() []*BrowserScript {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BrowserScriptListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BrowserScriptListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *BrowserScriptListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of CrawlHostGroupConfigs
//
// Deprecated: Do not use.
type CrawlHostGroupConfigListReply struct {
	Value                []*CrawlHostGroupConfig `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32                   `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32                   `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CrawlHostGroupConfigListReply) Reset()         { *m = CrawlHostGroupConfigListReply{} }
func (m *CrawlHostGroupConfigListReply) String() string { return proto.CompactTextString(m) }
func (*CrawlHostGroupConfigListReply) ProtoMessage()    {}
func (*CrawlHostGroupConfigListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{11}
}

func (m *CrawlHostGroupConfigListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlHostGroupConfigListReply.Unmarshal(m, b)
}
func (m *CrawlHostGroupConfigListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlHostGroupConfigListReply.Marshal(b, m, deterministic)
}
func (m *CrawlHostGroupConfigListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlHostGroupConfigListReply.Merge(m, src)
}
func (m *CrawlHostGroupConfigListReply) XXX_Size() int {
	return xxx_messageInfo_CrawlHostGroupConfigListReply.Size(m)
}
func (m *CrawlHostGroupConfigListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlHostGroupConfigListReply.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlHostGroupConfigListReply proto.InternalMessageInfo

func (m *CrawlHostGroupConfigListReply) GetValue() []*CrawlHostGroupConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlHostGroupConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlHostGroupConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlHostGroupConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Cick of a crawl job immediately
type RunCrawlRequest struct {
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// If seed id is submitted, only this seed will be harvested.
	// If empty, all seeds configured with the submitted job id will be harvested.
	SeedId               string   `protobuf:"bytes,6,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunCrawlRequest) Reset()         { *m = RunCrawlRequest{} }
func (m *RunCrawlRequest) String() string { return proto.CompactTextString(m) }
func (*RunCrawlRequest) ProtoMessage()    {}
func (*RunCrawlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{12}
}

func (m *RunCrawlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunCrawlRequest.Unmarshal(m, b)
}
func (m *RunCrawlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunCrawlRequest.Marshal(b, m, deterministic)
}
func (m *RunCrawlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCrawlRequest.Merge(m, src)
}
func (m *RunCrawlRequest) XXX_Size() int {
	return xxx_messageInfo_RunCrawlRequest.Size(m)
}
func (m *RunCrawlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCrawlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunCrawlRequest proto.InternalMessageInfo

func (m *RunCrawlRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *RunCrawlRequest) GetSeedId() string {
	if m != nil {
		return m.SeedId
	}
	return ""
}

type RunCrawlReply struct {
	JobExecutionId       string   `protobuf:"bytes,1,opt,name=job_execution_id,json=jobExecutionId,proto3" json:"job_execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunCrawlReply) Reset()         { *m = RunCrawlReply{} }
func (m *RunCrawlReply) String() string { return proto.CompactTextString(m) }
func (*RunCrawlReply) ProtoMessage()    {}
func (*RunCrawlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{13}
}

func (m *RunCrawlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunCrawlReply.Unmarshal(m, b)
}
func (m *RunCrawlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunCrawlReply.Marshal(b, m, deterministic)
}
func (m *RunCrawlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCrawlReply.Merge(m, src)
}
func (m *RunCrawlReply) XXX_Size() int {
	return xxx_messageInfo_RunCrawlReply.Size(m)
}
func (m *RunCrawlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCrawlReply.DiscardUnknown(m)
}

var xxx_messageInfo_RunCrawlReply proto.InternalMessageInfo

func (m *RunCrawlReply) GetJobExecutionId() string {
	if m != nil {
		return m.JobExecutionId
	}
	return ""
}

type RoleList struct {
	Role                 []Role   `protobuf:"varint,1,rep,packed,name=role,proto3,enum=veidemann.api.Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleList) Reset()         { *m = RoleList{} }
func (m *RoleList) String() string { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()    {}
func (*RoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{14}
}

func (m *RoleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleList.Unmarshal(m, b)
}
func (m *RoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleList.Marshal(b, m, deterministic)
}
func (m *RoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleList.Merge(m, src)
}
func (m *RoleList) XXX_Size() int {
	return xxx_messageInfo_RoleList.Size(m)
}
func (m *RoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleList.DiscardUnknown(m)
}

var xxx_messageInfo_RoleList proto.InternalMessageInfo

func (m *RoleList) GetRole() []Role {
	if m != nil {
		return m.Role
	}
	return nil
}

// Deprecated: Do not use.
type RoleMappingsListRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PageSize             int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32    `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleMappingsListRequest) Reset()         { *m = RoleMappingsListRequest{} }
func (m *RoleMappingsListRequest) String() string { return proto.CompactTextString(m) }
func (*RoleMappingsListRequest) ProtoMessage()    {}
func (*RoleMappingsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{15}
}

func (m *RoleMappingsListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleMappingsListRequest.Unmarshal(m, b)
}
func (m *RoleMappingsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleMappingsListRequest.Marshal(b, m, deterministic)
}
func (m *RoleMappingsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleMappingsListRequest.Merge(m, src)
}
func (m *RoleMappingsListRequest) XXX_Size() int {
	return xxx_messageInfo_RoleMappingsListRequest.Size(m)
}
func (m *RoleMappingsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleMappingsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoleMappingsListRequest proto.InternalMessageInfo

func (m *RoleMappingsListRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoleMappingsListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoleMappingsListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Deprecated: Do not use.
type RoleMappingsListReply struct {
	Value                []*RoleMapping `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32          `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RoleMappingsListReply) Reset()         { *m = RoleMappingsListReply{} }
func (m *RoleMappingsListReply) String() string { return proto.CompactTextString(m) }
func (*RoleMappingsListReply) ProtoMessage()    {}
func (*RoleMappingsListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{16}
}

func (m *RoleMappingsListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleMappingsListReply.Unmarshal(m, b)
}
func (m *RoleMappingsListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleMappingsListReply.Marshal(b, m, deterministic)
}
func (m *RoleMappingsListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleMappingsListReply.Merge(m, src)
}
func (m *RoleMappingsListReply) XXX_Size() int {
	return xxx_messageInfo_RoleMappingsListReply.Size(m)
}
func (m *RoleMappingsListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleMappingsListReply.DiscardUnknown(m)
}

var xxx_messageInfo_RoleMappingsListReply proto.InternalMessageInfo

func (m *RoleMappingsListReply) GetValue() []*RoleMapping {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RoleMappingsListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RoleMappingsListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoleMappingsListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type OpenIdConnectIssuerReply struct {
	OpenIdConnectIssuer  string   `protobuf:"bytes,1,opt,name=open_id_connect_issuer,json=openIdConnectIssuer,proto3" json:"open_id_connect_issuer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenIdConnectIssuerReply) Reset()         { *m = OpenIdConnectIssuerReply{} }
func (m *OpenIdConnectIssuerReply) String() string { return proto.CompactTextString(m) }
func (*OpenIdConnectIssuerReply) ProtoMessage()    {}
func (*OpenIdConnectIssuerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aee81dc04597874, []int{17}
}

func (m *OpenIdConnectIssuerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenIdConnectIssuerReply.Unmarshal(m, b)
}
func (m *OpenIdConnectIssuerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenIdConnectIssuerReply.Marshal(b, m, deterministic)
}
func (m *OpenIdConnectIssuerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenIdConnectIssuerReply.Merge(m, src)
}
func (m *OpenIdConnectIssuerReply) XXX_Size() int {
	return xxx_messageInfo_OpenIdConnectIssuerReply.Size(m)
}
func (m *OpenIdConnectIssuerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenIdConnectIssuerReply.DiscardUnknown(m)
}

var xxx_messageInfo_OpenIdConnectIssuerReply proto.InternalMessageInfo

func (m *OpenIdConnectIssuerReply) GetOpenIdConnectIssuer() string {
	if m != nil {
		return m.OpenIdConnectIssuer
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "veidemann.api.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "veidemann.api.ListRequest")
	proto.RegisterType((*CrawlEntityListReply)(nil), "veidemann.api.CrawlEntityListReply")
	proto.RegisterType((*SeedListRequest)(nil), "veidemann.api.SeedListRequest")
	proto.RegisterType((*SeedListReply)(nil), "veidemann.api.SeedListReply")
	proto.RegisterType((*CrawlJobListReply)(nil), "veidemann.api.CrawlJobListReply")
	proto.RegisterType((*CrawlConfigListReply)(nil), "veidemann.api.CrawlConfigListReply")
	proto.RegisterType((*CrawlScheduleConfigListReply)(nil), "veidemann.api.CrawlScheduleConfigListReply")
	proto.RegisterType((*PolitenessConfigListReply)(nil), "veidemann.api.PolitenessConfigListReply")
	proto.RegisterType((*BrowserConfigListReply)(nil), "veidemann.api.BrowserConfigListReply")
	proto.RegisterType((*BrowserScriptListReply)(nil), "veidemann.api.BrowserScriptListReply")
	proto.RegisterType((*CrawlHostGroupConfigListReply)(nil), "veidemann.api.CrawlHostGroupConfigListReply")
	proto.RegisterType((*RunCrawlRequest)(nil), "veidemann.api.RunCrawlRequest")
	proto.RegisterType((*RunCrawlReply)(nil), "veidemann.api.RunCrawlReply")
	proto.RegisterType((*RoleList)(nil), "veidemann.api.RoleList")
	proto.RegisterType((*RoleMappingsListRequest)(nil), "veidemann.api.RoleMappingsListRequest")
	proto.RegisterType((*RoleMappingsListReply)(nil), "veidemann.api.RoleMappingsListReply")
	proto.RegisterType((*OpenIdConnectIssuerReply)(nil), "veidemann.api.OpenIdConnectIssuerReply")
}

func init() { proto.RegisterFile("veidemann_api/controller.proto", fileDescriptor_6aee81dc04597874) }

var fileDescriptor_6aee81dc04597874 = []byte{
	// 1880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x4d, 0x6f, 0xdb, 0xc8,
	0x19, 0xc6, 0x38, 0x76, 0xd6, 0x79, 0x13, 0x7f, 0x8d, 0x3f, 0x24, 0xd3, 0x8e, 0x57, 0x3b, 0x8e,
	0x1d, 0x47, 0xb1, 0xa5, 0xd4, 0xc6, 0x02, 0x5d, 0x2f, 0xb6, 0x80, 0xe3, 0xcd, 0xaa, 0x36, 0xbc,
	0x58, 0x43, 0xc6, 0xe6, 0xb0, 0xe8, 0x46, 0xa5, 0xa4, 0x89, 0x4c, 0x83, 0xe6, 0xb0, 0x24, 0x65,
	0xc7, 0x5b, 0x14, 0xc5, 0x16, 0x68, 0x11, 0x04, 0xf0, 0xa1, 0xdd, 0x05, 0x72, 0xea, 0xa1, 0x28,
	0x7a, 0xef, 0x3f, 0xe8, 0xa5, 0xa7, 0x9e, 0x0a, 0xf4, 0x2f, 0xf4, 0xdc, 0xdf, 0x50, 0xcc, 0x90,
	0xe2, 0x97, 0xc8, 0x21, 0x25, 0x40, 0xa7, 0x58, 0x9c, 0x77, 0xde, 0xe7, 0x79, 0xdf, 0xe7, 0xe1,
	0x70, 0x66, 0x10, 0x58, 0xbb, 0xa2, 0x5a, 0x9b, 0x5e, 0xaa, 0x86, 0xd1, 0x50, 0x4d, 0xad, 0xda,
	0x62, 0x86, 0x63, 0x31, 0x5d, 0xa7, 0x56, 0xc5, 0xb4, 0x98, 0xc3, 0xf0, 0x94, 0x3f, 0x5e, 0x51,
	0x4d, 0x4d, 0x51, 0xfa, 0xc2, 0x5f, 0x6b, 0x1d, 0x37, 0x54, 0x59, 0xe9, 0x30, 0xd6, 0xd1, 0x69,
	0x55, 0xfc, 0x6a, 0x76, 0x5f, 0x57, 0xe9, 0xa5, 0xe9, 0xdc, 0x78, 0x83, 0xab, 0xde, 0x20, 0x9f,
	0xa5, 0x1a, 0x06, 0x73, 0x54, 0x47, 0x63, 0x86, 0xed, 0x8d, 0x6e, 0x8b, 0x7f, 0x5a, 0x3b, 0x1d,
	0x6a, 0xec, 0xd8, 0xd7, 0x6a, 0xa7, 0x43, 0xad, 0x2a, 0x33, 0x45, 0x44, 0x7f, 0x34, 0x29, 0x01,
	0xd4, 0xa8, 0x53, 0xa7, 0xbf, 0xea, 0x52, 0xdb, 0xc1, 0xd3, 0x30, 0xa6, 0xb5, 0x8b, 0xa8, 0x84,
	0xb6, 0xee, 0xd5, 0xc7, 0xb4, 0xf6, 0xfe, 0x58, 0x11, 0x91, 0x5b, 0x04, 0xf7, 0x4f, 0x34, 0xbb,
	0x2f, 0xe6, 0x8e, 0x1b, 0x83, 0x31, 0x8c, 0x1b, 0xea, 0x25, 0x2d, 0x8e, 0x89, 0x59, 0xe2, 0x6f,
	0xbc, 0x01, 0xd3, 0xba, 0xda, 0xa4, 0x7a, 0xc3, 0xa6, 0x3a, 0x6d, 0x39, 0xcc, 0x2a, 0xde, 0x11,
	0xf1, 0x53, 0xe2, 0xe9, 0x99, 0xf7, 0x10, 0xaf, 0xc0, 0x3d, 0x53, 0xed, 0xd0, 0x86, 0xad, 0x7d,
	0x47, 0x8b, 0xd3, 0x25, 0xb4, 0x35, 0x51, 0x9f, 0xe4, 0x0f, 0xce, 0xb4, 0xef, 0x28, 0xcf, 0xcb,
	0xff, 0x2e, 0xce, 0x88, 0xe7, 0xe2, 0x6f, 0xc1, 0xe7, 0x07, 0x04, 0x0b, 0x87, 0x96, 0x7a, 0xad,
	0xbf, 0x30, 0x1c, 0xcd, 0xb9, 0x71, 0xa9, 0x99, 0xfa, 0x0d, 0x7e, 0x06, 0x13, 0x57, 0xaa, 0xde,
	0xa5, 0x82, 0xdb, 0xfd, 0x5d, 0xa5, 0x12, 0x69, 0x77, 0x25, 0x34, 0xa7, 0xee, 0x06, 0xe2, 0x05,
	0x98, 0x68, 0xb1, 0xae, 0xe1, 0x08, 0xee, 0x77, 0xea, 0xee, 0x8f, 0xe1, 0x58, 0xfd, 0x1b, 0xc1,
	0xcc, 0x19, 0xa5, 0xed, 0x11, 0x75, 0xaa, 0x04, 0x0f, 0x5a, 0x9c, 0x7f, 0xe3, 0x82, 0x35, 0x1b,
	0x5a, 0xbb, 0x38, 0x2e, 0x52, 0x80, 0x78, 0x76, 0xcc, 0x9a, 0x47, 0x6d, 0xce, 0x9a, 0x8a, 0xe2,
	0xf8, 0xf0, 0x84, 0x18, 0x9e, 0x74, 0x1f, 0xb8, 0x83, 0x83, 0x97, 0xf4, 0x7b, 0x04, 0x53, 0x41,
	0x49, 0xbc, 0xc3, 0x4f, 0xa2, 0x1d, 0x9e, 0x8f, 0x75, 0x98, 0x07, 0x8f, 0xa0, 0xb5, 0xb7, 0x08,
	0xe6, 0x0e, 0xbd, 0x42, 0x03, 0x2e, 0x3b, 0x51, 0x2e, 0x85, 0x24, 0xb5, 0x8f, 0x59, 0x73, 0x04,
	0x7c, 0x7c, 0x03, 0x1e, 0x8a, 0x37, 0x76, 0x30, 0x03, 0xba, 0x73, 0x46, 0xc0, 0xea, 0xaf, 0x08,
	0x56, 0x05, 0xc2, 0x59, 0xeb, 0x9c, 0xb6, 0xbb, 0x3a, 0x8d, 0xb3, 0xfb, 0x69, 0x94, 0x1d, 0x49,
	0x62, 0x17, 0x9d, 0x3b, 0x02, 0x96, 0x7f, 0x46, 0xb0, 0x7c, 0xca, 0x74, 0xcd, 0xa1, 0x06, 0xb5,
	0xed, 0x38, 0xc5, 0x8f, 0xa3, 0x14, 0x3f, 0x8c, 0x51, 0x8c, 0x4f, 0x1c, 0x01, 0xbf, 0xf7, 0x08,
	0x96, 0x9e, 0x5b, 0xec, 0xda, 0xa6, 0x56, 0x9c, 0xdc, 0x6e, 0x94, 0xdc, 0x6a, 0x8c, 0x5c, 0x64,
	0xd6, 0x68, 0x99, 0x9d, 0xb5, 0x2c, 0xcd, 0x74, 0x06, 0x65, 0xe6, 0xce, 0x1a, 0x01, 0xb3, 0xbf,
	0x21, 0x78, 0x28, 0xdc, 0xf3, 0x73, 0x66, 0x3b, 0x35, 0x8b, 0x75, 0xcd, 0x78, 0xeb, 0x3e, 0x89,
	0x12, 0x5c, 0x4f, 0xb2, 0x5e, 0x6c, 0xf2, 0x08, 0x78, 0x1e, 0xc0, 0x4c, 0xbd, 0x6b, 0x08, 0xb0,
	0xde, 0x0a, 0xbd, 0x08, 0x77, 0xbd, 0x05, 0xd5, 0x5d, 0x31, 0x27, 0x2e, 0xc4, 0x5a, 0x5a, 0x80,
	0x0f, 0x6c, 0x4a, 0xdb, 0xfc, 0xf9, 0x5d, 0xf1, 0xfc, 0x2e, 0xff, 0x79, 0xd4, 0x26, 0x9f, 0xc0,
	0x54, 0x90, 0x82, 0x57, 0xb6, 0x05, 0xb3, 0x3c, 0x01, 0x7d, 0x43, 0x5b, 0x5d, 0xfe, 0x59, 0x6d,
	0xf8, 0x9f, 0xcf, 0xe9, 0x0b, 0xd6, 0x7c, 0xd1, 0x7b, 0x7c, 0xd4, 0x26, 0x7b, 0x30, 0x59, 0x67,
	0x3a, 0xe5, 0x4d, 0xc1, 0x8f, 0x61, 0xdc, 0x62, 0xba, 0xdb, 0x8e, 0xe9, 0xbe, 0x65, 0x94, 0x87,
	0xd5, 0x45, 0x00, 0x79, 0x05, 0x05, 0xfe, 0xeb, 0x4b, 0xd5, 0x34, 0x35, 0xa3, 0x63, 0x27, 0x7d,
	0x5c, 0xbc, 0x4f, 0xf5, 0x70, 0x2d, 0xf9, 0x11, 0xc1, 0x62, 0x3f, 0x40, 0x8e, 0xb5, 0x2c, 0x34,
	0x69, 0x04, 0x4a, 0x7d, 0x05, 0xc5, 0xaf, 0x4c, 0x6a, 0x1c, 0xb5, 0x0f, 0x99, 0x61, 0xd0, 0x96,
	0x73, 0x64, 0xdb, 0x5d, 0x6a, 0xb9, 0xc4, 0xf6, 0x60, 0x89, 0x99, 0x94, 0x37, 0xba, 0xd1, 0x72,
	0x47, 0x1b, 0x9a, 0x18, 0xf6, 0x7a, 0x31, 0xcf, 0xfa, 0x67, 0xee, 0xfe, 0x6f, 0x1b, 0xe0, 0xd0,
	0xdf, 0x8e, 0x61, 0x03, 0xa6, 0x6b, 0xd4, 0x09, 0x6d, 0x08, 0xf0, 0x72, 0xac, 0xbe, 0x60, 0x4f,
	0xa4, 0x48, 0xf6, 0x11, 0x64, 0xe3, 0x77, 0xff, 0xf9, 0xef, 0x0f, 0x63, 0xab, 0x58, 0xa9, 0x86,
	0x36, 0x7c, 0x55, 0xf1, 0xd9, 0xd5, 0xa8, 0x5d, 0xfd, 0xb5, 0xd6, 0xfe, 0xcd, 0xdb, 0x31, 0x84,
	0xaf, 0x60, 0x8e, 0x77, 0x36, 0x98, 0xa9, 0x51, 0x1b, 0xc7, 0xf3, 0x86, 0xc4, 0x55, 0xd6, 0xd3,
	0x31, 0x7d, 0x89, 0x48, 0x49, 0x80, 0x17, 0xf0, 0x62, 0x22, 0x38, 0xc7, 0x7d, 0x87, 0x00, 0xce,
	0xd4, 0x2b, 0xea, 0x15, 0x29, 0xa9, 0x44, 0x5a, 0xe5, 0xe7, 0x02, 0xe8, 0x53, 0x25, 0x19, 0x68,
	0x1f, 0x95, 0xbf, 0xf9, 0x90, 0x48, 0x3a, 0xb0, 0x8f, 0xca, 0x9c, 0x8c, 0x06, 0x0f, 0x3e, 0xa7,
	0x3a, 0x75, 0xf2, 0xb0, 0x59, 0xaa, 0xb8, 0x5b, 0xdc, 0x4a, 0x6f, 0xff, 0x5b, 0x79, 0xc1, 0xf7,
	0xbf, 0xbd, 0x7e, 0x97, 0x33, 0xfa, 0xfd, 0x2d, 0x7c, 0x50, 0xa3, 0x0e, 0xdf, 0x8e, 0xc8, 0x84,
	0x4d, 0xda, 0xbe, 0x10, 0x22, 0x10, 0x96, 0x71, 0x21, 0x82, 0xc0, 0x5f, 0xff, 0x20, 0xfd, 0x39,
	0xdc, 0xe3, 0x2a, 0xf0, 0x78, 0x1b, 0xaf, 0x25, 0x64, 0x09, 0x4b, 0xb9, 0x9a, 0x3a, 0xce, 0x35,
	0x7c, 0x28, 0xe0, 0x16, 0x30, 0xee, 0x87, 0xe3, 0x48, 0x0e, 0x4c, 0x72, 0xfd, 0x44, 0x25, 0x49,
	0x74, 0x93, 0x6b, 0xf8, 0x99, 0x48, 0xfa, 0xb1, 0x92, 0x90, 0x94, 0x8b, 0xb5, 0x4a, 0xd2, 0x8a,
	0xf3, 0x94, 0xfa, 0x16, 0xc0, 0x55, 0x2a, 0x1d, 0x37, 0x4d, 0x20, 0xaf, 0x7d, 0x65, 0x59, 0xfb,
	0x34, 0xb8, 0xdf, 0x7b, 0xfb, 0x8e, 0x59, 0x53, 0xa6, 0x50, 0xda, 0xa6, 0x8e, 0x6c, 0x0a, 0x98,
	0x87, 0x78, 0x25, 0x02, 0x23, 0x76, 0xc3, 0x17, 0xac, 0x19, 0x40, 0x99, 0x30, 0xe5, 0xbf, 0x78,
	0xc7, 0xac, 0x29, 0x7f, 0xe9, 0x4a, 0x29, 0x68, 0x81, 0x5a, 0x1f, 0x09, 0xd8, 0x22, 0x5e, 0x4a,
	0x86, 0xe5, 0x88, 0x6f, 0x11, 0x3c, 0xe0, 0x92, 0xf9, 0xe5, 0xa5, 0xd5, 0x90, 0x5e, 0xdc, 0x17,
	0x02, 0xe5, 0x33, 0x25, 0x05, 0x85, 0x4b, 0x58, 0x22, 0xb2, 0xca, 0xfd, 0x17, 0x6e, 0xda, 0x95,
	0x31, 0x9b, 0x4b, 0x9a, 0x9c, 0x5e, 0x9f, 0xcb, 0x59, 0x7d, 0xb6, 0x82, 0x05, 0xd5, 0xfd, 0x7c,
	0x0f, 0xbc, 0xa0, 0xba, 0xd3, 0xc8, 0x13, 0x01, 0x58, 0xc2, 0x6b, 0xfd, 0x80, 0xee, 0xf9, 0x38,
	0xc0, 0xbc, 0x81, 0x59, 0x5f, 0x5b, 0x77, 0xf6, 0x10, 0x6b, 0x6a, 0x6c, 0xa7, 0x42, 0x1e, 0x09,
	0xfc, 0x15, 0xbc, 0x9c, 0x8a, 0xcf, 0xa1, 0xdf, 0xf3, 0xc3, 0x5e, 0x4f, 0x64, 0xaf, 0x60, 0x49,
	0x55, 0xd2, 0x8a, 0x4f, 0x04, 0xe2, 0xa1, 0x92, 0x8e, 0xc8, 0x05, 0x5f, 0x27, 0x19, 0x1d, 0xf1,
	0x34, 0xb7, 0x60, 0x2e, 0xa4, 0x79, 0x0e, 0x6a, 0x69, 0xca, 0x7b, 0x42, 0x94, 0x73, 0x08, 0xf1,
	0x0e, 0xc1, 0x52, 0x4f, 0xfd, 0xe8, 0x01, 0x42, 0xe6, 0x82, 0x1c, 0xe7, 0x0f, 0xf2, 0x13, 0x41,
	0x62, 0x0b, 0x6f, 0xf6, 0x93, 0xb0, 0xbd, 0xc8, 0x38, 0x99, 0x3f, 0x22, 0x28, 0xfa, 0xb6, 0x88,
	0xa6, 0x93, 0xdb, 0xe3, 0x69, 0x36, 0x9f, 0xc0, 0x26, 0xdb, 0x82, 0xd8, 0x3a, 0xfe, 0x28, 0x93,
	0x18, 0xe7, 0xf4, 0x0f, 0x04, 0x05, 0xdf, 0x2e, 0xb1, 0x0e, 0xe5, 0x68, 0x43, 0xae, 0x56, 0xfd,
	0x42, 0x30, 0x3a, 0x53, 0xb2, 0x19, 0x71, 0x3b, 0x3d, 0x25, 0x39, 0x5b, 0xea, 0xd9, 0xea, 0x1d,
	0x82, 0xe5, 0x90, 0xaf, 0x86, 0xa8, 0x21, 0xcd, 0x67, 0x9e, 0xc4, 0xe5, 0x01, 0x24, 0xfe, 0x1e,
	0xc1, 0x7c, 0x8d, 0x3a, 0xf1, 0xd3, 0xa0, 0xcc, 0x6c, 0x59, 0x27, 0x49, 0x52, 0x11, 0x34, 0x36,
	0xf0, 0x7a, 0x84, 0x86, 0xe9, 0x87, 0xc5, 0x39, 0xbc, 0x45, 0xb0, 0xc8, 0xed, 0x10, 0x4f, 0x24,
	0xf7, 0xd8, 0x56, 0x06, 0x8d, 0xc0, 0x60, 0xc9, 0xeb, 0x60, 0x1f, 0x1f, 0x4e, 0xe5, 0xef, 0x08,
	0x16, 0xb8, 0xbb, 0xfa, 0xfa, 0x91, 0x55, 0x74, 0x76, 0x57, 0x5e, 0x0a, 0x16, 0x5f, 0x2a, 0x19,
	0x2c, 0xb8, 0xa3, 0xb6, 0x48, 0x9e, 0xd6, 0x79, 0x76, 0xfa, 0x1e, 0xc1, 0x92, 0x6b, 0xa7, 0xc1,
	0x49, 0xa7, 0x19, 0xc9, 0x53, 0xb0, 0x9c, 0x57, 0xc1, 0x37, 0x30, 0x5b, 0xa3, 0x4e, 0xe4, 0xd4,
	0x2e, 0x73, 0x90, 0xf4, 0xb8, 0x4f, 0x9e, 0x0a, 0x70, 0x82, 0x4b, 0x11, 0xf0, 0xa6, 0x1b, 0x13,
	0x47, 0xfe, 0x2d, 0x60, 0x2e, 0x74, 0x24, 0x83, 0xdc, 0x37, 0x1b, 0x32, 0xf0, 0xc0, 0x34, 0xc9,
	0xbb, 0xa2, 0x28, 0x0b, 0x4e, 0xe0, 0x2f, 0x08, 0xe6, 0xb8, 0x63, 0xa2, 0xc5, 0x4b, 0x2b, 0xcc,
	0xa8, 0xff, 0x54, 0x20, 0xd7, 0x14, 0x19, 0x32, 0x77, 0xc9, 0x06, 0xc9, 0xec, 0x90, 0x67, 0x91,
	0x37, 0x30, 0xef, 0x3a, 0x64, 0x10, 0x92, 0x69, 0xde, 0xf0, 0xe4, 0x29, 0xe7, 0x92, 0x27, 0x62,
	0x0c, 0xf7, 0xd2, 0x64, 0x08, 0x63, 0xb8, 0x13, 0xe5, 0xc6, 0xb0, 0x45, 0x4c, 0x9a, 0x31, 0xdc,
	0x0c, 0x43, 0x19, 0x23, 0x76, 0x41, 0x24, 0x37, 0x86, 0xc7, 0x22, 0xc1, 0x18, 0x5e, 0xf1, 0xd2,
	0x0a, 0x33, 0xea, 0x97, 0x1a, 0xc3, 0x43, 0x96, 0x18, 0x23, 0xdc, 0xa1, 0x14, 0x63, 0xe4, 0x22,
	0x39, 0x94, 0x31, 0xe2, 0xf2, 0xdc, 0x22, 0x28, 0xf4, 0xf6, 0x39, 0xb1, 0xdb, 0x2a, 0x99, 0x41,
	0xf2, 0xdc, 0x76, 0x91, 0x5d, 0x41, 0xe4, 0x09, 0x7e, 0xdc, 0xff, 0x19, 0x3c, 0x67, 0xb6, 0xd3,
	0xe1, 0xa1, 0x71, 0xa3, 0xfe, 0x88, 0x60, 0xd9, 0xdf, 0xea, 0xc4, 0x12, 0xca, 0x6d, 0xb3, 0x9d,
	0x83, 0x52, 0xe0, 0x9e, 0x1d, 0xc1, 0xed, 0x11, 0x26, 0xd9, 0xdc, 0x38, 0xad, 0x7f, 0x22, 0x28,
	0xfa, 0xbb, 0x9d, 0x78, 0x9f, 0xf2, 0x34, 0x23, 0x5f, 0xc7, 0x5e, 0x09, 0x56, 0x5f, 0x2b, 0x39,
	0x58, 0x71, 0x83, 0x6d, 0x93, 0xbc, 0xad, 0xf5, 0x7c, 0x76, 0x8b, 0x40, 0x09, 0x6d, 0x79, 0x86,
	0x2a, 0x24, 0xcd, 0x76, 0x9e, 0xda, 0xe5, 0x41, 0xd4, 0xfe, 0x25, 0x3c, 0xa8, 0x51, 0xe7, 0x84,
	0x75, 0x3c, 0x02, 0x29, 0xb9, 0x95, 0x62, 0x5c, 0x77, 0xd6, 0x39, 0xa1, 0x57, 0x54, 0xb7, 0xc9,
	0x5a, 0xe2, 0xe9, 0x55, 0x67, 0x1d, 0x17, 0x0a, 0xbf, 0x86, 0x29, 0xae, 0x5b, 0x00, 0x91, 0x9a,
	0x4a, 0x02, 0xe2, 0x1e, 0x91, 0x57, 0x48, 0x0a, 0xc8, 0x3e, 0x2a, 0xe3, 0x3f, 0x20, 0xf7, 0xe4,
	0x16, 0xbe, 0x78, 0xc4, 0x9b, 0xe9, 0x17, 0x8c, 0xe1, 0x6b, 0x4f, 0xe5, 0x51, 0x66, 0x5c, 0xfa,
	0x31, 0xce, 0x62, 0x3a, 0xbd, 0xf4, 0x62, 0xc3, 0xc7, 0xb8, 0x50, 0x0e, 0x2c, 0xb9, 0xe8, 0x54,
	0x24, 0x63, 0x29, 0xc7, 0xb8, 0x30, 0x62, 0xd2, 0x31, 0x2e, 0x3c, 0x9e, 0x78, 0x8c, 0xcb, 0x4b,
	0x6d, 0xb0, 0x63, 0x5c, 0x1f, 0x2c, 0xc7, 0xbc, 0x80, 0x45, 0xbe, 0x6a, 0x31, 0x9d, 0xda, 0x5f,
	0x30, 0xeb, 0xa0, 0xe5, 0x68, 0x57, 0xf4, 0x6b, 0x9b, 0x5a, 0xa9, 0x4e, 0x2b, 0x24, 0xf0, 0xe1,
	0x12, 0x78, 0x17, 0x93, 0x0a, 0x2e, 0x46, 0x40, 0x55, 0x91, 0x91, 0x43, 0xdb, 0xf8, 0x02, 0x26,
	0x7b, 0xf7, 0xe8, 0x7d, 0x17, 0x68, 0xb1, 0x3b, 0xfa, 0xbe, 0x0f, 0x4c, 0xe4, 0x02, 0xbe, 0x87,
	0x45, 0xa2, 0x77, 0x93, 0x56, 0xd7, 0x10, 0x6f, 0x13, 0xb7, 0x9b, 0x2d, 0x4e, 0xa7, 0x09, 0xf7,
	0xc9, 0xa9, 0x85, 0x3d, 0x8e, 0x21, 0xa6, 0xdd, 0x45, 0x93, 0xa2, 0x00, 0xc7, 0x78, 0x36, 0x02,
	0xae, 0xb5, 0xcd, 0xe7, 0xff, 0x42, 0x7f, 0x3a, 0x78, 0x85, 0x5f, 0x42, 0xf1, 0x65, 0x2f, 0x53,
	0x29, 0xb8, 0x7f, 0x2e, 0x1d, 0x9c, 0x1e, 0x91, 0x3d, 0xb8, 0xe7, 0x8f, 0xe1, 0xcd, 0x73, 0xc7,
	0x31, 0xed, 0xfd, 0x6a, 0xb5, 0xa3, 0x39, 0xe7, 0xdd, 0x66, 0xa5, 0xc5, 0x2e, 0xab, 0x86, 0x6e,
	0x5c, 0xab, 0x55, 0x9f, 0xc9, 0x8e, 0x6a, 0x6a, 0xbb, 0x13, 0xcf, 0x2a, 0xbb, 0x95, 0x67, 0xe5,
	0x71, 0x34, 0x76, 0x67, 0x1c, 0x0a, 0x06, 0xab, 0x18, 0xcd, 0x8a, 0x61, 0xa8, 0x51, 0xbe, 0xcf,
	0x67, 0x02, 0xa8, 0x53, 0x5e, 0xd9, 0x37, 0x9f, 0xc9, 0xd3, 0xee, 0x74, 0x58, 0x35, 0xf2, 0x7f,
	0x11, 0x3e, 0x8d, 0xfc, 0x6a, 0xde, 0x15, 0xfd, 0xd9, 0xfb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x69, 0xf6, 0xcf, 0xc6, 0xe0, 0x20, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	// Get a crawl entity by ID
	GetCrawlEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlEntity, error)
	// List a set of crawl entities
	ListCrawlEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlEntityListReply, error)
	// Save a crawl entity
	SaveEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*CrawlEntity, error)
	// Delete a crawl entity
	DeleteEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a seed by ID
	GetSeed(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Seed, error)
	// List a set of seeds
	ListSeeds(ctx context.Context, in *SeedListRequest, opts ...grpc.CallOption) (*SeedListReply, error)
	SaveSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error)
	DeleteSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a crawl job by ID
	GetCrawlJob(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlJob, error)
	// List a set of crawl jobs
	ListCrawlJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlJobListReply, error)
	SaveCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*CrawlJob, error)
	DeleteCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a crawl config by ID
	GetCrawlConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlConfig, error)
	// List a set of crawl configs
	ListCrawlConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlConfigListReply, error)
	SaveCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*CrawlConfig, error)
	DeleteCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a crawl schedule config by ID
	GetCrawlScheduleConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlScheduleConfig, error)
	// List a set of crawl schedule configs
	ListCrawlScheduleConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlScheduleConfigListReply, error)
	SaveCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*CrawlScheduleConfig, error)
	DeleteCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a politeness config by ID
	GetPolitenessConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PolitenessConfig, error)
	// List a set of politeness configs
	ListPolitenessConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PolitenessConfigListReply, error)
	SavePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*PolitenessConfig, error)
	DeletePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a browser config by ID
	GetBrowserConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserConfig, error)
	// List a set of browser configs
	ListBrowserConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserConfigListReply, error)
	SaveBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*BrowserConfig, error)
	DeleteBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a browser script by ID
	GetBrowserScript(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserScript, error)
	// List a set of browser scripts
	ListBrowserScripts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserScriptListReply, error)
	SaveBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*BrowserScript, error)
	DeleteBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a crawl host group config by ID
	GetCrawlHostGroupConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error)
	// List a set of crawl host group configs
	ListCrawlHostGroupConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfigListReply, error)
	SaveCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error)
	DeleteCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLogConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogLevels, error)
	SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error)
	ListRoleMappings(ctx context.Context, in *RoleMappingsListRequest, opts ...grpc.CallOption) (*RoleMappingsListReply, error)
	SaveRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*RoleMapping, error)
	DeleteRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*empty.Empty, error)
	GetRolesForActiveUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoleList, error)
	RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

// Deprecated: Do not use.
func (c *controllerClient) GetCrawlEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlEntity, error) {
	out := new(CrawlEntity)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListCrawlEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlEntityListReply, error) {
	out := new(CrawlEntityListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*CrawlEntity, error) {
	out := new(CrawlEntity)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetSeed(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Seed, error) {
	out := new(Seed)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListSeeds(ctx context.Context, in *SeedListRequest, opts ...grpc.CallOption) (*SeedListReply, error) {
	out := new(SeedListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListSeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error) {
	out := new(Seed)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetCrawlJob(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlJob, error) {
	out := new(CrawlJob)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListCrawlJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlJobListReply, error) {
	out := new(CrawlJobListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*CrawlJob, error) {
	out := new(CrawlJob)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetCrawlConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlConfig, error) {
	out := new(CrawlConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListCrawlConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlConfigListReply, error) {
	out := new(CrawlConfigListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*CrawlConfig, error) {
	out := new(CrawlConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetCrawlScheduleConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlScheduleConfig, error) {
	out := new(CrawlScheduleConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlScheduleConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListCrawlScheduleConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlScheduleConfigListReply, error) {
	out := new(CrawlScheduleConfigListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlScheduleConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*CrawlScheduleConfig, error) {
	out := new(CrawlScheduleConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlScheduleConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlScheduleConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetPolitenessConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PolitenessConfig, error) {
	out := new(PolitenessConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetPolitenessConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListPolitenessConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PolitenessConfigListReply, error) {
	out := new(PolitenessConfigListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListPolitenessConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SavePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*PolitenessConfig, error) {
	out := new(PolitenessConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SavePolitenessConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeletePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeletePolitenessConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetBrowserConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserConfig, error) {
	out := new(BrowserConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetBrowserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListBrowserConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserConfigListReply, error) {
	out := new(BrowserConfigListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListBrowserConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*BrowserConfig, error) {
	out := new(BrowserConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveBrowserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteBrowserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetBrowserScript(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserScript, error) {
	out := new(BrowserScript)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetBrowserScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListBrowserScripts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserScriptListReply, error) {
	out := new(BrowserScriptListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListBrowserScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*BrowserScript, error) {
	out := new(BrowserScript)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveBrowserScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteBrowserScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) GetCrawlHostGroupConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error) {
	out := new(CrawlHostGroupConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlHostGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListCrawlHostGroupConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfigListReply, error) {
	out := new(CrawlHostGroupConfigListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlHostGroupConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error) {
	out := new(CrawlHostGroupConfig)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlHostGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlHostGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetLogConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetLogConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveLogConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) ListRoleMappings(ctx context.Context, in *RoleMappingsListRequest, opts ...grpc.CallOption) (*RoleMappingsListReply, error) {
	out := new(RoleMappingsListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/ListRoleMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) SaveRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*RoleMapping, error) {
	out := new(RoleMapping)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/SaveRoleMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *controllerClient) DeleteRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/DeleteRoleMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetRolesForActiveUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetRolesForActiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error) {
	out := new(RunCrawlReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/RunCrawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetOpenIdConnectIssuer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error) {
	out := new(OpenIdConnectIssuerReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Controller/GetOpenIdConnectIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	// Get a crawl entity by ID
	GetCrawlEntity(context.Context, *GetRequest) (*CrawlEntity, error)
	// List a set of crawl entities
	ListCrawlEntities(context.Context, *ListRequest) (*CrawlEntityListReply, error)
	// Save a crawl entity
	SaveEntity(context.Context, *CrawlEntity) (*CrawlEntity, error)
	// Delete a crawl entity
	DeleteEntity(context.Context, *CrawlEntity) (*empty.Empty, error)
	// Get a seed by ID
	GetSeed(context.Context, *GetRequest) (*Seed, error)
	// List a set of seeds
	ListSeeds(context.Context, *SeedListRequest) (*SeedListReply, error)
	SaveSeed(context.Context, *Seed) (*Seed, error)
	DeleteSeed(context.Context, *Seed) (*empty.Empty, error)
	// Get a crawl job by ID
	GetCrawlJob(context.Context, *GetRequest) (*CrawlJob, error)
	// List a set of crawl jobs
	ListCrawlJobs(context.Context, *ListRequest) (*CrawlJobListReply, error)
	SaveCrawlJob(context.Context, *CrawlJob) (*CrawlJob, error)
	DeleteCrawlJob(context.Context, *CrawlJob) (*empty.Empty, error)
	// Get a crawl config by ID
	GetCrawlConfig(context.Context, *GetRequest) (*CrawlConfig, error)
	// List a set of crawl configs
	ListCrawlConfigs(context.Context, *ListRequest) (*CrawlConfigListReply, error)
	SaveCrawlConfig(context.Context, *CrawlConfig) (*CrawlConfig, error)
	DeleteCrawlConfig(context.Context, *CrawlConfig) (*empty.Empty, error)
	// Get a crawl schedule config by ID
	GetCrawlScheduleConfig(context.Context, *GetRequest) (*CrawlScheduleConfig, error)
	// List a set of crawl schedule configs
	ListCrawlScheduleConfigs(context.Context, *ListRequest) (*CrawlScheduleConfigListReply, error)
	SaveCrawlScheduleConfig(context.Context, *CrawlScheduleConfig) (*CrawlScheduleConfig, error)
	DeleteCrawlScheduleConfig(context.Context, *CrawlScheduleConfig) (*empty.Empty, error)
	// Get a politeness config by ID
	GetPolitenessConfig(context.Context, *GetRequest) (*PolitenessConfig, error)
	// List a set of politeness configs
	ListPolitenessConfigs(context.Context, *ListRequest) (*PolitenessConfigListReply, error)
	SavePolitenessConfig(context.Context, *PolitenessConfig) (*PolitenessConfig, error)
	DeletePolitenessConfig(context.Context, *PolitenessConfig) (*empty.Empty, error)
	// Get a browser config by ID
	GetBrowserConfig(context.Context, *GetRequest) (*BrowserConfig, error)
	// List a set of browser configs
	ListBrowserConfigs(context.Context, *ListRequest) (*BrowserConfigListReply, error)
	SaveBrowserConfig(context.Context, *BrowserConfig) (*BrowserConfig, error)
	DeleteBrowserConfig(context.Context, *BrowserConfig) (*empty.Empty, error)
	// Get a browser script by ID
	GetBrowserScript(context.Context, *GetRequest) (*BrowserScript, error)
	// List a set of browser scripts
	ListBrowserScripts(context.Context, *ListRequest) (*BrowserScriptListReply, error)
	SaveBrowserScript(context.Context, *BrowserScript) (*BrowserScript, error)
	DeleteBrowserScript(context.Context, *BrowserScript) (*empty.Empty, error)
	// Get a crawl host group config by ID
	GetCrawlHostGroupConfig(context.Context, *GetRequest) (*CrawlHostGroupConfig, error)
	// List a set of crawl host group configs
	ListCrawlHostGroupConfigs(context.Context, *ListRequest) (*CrawlHostGroupConfigListReply, error)
	SaveCrawlHostGroupConfig(context.Context, *CrawlHostGroupConfig) (*CrawlHostGroupConfig, error)
	DeleteCrawlHostGroupConfig(context.Context, *CrawlHostGroupConfig) (*empty.Empty, error)
	GetLogConfig(context.Context, *empty.Empty) (*LogLevels, error)
	SaveLogConfig(context.Context, *LogLevels) (*LogLevels, error)
	ListRoleMappings(context.Context, *RoleMappingsListRequest) (*RoleMappingsListReply, error)
	SaveRoleMapping(context.Context, *RoleMapping) (*RoleMapping, error)
	DeleteRoleMapping(context.Context, *RoleMapping) (*empty.Empty, error)
	GetRolesForActiveUser(context.Context, *empty.Empty) (*RoleList, error)
	RunCrawl(context.Context, *RunCrawlRequest) (*RunCrawlReply, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(context.Context, *empty.Empty) (*OpenIdConnectIssuerReply, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_GetCrawlEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlEntity(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlEntities(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveEntity(ctx, req.(*CrawlEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteEntity(ctx, req.(*CrawlEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetSeed(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListSeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListSeeds(ctx, req.(*SeedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlJob(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlJobs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlJob(ctx, req.(*CrawlJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlJob(ctx, req.(*CrawlJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlConfig(ctx, req.(*CrawlConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlConfig(ctx, req.(*CrawlConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlScheduleConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlScheduleConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlScheduleConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlScheduleConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlScheduleConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlScheduleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlScheduleConfig(ctx, req.(*CrawlScheduleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlScheduleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlScheduleConfig(ctx, req.(*CrawlScheduleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetPolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetPolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetPolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetPolitenessConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListPolitenessConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListPolitenessConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListPolitenessConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListPolitenessConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SavePolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolitenessConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SavePolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SavePolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SavePolitenessConfig(ctx, req.(*PolitenessConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeletePolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolitenessConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeletePolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeletePolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeletePolitenessConfig(ctx, req.(*PolitenessConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetBrowserConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListBrowserConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListBrowserConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListBrowserConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListBrowserConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveBrowserConfig(ctx, req.(*BrowserConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteBrowserConfig(ctx, req.(*BrowserConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetBrowserScript(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListBrowserScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListBrowserScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListBrowserScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListBrowserScripts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveBrowserScript(ctx, req.(*BrowserScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteBrowserScript(ctx, req.(*BrowserScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlHostGroupConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlHostGroupConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlHostGroupConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlHostGroupConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlHostGroupConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlHostGroupConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlHostGroupConfig(ctx, req.(*CrawlHostGroupConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlHostGroupConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlHostGroupConfig(ctx, req.(*CrawlHostGroupConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetLogConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveLogConfig(ctx, req.(*LogLevels))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListRoleMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMappingsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListRoleMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListRoleMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListRoleMappings(ctx, req.(*RoleMappingsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveRoleMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveRoleMapping(ctx, req.(*RoleMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteRoleMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteRoleMapping(ctx, req.(*RoleMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetRolesForActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetRolesForActiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RunCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RunCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/RunCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RunCrawl(ctx, req.(*RunCrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetOpenIdConnectIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetOpenIdConnectIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrawlEntity",
			Handler:    _Controller_GetCrawlEntity_Handler,
		},
		{
			MethodName: "ListCrawlEntities",
			Handler:    _Controller_ListCrawlEntities_Handler,
		},
		{
			MethodName: "SaveEntity",
			Handler:    _Controller_SaveEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Controller_DeleteEntity_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _Controller_GetSeed_Handler,
		},
		{
			MethodName: "ListSeeds",
			Handler:    _Controller_ListSeeds_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _Controller_SaveSeed_Handler,
		},
		{
			MethodName: "DeleteSeed",
			Handler:    _Controller_DeleteSeed_Handler,
		},
		{
			MethodName: "GetCrawlJob",
			Handler:    _Controller_GetCrawlJob_Handler,
		},
		{
			MethodName: "ListCrawlJobs",
			Handler:    _Controller_ListCrawlJobs_Handler,
		},
		{
			MethodName: "SaveCrawlJob",
			Handler:    _Controller_SaveCrawlJob_Handler,
		},
		{
			MethodName: "DeleteCrawlJob",
			Handler:    _Controller_DeleteCrawlJob_Handler,
		},
		{
			MethodName: "GetCrawlConfig",
			Handler:    _Controller_GetCrawlConfig_Handler,
		},
		{
			MethodName: "ListCrawlConfigs",
			Handler:    _Controller_ListCrawlConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlConfig",
			Handler:    _Controller_SaveCrawlConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlConfig",
			Handler:    _Controller_DeleteCrawlConfig_Handler,
		},
		{
			MethodName: "GetCrawlScheduleConfig",
			Handler:    _Controller_GetCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "ListCrawlScheduleConfigs",
			Handler:    _Controller_ListCrawlScheduleConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlScheduleConfig",
			Handler:    _Controller_SaveCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlScheduleConfig",
			Handler:    _Controller_DeleteCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "GetPolitenessConfig",
			Handler:    _Controller_GetPolitenessConfig_Handler,
		},
		{
			MethodName: "ListPolitenessConfigs",
			Handler:    _Controller_ListPolitenessConfigs_Handler,
		},
		{
			MethodName: "SavePolitenessConfig",
			Handler:    _Controller_SavePolitenessConfig_Handler,
		},
		{
			MethodName: "DeletePolitenessConfig",
			Handler:    _Controller_DeletePolitenessConfig_Handler,
		},
		{
			MethodName: "GetBrowserConfig",
			Handler:    _Controller_GetBrowserConfig_Handler,
		},
		{
			MethodName: "ListBrowserConfigs",
			Handler:    _Controller_ListBrowserConfigs_Handler,
		},
		{
			MethodName: "SaveBrowserConfig",
			Handler:    _Controller_SaveBrowserConfig_Handler,
		},
		{
			MethodName: "DeleteBrowserConfig",
			Handler:    _Controller_DeleteBrowserConfig_Handler,
		},
		{
			MethodName: "GetBrowserScript",
			Handler:    _Controller_GetBrowserScript_Handler,
		},
		{
			MethodName: "ListBrowserScripts",
			Handler:    _Controller_ListBrowserScripts_Handler,
		},
		{
			MethodName: "SaveBrowserScript",
			Handler:    _Controller_SaveBrowserScript_Handler,
		},
		{
			MethodName: "DeleteBrowserScript",
			Handler:    _Controller_DeleteBrowserScript_Handler,
		},
		{
			MethodName: "GetCrawlHostGroupConfig",
			Handler:    _Controller_GetCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "ListCrawlHostGroupConfigs",
			Handler:    _Controller_ListCrawlHostGroupConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlHostGroupConfig",
			Handler:    _Controller_SaveCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlHostGroupConfig",
			Handler:    _Controller_DeleteCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "GetLogConfig",
			Handler:    _Controller_GetLogConfig_Handler,
		},
		{
			MethodName: "SaveLogConfig",
			Handler:    _Controller_SaveLogConfig_Handler,
		},
		{
			MethodName: "ListRoleMappings",
			Handler:    _Controller_ListRoleMappings_Handler,
		},
		{
			MethodName: "SaveRoleMapping",
			Handler:    _Controller_SaveRoleMapping_Handler,
		},
		{
			MethodName: "DeleteRoleMapping",
			Handler:    _Controller_DeleteRoleMapping_Handler,
		},
		{
			MethodName: "GetRolesForActiveUser",
			Handler:    _Controller_GetRolesForActiveUser_Handler,
		},
		{
			MethodName: "RunCrawl",
			Handler:    _Controller_RunCrawl_Handler,
		},
		{
			MethodName: "GetOpenIdConnectIssuer",
			Handler:    _Controller_GetOpenIdConnectIssuer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veidemann_api/controller.proto",
}
