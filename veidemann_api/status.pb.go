// Code generated by protoc-gen-go. DO NOT EDIT.
// source: veidemann_api/status.proto

package veidemann_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunningExecutionsRequest struct {
	PageSize             int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32    `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunningExecutionsRequest) Reset()         { *m = RunningExecutionsRequest{} }
func (m *RunningExecutionsRequest) String() string { return proto.CompactTextString(m) }
func (*RunningExecutionsRequest) ProtoMessage()    {}
func (*RunningExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{0}
}

func (m *RunningExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunningExecutionsRequest.Unmarshal(m, b)
}
func (m *RunningExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunningExecutionsRequest.Marshal(b, m, deterministic)
}
func (m *RunningExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningExecutionsRequest.Merge(m, src)
}
func (m *RunningExecutionsRequest) XXX_Size() int {
	return xxx_messageInfo_RunningExecutionsRequest.Size(m)
}
func (m *RunningExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunningExecutionsRequest proto.InternalMessageInfo

func (m *RunningExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RunningExecutionsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type RunningExecutionsListReply struct {
	Value                []*StatusDetail `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32           `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32           `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RunningExecutionsListReply) Reset()         { *m = RunningExecutionsListReply{} }
func (m *RunningExecutionsListReply) String() string { return proto.CompactTextString(m) }
func (*RunningExecutionsListReply) ProtoMessage()    {}
func (*RunningExecutionsListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{1}
}

func (m *RunningExecutionsListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunningExecutionsListReply.Unmarshal(m, b)
}
func (m *RunningExecutionsListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunningExecutionsListReply.Marshal(b, m, deterministic)
}
func (m *RunningExecutionsListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningExecutionsListReply.Merge(m, src)
}
func (m *RunningExecutionsListReply) XXX_Size() int {
	return xxx_messageInfo_RunningExecutionsListReply.Size(m)
}
func (m *RunningExecutionsListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningExecutionsListReply.DiscardUnknown(m)
}

var xxx_messageInfo_RunningExecutionsListReply proto.InternalMessageInfo

func (m *RunningExecutionsListReply) GetValue() []*StatusDetail {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RunningExecutionsListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RunningExecutionsListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RunningExecutionsListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type StatusDetail struct {
	Id                   string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State                CrawlExecutionStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=veidemann.api.CrawlExecutionStatus_State" json:"state,omitempty"`
	JobId                string                     `protobuf:"bytes,3,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Seed                 string                     `protobuf:"bytes,4,opt,name=seed,proto3" json:"seed,omitempty"`
	StartTime            *timestamp.Timestamp       `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp       `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DocumentsCrawled     int64                      `protobuf:"varint,7,opt,name=documents_crawled,json=documentsCrawled,proto3" json:"documents_crawled,omitempty"`
	BytesCrawled         int64                      `protobuf:"varint,8,opt,name=bytes_crawled,json=bytesCrawled,proto3" json:"bytes_crawled,omitempty"`
	UrisCrawled          int64                      `protobuf:"varint,9,opt,name=uris_crawled,json=urisCrawled,proto3" json:"uris_crawled,omitempty"`
	DocumentsFailed      int64                      `protobuf:"varint,10,opt,name=documents_failed,json=documentsFailed,proto3" json:"documents_failed,omitempty"`
	DocumentsOutOfScope  int64                      `protobuf:"varint,11,opt,name=documents_out_of_scope,json=documentsOutOfScope,proto3" json:"documents_out_of_scope,omitempty"`
	DocumentsRetried     int64                      `protobuf:"varint,12,opt,name=documents_retried,json=documentsRetried,proto3" json:"documents_retried,omitempty"`
	DocumentsDenied      int64                      `protobuf:"varint,13,opt,name=documents_denied,json=documentsDenied,proto3" json:"documents_denied,omitempty"`
	QueueSize            int64                      `protobuf:"varint,14,opt,name=queue_size,json=queueSize,proto3" json:"queue_size,omitempty"`
	CurrentUri           string                     `protobuf:"bytes,20,opt,name=current_uri,json=currentUri,proto3" json:"current_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *StatusDetail) Reset()         { *m = StatusDetail{} }
func (m *StatusDetail) String() string { return proto.CompactTextString(m) }
func (*StatusDetail) ProtoMessage()    {}
func (*StatusDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{2}
}

func (m *StatusDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusDetail.Unmarshal(m, b)
}
func (m *StatusDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusDetail.Marshal(b, m, deterministic)
}
func (m *StatusDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusDetail.Merge(m, src)
}
func (m *StatusDetail) XXX_Size() int {
	return xxx_messageInfo_StatusDetail.Size(m)
}
func (m *StatusDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusDetail.DiscardUnknown(m)
}

var xxx_messageInfo_StatusDetail proto.InternalMessageInfo

func (m *StatusDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StatusDetail) GetState() CrawlExecutionStatus_State {
	if m != nil {
		return m.State
	}
	return CrawlExecutionStatus_UNDEFINED
}

func (m *StatusDetail) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *StatusDetail) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *StatusDetail) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StatusDetail) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *StatusDetail) GetDocumentsCrawled() int64 {
	if m != nil {
		return m.DocumentsCrawled
	}
	return 0
}

func (m *StatusDetail) GetBytesCrawled() int64 {
	if m != nil {
		return m.BytesCrawled
	}
	return 0
}

func (m *StatusDetail) GetUrisCrawled() int64 {
	if m != nil {
		return m.UrisCrawled
	}
	return 0
}

func (m *StatusDetail) GetDocumentsFailed() int64 {
	if m != nil {
		return m.DocumentsFailed
	}
	return 0
}

func (m *StatusDetail) GetDocumentsOutOfScope() int64 {
	if m != nil {
		return m.DocumentsOutOfScope
	}
	return 0
}

func (m *StatusDetail) GetDocumentsRetried() int64 {
	if m != nil {
		return m.DocumentsRetried
	}
	return 0
}

func (m *StatusDetail) GetDocumentsDenied() int64 {
	if m != nil {
		return m.DocumentsDenied
	}
	return 0
}

func (m *StatusDetail) GetQueueSize() int64 {
	if m != nil {
		return m.QueueSize
	}
	return 0
}

func (m *StatusDetail) GetCurrentUri() string {
	if m != nil {
		return m.CurrentUri
	}
	return ""
}

// Request for getting an execution by id
type ExecutionId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecutionId) Reset()         { *m = ExecutionId{} }
func (m *ExecutionId) String() string { return proto.CompactTextString(m) }
func (*ExecutionId) ProtoMessage()    {}
func (*ExecutionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{3}
}

func (m *ExecutionId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionId.Unmarshal(m, b)
}
func (m *ExecutionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionId.Marshal(b, m, deterministic)
}
func (m *ExecutionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionId.Merge(m, src)
}
func (m *ExecutionId) XXX_Size() int {
	return xxx_messageInfo_ExecutionId.Size(m)
}
func (m *ExecutionId) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionId.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionId proto.InternalMessageInfo

func (m *ExecutionId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specification of wich executions to get.
type ListExecutionsRequest struct {
	// Select executions by id
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	// Select executions by state
	State []string `protobuf:"bytes,2,rep,name=state,proto3" json:"state,omitempty"`
	// Select executions by seed
	SeedId string `protobuf:"bytes,3,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	// Select executions by crawl job
	JobId string `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Select executions by job execution
	JobExecutionId       string   `protobuf:"bytes,5,opt,name=job_execution_id,json=jobExecutionId,proto3" json:"job_execution_id,omitempty"`
	PageSize             int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32    `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListExecutionsRequest) Reset()         { *m = ListExecutionsRequest{} }
func (m *ListExecutionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListExecutionsRequest) ProtoMessage()    {}
func (*ListExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{4}
}

func (m *ListExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListExecutionsRequest.Unmarshal(m, b)
}
func (m *ListExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListExecutionsRequest.Marshal(b, m, deterministic)
}
func (m *ListExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExecutionsRequest.Merge(m, src)
}
func (m *ListExecutionsRequest) XXX_Size() int {
	return xxx_messageInfo_ListExecutionsRequest.Size(m)
}
func (m *ListExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListExecutionsRequest proto.InternalMessageInfo

func (m *ListExecutionsRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListExecutionsRequest) GetState() []string {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ListExecutionsRequest) GetSeedId() string {
	if m != nil {
		return m.SeedId
	}
	return ""
}

func (m *ListExecutionsRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ListExecutionsRequest) GetJobExecutionId() string {
	if m != nil {
		return m.JobExecutionId
	}
	return ""
}

func (m *ListExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListExecutionsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Specification of wich executions to get.
type ListJobExecutionsRequest struct {
	// Select job executions by id
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	// Select job executions by state
	State []string `protobuf:"bytes,2,rep,name=state,proto3" json:"state,omitempty"`
	// Select executions by crawl job
	JobId                string   `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	PageSize             int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32    `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobExecutionsRequest) Reset()         { *m = ListJobExecutionsRequest{} }
func (m *ListJobExecutionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobExecutionsRequest) ProtoMessage()    {}
func (*ListJobExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{5}
}

func (m *ListJobExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobExecutionsRequest.Unmarshal(m, b)
}
func (m *ListJobExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobExecutionsRequest.Marshal(b, m, deterministic)
}
func (m *ListJobExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobExecutionsRequest.Merge(m, src)
}
func (m *ListJobExecutionsRequest) XXX_Size() int {
	return xxx_messageInfo_ListJobExecutionsRequest.Size(m)
}
func (m *ListJobExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobExecutionsRequest proto.InternalMessageInfo

func (m *ListJobExecutionsRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListJobExecutionsRequest) GetState() []string {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ListJobExecutionsRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ListJobExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListJobExecutionsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of crawl executions
type ExecutionsListReply struct {
	Value                []*CrawlExecutionStatus `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32                   `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32                   `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ExecutionsListReply) Reset()         { *m = ExecutionsListReply{} }
func (m *ExecutionsListReply) String() string { return proto.CompactTextString(m) }
func (*ExecutionsListReply) ProtoMessage()    {}
func (*ExecutionsListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{6}
}

func (m *ExecutionsListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionsListReply.Unmarshal(m, b)
}
func (m *ExecutionsListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionsListReply.Marshal(b, m, deterministic)
}
func (m *ExecutionsListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionsListReply.Merge(m, src)
}
func (m *ExecutionsListReply) XXX_Size() int {
	return xxx_messageInfo_ExecutionsListReply.Size(m)
}
func (m *ExecutionsListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionsListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionsListReply proto.InternalMessageInfo

func (m *ExecutionsListReply) GetValue() []*CrawlExecutionStatus {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExecutionsListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ExecutionsListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ExecutionsListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of job executions
type JobExecutionsListReply struct {
	Value                []*JobExecutionStatus `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Count                int64                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageSize             int32                 `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page                 int32                 `protobuf:"varint,15,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *JobExecutionsListReply) Reset()         { *m = JobExecutionsListReply{} }
func (m *JobExecutionsListReply) String() string { return proto.CompactTextString(m) }
func (*JobExecutionsListReply) ProtoMessage()    {}
func (*JobExecutionsListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{7}
}

func (m *JobExecutionsListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobExecutionsListReply.Unmarshal(m, b)
}
func (m *JobExecutionsListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobExecutionsListReply.Marshal(b, m, deterministic)
}
func (m *JobExecutionsListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobExecutionsListReply.Merge(m, src)
}
func (m *JobExecutionsListReply) XXX_Size() int {
	return xxx_messageInfo_JobExecutionsListReply.Size(m)
}
func (m *JobExecutionsListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_JobExecutionsListReply.DiscardUnknown(m)
}

var xxx_messageInfo_JobExecutionsListReply proto.InternalMessageInfo

func (m *JobExecutionsListReply) GetValue() []*JobExecutionStatus {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *JobExecutionsListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *JobExecutionsListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *JobExecutionsListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AbortCrawlRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortCrawlRequest) Reset()         { *m = AbortCrawlRequest{} }
func (m *AbortCrawlRequest) String() string { return proto.CompactTextString(m) }
func (*AbortCrawlRequest) ProtoMessage()    {}
func (*AbortCrawlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5749a2c3d9b7191e, []int{8}
}

func (m *AbortCrawlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortCrawlRequest.Unmarshal(m, b)
}
func (m *AbortCrawlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortCrawlRequest.Marshal(b, m, deterministic)
}
func (m *AbortCrawlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortCrawlRequest.Merge(m, src)
}
func (m *AbortCrawlRequest) XXX_Size() int {
	return xxx_messageInfo_AbortCrawlRequest.Size(m)
}
func (m *AbortCrawlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortCrawlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortCrawlRequest proto.InternalMessageInfo

func (m *AbortCrawlRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*RunningExecutionsRequest)(nil), "veidemann.api.RunningExecutionsRequest")
	proto.RegisterType((*RunningExecutionsListReply)(nil), "veidemann.api.RunningExecutionsListReply")
	proto.RegisterType((*StatusDetail)(nil), "veidemann.api.StatusDetail")
	proto.RegisterType((*ExecutionId)(nil), "veidemann.api.ExecutionId")
	proto.RegisterType((*ListExecutionsRequest)(nil), "veidemann.api.ListExecutionsRequest")
	proto.RegisterType((*ListJobExecutionsRequest)(nil), "veidemann.api.ListJobExecutionsRequest")
	proto.RegisterType((*ExecutionsListReply)(nil), "veidemann.api.ExecutionsListReply")
	proto.RegisterType((*JobExecutionsListReply)(nil), "veidemann.api.JobExecutionsListReply")
	proto.RegisterType((*AbortCrawlRequest)(nil), "veidemann.api.AbortCrawlRequest")
}

func init() { proto.RegisterFile("veidemann_api/status.proto", fileDescriptor_5749a2c3d9b7191e) }

var fileDescriptor_5749a2c3d9b7191e = []byte{
	// 1008 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x51, 0x6f, 0x1b, 0x45,
	0x10, 0xd6, 0xc5, 0x76, 0x12, 0x8f, 0x13, 0xa7, 0xd9, 0xa6, 0xe9, 0xe9, 0x92, 0x10, 0xe7, 0x42,
	0xa8, 0x93, 0x92, 0xbb, 0xd4, 0x15, 0x42, 0x2d, 0x42, 0x28, 0x4d, 0x21, 0x04, 0x90, 0x1a, 0x5d,
	0x80, 0x07, 0x5e, 0xac, 0x3d, 0xdf, 0xe6, 0xba, 0x91, 0xbd, 0x7b, 0xbd, 0xdb, 0x6b, 0x48, 0x11,
	0x42, 0x42, 0x48, 0xf0, 0xc0, 0x13, 0x48, 0xc0, 0x2f, 0xe0, 0x37, 0xf0, 0x13, 0x78, 0xe7, 0x2f,
	0xf0, 0xc0, 0xcf, 0x40, 0xbb, 0x67, 0x9f, 0xef, 0xce, 0x75, 0xdc, 0x48, 0xe9, 0x93, 0x6f, 0x67,
	0xbf, 0x9d, 0xf9, 0x66, 0xe6, 0x9b, 0xf5, 0x82, 0xf1, 0x9c, 0x50, 0x8f, 0xf4, 0x30, 0x63, 0x6d,
	0x1c, 0x50, 0x3b, 0x12, 0x58, 0xc4, 0x91, 0x15, 0x84, 0x5c, 0x70, 0x34, 0x9f, 0xee, 0x59, 0x38,
	0xa0, 0xc6, 0x6a, 0x1e, 0xda, 0x23, 0x51, 0x84, 0x7d, 0xd2, 0x07, 0x1b, 0xeb, 0x3e, 0xe7, 0x7e,
	0x97, 0xd8, 0x6a, 0xe5, 0xc6, 0xa7, 0xb6, 0xa0, 0x3d, 0x12, 0x09, 0xdc, 0x0b, 0xfa, 0x80, 0xd5,
	0x3e, 0x40, 0x9e, 0xc5, 0x8c, 0x71, 0x81, 0x05, 0xe5, 0x6c, 0x70, 0xfc, 0x6d, 0xf5, 0xd3, 0xd9,
	0xf5, 0x09, 0xdb, 0x8d, 0xce, 0xb1, 0xef, 0x93, 0xd0, 0xe6, 0x81, 0x42, 0x8c, 0xa2, 0xcd, 0x4f,
	0x41, 0x77, 0x62, 0xc6, 0x28, 0xf3, 0x3f, 0xfc, 0x9a, 0x74, 0x62, 0xb5, 0xe5, 0x90, 0x67, 0x31,
	0x89, 0x04, 0x5a, 0x81, 0x6a, 0x80, 0x7d, 0xd2, 0x8e, 0xe8, 0x0b, 0xa2, 0xd7, 0x1b, 0x5a, 0xb3,
	0xe2, 0xcc, 0x4a, 0xc3, 0x09, 0x7d, 0x41, 0x10, 0x82, 0xb2, 0xfc, 0xd6, 0x17, 0x94, 0x5d, 0x7d,
	0x9b, 0xbf, 0x69, 0x60, 0x8c, 0x78, 0xfb, 0x8c, 0x46, 0xc2, 0x21, 0x41, 0xf7, 0x02, 0xdd, 0x83,
	0xca, 0x73, 0xdc, 0x8d, 0x89, 0xae, 0x35, 0x4a, 0xcd, 0x5a, 0x6b, 0xc5, 0xca, 0x55, 0xc5, 0x3a,
	0x51, 0x15, 0x7b, 0x4c, 0x04, 0xa6, 0x5d, 0x27, 0x41, 0xa2, 0x25, 0xa8, 0x74, 0x78, 0xcc, 0x84,
	0x3e, 0xd5, 0xd0, 0x9a, 0x25, 0x27, 0x59, 0x5c, 0x9d, 0xd8, 0x7f, 0x65, 0x98, 0xcb, 0xba, 0x47,
	0x75, 0x98, 0xa2, 0x9e, 0xae, 0x35, 0xb4, 0x66, 0xd5, 0x99, 0xa2, 0x1e, 0xfa, 0x00, 0x2a, 0xb2,
	0x61, 0x44, 0xc5, 0xa9, 0xb7, 0xb6, 0x0b, 0xd4, 0x0e, 0x42, 0x7c, 0xde, 0x4d, 0x53, 0x4a, 0x3c,
	0x29, 0xbe, 0xc4, 0x49, 0xce, 0x49, 0xa2, 0x67, 0xdc, 0x3d, 0xf2, 0xf4, 0x92, 0xf2, 0x99, 0x2c,
	0x24, 0x97, 0x88, 0x10, 0x4f, 0x2f, 0x2b, 0xa3, 0xfa, 0x46, 0x0f, 0x00, 0x22, 0x81, 0x43, 0xd1,
	0x96, 0x6d, 0xd5, 0x2b, 0x0d, 0xad, 0x59, 0x6b, 0x19, 0x56, 0xd2, 0x52, 0x6b, 0xd0, 0x73, 0xeb,
	0xf3, 0x41, 0xcf, 0x9d, 0xaa, 0x42, 0xcb, 0x35, 0x7a, 0x07, 0x66, 0x09, 0xf3, 0x92, 0x83, 0xd3,
	0x13, 0x0f, 0xce, 0x10, 0xe6, 0xa9, 0x63, 0x77, 0x61, 0xd1, 0xe3, 0x9d, 0xb8, 0x47, 0x98, 0x88,
	0xda, 0x1d, 0x99, 0x0a, 0xf1, 0xf4, 0x19, 0x55, 0xd0, 0x1b, 0xe9, 0xc6, 0x41, 0x62, 0x47, 0x9b,
	0x30, 0xef, 0x5e, 0x08, 0x32, 0x04, 0xce, 0x2a, 0xe0, 0x9c, 0x32, 0x0e, 0x40, 0x1b, 0x30, 0x17,
	0x87, 0x74, 0x88, 0xa9, 0x2a, 0x4c, 0x4d, 0xda, 0x06, 0x90, 0x6d, 0x18, 0xfa, 0x6e, 0x9f, 0x62,
	0x2a, 0x61, 0xa0, 0x60, 0x0b, 0xa9, 0xfd, 0x23, 0x65, 0x46, 0xf7, 0x61, 0x79, 0x08, 0xe5, 0xb1,
	0x68, 0xf3, 0xd3, 0x76, 0xd4, 0xe1, 0x01, 0xd1, 0x6b, 0xea, 0xc0, 0xcd, 0x74, 0xf7, 0x49, 0x2c,
	0x9e, 0x9c, 0x9e, 0xc8, 0xad, 0x7c, 0x52, 0x21, 0x11, 0x21, 0x25, 0x9e, 0x3e, 0x57, 0x48, 0xca,
	0x49, 0xec, 0x79, 0x32, 0x1e, 0x61, 0x12, 0x3b, 0x5f, 0x20, 0xf3, 0x58, 0x99, 0xd1, 0x1a, 0xc0,
	0xb3, 0x98, 0xc4, 0x19, 0x71, 0x95, 0x9c, 0xaa, 0xb2, 0x28, 0x75, 0xad, 0x43, 0xad, 0x13, 0x87,
	0x21, 0x61, 0xa2, 0x1d, 0x87, 0x54, 0x5f, 0x52, 0x8d, 0x85, 0xbe, 0xe9, 0x8b, 0x90, 0x9a, 0x6b,
	0x50, 0x4b, 0x85, 0x72, 0xe4, 0x15, 0x85, 0x66, 0xfe, 0xad, 0xc1, 0x2d, 0x39, 0x11, 0xa3, 0xd3,
	0x36, 0x40, 0x96, 0xfa, 0x92, 0x5c, 0x1a, 0x4a, 0x52, 0x9a, 0xfa, 0x3a, 0xbb, 0x0d, 0x33, 0x52,
	0x45, 0x6d, 0x3a, 0x50, 0xda, 0xb4, 0x5c, 0x1e, 0x79, 0xe8, 0x16, 0x4c, 0x9f, 0x71, 0x57, 0xda,
	0xcb, 0x59, 0x05, 0x36, 0xe1, 0x86, 0x34, 0x93, 0x41, 0x38, 0x09, 0xa8, 0x28, 0x40, 0xfd, 0x8c,
	0xbb, 0x59, 0xa6, 0x57, 0x1e, 0xaa, 0x9f, 0x34, 0xd0, 0x65, 0x2a, 0x9f, 0x64, 0xfc, 0x5c, 0x31,
	0x9b, 0x31, 0xa4, 0xaf, 0x4c, 0xe5, 0x77, 0x0d, 0x6e, 0xbe, 0xec, 0xc6, 0x79, 0x90, 0xbf, 0x71,
	0x36, 0x5f, 0x61, 0xac, 0xaf, 0xf9, 0xe6, 0xf9, 0x43, 0x83, 0xe5, 0x5c, 0x81, 0x86, 0xe4, 0xde,
	0xcd, 0x93, 0xdb, 0x28, 0x90, 0xcb, 0x9e, 0x7a, 0x2d, 0xd4, 0x36, 0x61, 0x71, 0xdf, 0xe5, 0xa1,
	0x50, 0x55, 0x28, 0xf6, 0xad, 0xaf, 0xd7, 0xd6, 0x9f, 0x33, 0x30, 0x9d, 0x44, 0x47, 0x3f, 0x6b,
	0xb0, 0x74, 0x48, 0xc4, 0xc8, 0x05, 0x8f, 0xee, 0x14, 0x98, 0x8f, 0xfb, 0x43, 0x31, 0xb6, 0x27,
	0x01, 0xd3, 0xe2, 0x98, 0x6f, 0x7c, 0xff, 0xcf, 0xbf, 0xbf, 0x4e, 0xe9, 0x68, 0xd9, 0x1e, 0xfe,
	0x99, 0xda, 0xa9, 0x8a, 0xa3, 0x3d, 0x0d, 0x5d, 0xc0, 0xdc, 0x21, 0x19, 0xce, 0x11, 0x32, 0x0a,
	0xce, 0x33, 0xda, 0x36, 0x5e, 0xa5, 0xf1, 0x66, 0x53, 0x85, 0x34, 0x51, 0x23, 0x1b, 0x52, 0x4e,
	0x57, 0x26, 0xae, 0xfd, 0x0d, 0xf5, 0xbe, 0x45, 0xdf, 0x41, 0x3d, 0x3f, 0xc3, 0xe8, 0xcd, 0x42,
	0x80, 0x97, 0x8e, 0xb8, 0x61, 0x8e, 0xa3, 0x98, 0x49, 0x7c, 0x53, 0xb1, 0x58, 0x43, 0x2b, 0x97,
	0xb0, 0x40, 0x3f, 0x68, 0x50, 0x57, 0xbd, 0xbb, 0xc6, 0xf4, 0xef, 0xa9, 0xc0, 0x77, 0xcd, 0xb7,
	0x26, 0xa5, 0x6f, 0x63, 0x19, 0xf9, 0xa1, 0xb6, 0x83, 0x2e, 0x60, 0xe1, 0x90, 0xe4, 0xe6, 0xff,
	0x52, 0x1a, 0x93, 0x15, 0x6e, 0xde, 0x51, 0x24, 0x36, 0xd0, 0x7a, 0x96, 0xc4, 0x19, 0x77, 0x47,
	0x5a, 0xf0, 0xa3, 0x06, 0x8b, 0x23, 0x97, 0xcf, 0x88, 0x12, 0xc7, 0x5d, 0x4f, 0xc6, 0xd6, 0x25,
	0x54, 0x32, 0xcd, 0x30, 0x15, 0x9d, 0x55, 0x64, 0x8c, 0xa7, 0x23, 0x7b, 0x91, 0xcc, 0xd1, 0x75,
	0xd6, 0x61, 0x4f, 0x05, 0xde, 0x31, 0xb7, 0x26, 0xd4, 0x21, 0xed, 0xc5, 0xa3, 0xbf, 0xb4, 0x5f,
	0xf6, 0x8f, 0xd1, 0xc7, 0xa0, 0x7f, 0x39, 0xf0, 0xdd, 0x38, 0xe0, 0x4c, 0x84, 0xbc, 0xdb, 0x25,
	0x61, 0x63, 0xff, 0xf8, 0xc8, 0xdc, 0x82, 0x6a, 0xba, 0x87, 0xf4, 0xa7, 0x42, 0x04, 0xd1, 0x43,
	0xdb, 0xf6, 0xa9, 0x78, 0x1a, 0xbb, 0x56, 0x87, 0xf7, 0x6c, 0xd6, 0x65, 0xe7, 0xb8, 0x55, 0xd9,
	0xb3, 0x5a, 0xd6, 0xde, 0x4e, 0x59, 0x9b, 0x2a, 0x95, 0xe1, 0x36, 0xe3, 0x16, 0x73, 0x2d, 0xc6,
	0x70, 0x9e, 0xf3, 0xa3, 0x5a, 0x42, 0xf4, 0x58, 0x3e, 0x3b, 0xbe, 0x7a, 0xbf, 0xe8, 0xc4, 0x4e,
	0xc1, 0xbb, 0x38, 0xa0, 0xbb, 0x3e, 0xb7, 0x73, 0x2f, 0xde, 0xf7, 0x72, 0x2b, 0x77, 0x5a, 0x3d,
	0x5e, 0xee, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x9e, 0xe1, 0x81, 0x42, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusClient interface {
	// Get status of running crawls
	GetRunningExecutions(ctx context.Context, in *RunningExecutionsRequest, opts ...grpc.CallOption) (Status_GetRunningExecutionsClient, error)
	// Get a crawl execution by ID
	GetExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*CrawlExecutionStatus, error)
	// List a set of crawl executions
	ListExecutions(ctx context.Context, in *ListExecutionsRequest, opts ...grpc.CallOption) (*ExecutionsListReply, error)
	// Abort a crawl execution
	AbortExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*CrawlExecutionStatus, error)
	// Get a job execution by ID
	GetJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*JobExecutionStatus, error)
	// List a set of job executions
	ListJobExecutions(ctx context.Context, in *ListJobExecutionsRequest, opts ...grpc.CallOption) (*JobExecutionsListReply, error)
	// Abort a job execution
	AbortJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*JobExecutionStatus, error)
}

type statusClient struct {
	cc *grpc.ClientConn
}

func NewStatusClient(cc *grpc.ClientConn) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) GetRunningExecutions(ctx context.Context, in *RunningExecutionsRequest, opts ...grpc.CallOption) (Status_GetRunningExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Status_serviceDesc.Streams[0], "/veidemann.api.Status/GetRunningExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusGetRunningExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Status_GetRunningExecutionsClient interface {
	Recv() (*RunningExecutionsListReply, error)
	grpc.ClientStream
}

type statusGetRunningExecutionsClient struct {
	grpc.ClientStream
}

func (x *statusGetRunningExecutionsClient) Recv() (*RunningExecutionsListReply, error) {
	m := new(RunningExecutionsListReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statusClient) GetExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*CrawlExecutionStatus, error) {
	out := new(CrawlExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.Status/GetExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ListExecutions(ctx context.Context, in *ListExecutionsRequest, opts ...grpc.CallOption) (*ExecutionsListReply, error) {
	out := new(ExecutionsListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Status/ListExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) AbortExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*CrawlExecutionStatus, error) {
	out := new(CrawlExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.Status/AbortExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) GetJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*JobExecutionStatus, error) {
	out := new(JobExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.Status/GetJobExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ListJobExecutions(ctx context.Context, in *ListJobExecutionsRequest, opts ...grpc.CallOption) (*JobExecutionsListReply, error) {
	out := new(JobExecutionsListReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Status/ListJobExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) AbortJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*JobExecutionStatus, error) {
	out := new(JobExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.Status/AbortJobExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
type StatusServer interface {
	// Get status of running crawls
	GetRunningExecutions(*RunningExecutionsRequest, Status_GetRunningExecutionsServer) error
	// Get a crawl execution by ID
	GetExecution(context.Context, *ExecutionId) (*CrawlExecutionStatus, error)
	// List a set of crawl executions
	ListExecutions(context.Context, *ListExecutionsRequest) (*ExecutionsListReply, error)
	// Abort a crawl execution
	AbortExecution(context.Context, *ExecutionId) (*CrawlExecutionStatus, error)
	// Get a job execution by ID
	GetJobExecution(context.Context, *ExecutionId) (*JobExecutionStatus, error)
	// List a set of job executions
	ListJobExecutions(context.Context, *ListJobExecutionsRequest) (*JobExecutionsListReply, error)
	// Abort a job execution
	AbortJobExecution(context.Context, *ExecutionId) (*JobExecutionStatus, error)
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_GetRunningExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunningExecutionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusServer).GetRunningExecutions(m, &statusGetRunningExecutionsServer{stream})
}

type Status_GetRunningExecutionsServer interface {
	Send(*RunningExecutionsListReply) error
	grpc.ServerStream
}

type statusGetRunningExecutionsServer struct {
	grpc.ServerStream
}

func (x *statusGetRunningExecutionsServer) Send(m *RunningExecutionsListReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Status_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Status/GetExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).GetExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ListExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ListExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Status/ListExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ListExecutions(ctx, req.(*ListExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_AbortExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).AbortExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Status/AbortExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).AbortExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_GetJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).GetJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Status/GetJobExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).GetJobExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ListJobExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ListJobExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Status/ListJobExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ListJobExecutions(ctx, req.(*ListJobExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_AbortJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).AbortJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Status/AbortJobExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).AbortJobExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExecution",
			Handler:    _Status_GetExecution_Handler,
		},
		{
			MethodName: "ListExecutions",
			Handler:    _Status_ListExecutions_Handler,
		},
		{
			MethodName: "AbortExecution",
			Handler:    _Status_AbortExecution_Handler,
		},
		{
			MethodName: "GetJobExecution",
			Handler:    _Status_GetJobExecution_Handler,
		},
		{
			MethodName: "ListJobExecutions",
			Handler:    _Status_ListJobExecutions_Handler,
		},
		{
			MethodName: "AbortJobExecution",
			Handler:    _Status_AbortJobExecution_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRunningExecutions",
			Handler:       _Status_GetRunningExecutions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "veidemann_api/status.proto",
}
