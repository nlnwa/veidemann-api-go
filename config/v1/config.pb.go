// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config/v1/config.proto

package config

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1 "github.com/nlnwa/veidemann-api-go/commons/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetLabelKeysRequest struct {
	Kind                 Kind     `protobuf:"varint,1,opt,name=kind,proto3,enum=veidemann.api.config.v1.Kind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLabelKeysRequest) Reset()         { *m = GetLabelKeysRequest{} }
func (m *GetLabelKeysRequest) String() string { return proto.CompactTextString(m) }
func (*GetLabelKeysRequest) ProtoMessage()    {}
func (*GetLabelKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a1d3fde711f0df, []int{0}
}

func (m *GetLabelKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLabelKeysRequest.Unmarshal(m, b)
}
func (m *GetLabelKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLabelKeysRequest.Marshal(b, m, deterministic)
}
func (m *GetLabelKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLabelKeysRequest.Merge(m, src)
}
func (m *GetLabelKeysRequest) XXX_Size() int {
	return xxx_messageInfo_GetLabelKeysRequest.Size(m)
}
func (m *GetLabelKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLabelKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLabelKeysRequest proto.InternalMessageInfo

func (m *GetLabelKeysRequest) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_undefined
}

// Specification of which entities to get.
type ListRequest struct {
	Kind Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=veidemann.api.config.v1.Kind" json:"kind,omitempty"`
	// Select objects by one or more id's
	Id []string `protobuf:"bytes,2,rep,name=id,proto3" json:"id,omitempty"`
	// Select objects by name
	// The name query is a case insensitive regular expresion search on name.
	// <pre>
	// Examples:
	//   "foo"       - matches all names containing the phrase foo
	//   "^foo$"     - matches the exact name foo
	//   "foo.*bar$" - matches names containing foo followed by zero or more tokens and ends with bar
	// </pre>
	NameRegex string `protobuf:"bytes,3,opt,name=name_regex,json=nameRegex,proto3" json:"name_regex,omitempty"`
	// Select objects by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	LabelSelector        []string      `protobuf:"bytes,4,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	QueryTemplate        *ConfigObject `protobuf:"bytes,5,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask            *v1.FieldMask `protobuf:"bytes,6,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask   *v1.FieldMask `protobuf:"bytes,7,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath          string        `protobuf:"bytes,8,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending      bool          `protobuf:"varint,9,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	PageSize             int32         `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset               int32         `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a1d3fde711f0df, []int{1}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_undefined
}

func (m *ListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListRequest) GetNameRegex() string {
	if m != nil {
		return m.NameRegex
	}
	return ""
}

func (m *ListRequest) GetLabelSelector() []string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *ListRequest) GetQueryTemplate() *ConfigObject {
	if m != nil {
		return m.QueryTemplate
	}
	return nil
}

func (m *ListRequest) GetQueryMask() *v1.FieldMask {
	if m != nil {
		return m.QueryMask
	}
	return nil
}

func (m *ListRequest) GetReturnedFieldsMask() *v1.FieldMask {
	if m != nil {
		return m.ReturnedFieldsMask
	}
	return nil
}

func (m *ListRequest) GetOrderByPath() string {
	if m != nil {
		return m.OrderByPath
	}
	return ""
}

func (m *ListRequest) GetOrderDescending() bool {
	if m != nil {
		return m.OrderDescending
	}
	return false
}

func (m *ListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type UpdateRequest struct {
	ListRequest          *ListRequest  `protobuf:"bytes,1,opt,name=list_request,json=listRequest,proto3" json:"list_request,omitempty"`
	UpdateMask           *v1.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	UpdateTemplate       *ConfigObject `protobuf:"bytes,4,opt,name=update_template,json=updateTemplate,proto3" json:"update_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a1d3fde711f0df, []int{2}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetListRequest() *ListRequest {
	if m != nil {
		return m.ListRequest
	}
	return nil
}

func (m *UpdateRequest) GetUpdateMask() *v1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateRequest) GetUpdateTemplate() *ConfigObject {
	if m != nil {
		return m.UpdateTemplate
	}
	return nil
}

type UpdateResponse struct {
	Updated              int64    `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a1d3fde711f0df, []int{3}
}

func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type ListCountResponse struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Approximate          bool     `protobuf:"varint,2,opt,name=approximate,proto3" json:"approximate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCountResponse) Reset()         { *m = ListCountResponse{} }
func (m *ListCountResponse) String() string { return proto.CompactTextString(m) }
func (*ListCountResponse) ProtoMessage()    {}
func (*ListCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a1d3fde711f0df, []int{4}
}

func (m *ListCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCountResponse.Unmarshal(m, b)
}
func (m *ListCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCountResponse.Marshal(b, m, deterministic)
}
func (m *ListCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountResponse.Merge(m, src)
}
func (m *ListCountResponse) XXX_Size() int {
	return xxx_messageInfo_ListCountResponse.Size(m)
}
func (m *ListCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountResponse proto.InternalMessageInfo

func (m *ListCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListCountResponse) GetApproximate() bool {
	if m != nil {
		return m.Approximate
	}
	return false
}

type DeleteResponse struct {
	Deleted              bool     `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a1d3fde711f0df, []int{5}
}

func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResponse.Unmarshal(m, b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteResponse.Size(m)
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type LabelKeysResponse struct {
	Key                  []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelKeysResponse) Reset()         { *m = LabelKeysResponse{} }
func (m *LabelKeysResponse) String() string { return proto.CompactTextString(m) }
func (*LabelKeysResponse) ProtoMessage()    {}
func (*LabelKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4a1d3fde711f0df, []int{6}
}

func (m *LabelKeysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelKeysResponse.Unmarshal(m, b)
}
func (m *LabelKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelKeysResponse.Marshal(b, m, deterministic)
}
func (m *LabelKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelKeysResponse.Merge(m, src)
}
func (m *LabelKeysResponse) XXX_Size() int {
	return xxx_messageInfo_LabelKeysResponse.Size(m)
}
func (m *LabelKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LabelKeysResponse proto.InternalMessageInfo

func (m *LabelKeysResponse) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*GetLabelKeysRequest)(nil), "veidemann.api.config.v1.GetLabelKeysRequest")
	proto.RegisterType((*ListRequest)(nil), "veidemann.api.config.v1.ListRequest")
	proto.RegisterType((*UpdateRequest)(nil), "veidemann.api.config.v1.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "veidemann.api.config.v1.UpdateResponse")
	proto.RegisterType((*ListCountResponse)(nil), "veidemann.api.config.v1.ListCountResponse")
	proto.RegisterType((*DeleteResponse)(nil), "veidemann.api.config.v1.DeleteResponse")
	proto.RegisterType((*LabelKeysResponse)(nil), "veidemann.api.config.v1.LabelKeysResponse")
}

func init() { proto.RegisterFile("config/v1/config.proto", fileDescriptor_a4a1d3fde711f0df) }

var fileDescriptor_a4a1d3fde711f0df = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdf, 0x73, 0xdb, 0x44,
	0x10, 0xb6, 0xe2, 0xfc, 0xf2, 0xba, 0x76, 0xd2, 0x6b, 0x27, 0x08, 0x77, 0x3a, 0x63, 0x04, 0x01,
	0xd3, 0xa1, 0x32, 0x31, 0x8f, 0xbc, 0xa5, 0x81, 0x30, 0x13, 0x03, 0x1d, 0x85, 0x3e, 0xc0, 0x03,
	0x9e, 0x93, 0xb4, 0x96, 0xaf, 0x91, 0xee, 0x54, 0xdd, 0xc9, 0xd4, 0x7d, 0xed, 0xff, 0xcb, 0xdf,
	0xc0, 0xe8, 0x4e, 0x72, 0x6c, 0xa8, 0x1a, 0x91, 0xb7, 0xdb, 0xef, 0xf6, 0xfb, 0xf6, 0x76, 0xef,
	0x93, 0xcf, 0x70, 0x12, 0x08, 0x3e, 0x67, 0xd1, 0x78, 0x79, 0x36, 0x36, 0x2b, 0x37, 0xcd, 0x84,
	0x12, 0xe4, 0x93, 0x25, 0xb2, 0x10, 0x13, 0xca, 0xb9, 0x4b, 0x53, 0xe6, 0x96, 0x7b, 0xcb, 0xb3,
	0xc1, 0xa7, 0xb7, 0x84, 0x0c, 0xa5, 0xc8, 0xb3, 0x00, 0xa5, 0xe1, 0x0c, 0x06, 0x81, 0x48, 0x12,
	0xc1, 0xe5, 0x87, 0xf6, 0x9e, 0x44, 0x42, 0x44, 0x31, 0x8e, 0x75, 0xe4, 0xe7, 0xf3, 0x31, 0x26,
	0xa9, 0x5a, 0x99, 0x4d, 0xe7, 0x27, 0x78, 0x74, 0x89, 0x6a, 0x4a, 0x7d, 0x8c, 0xaf, 0x70, 0x25,
	0x3d, 0x7c, 0x93, 0xa3, 0x54, 0xe4, 0x0c, 0x76, 0x6f, 0x18, 0x0f, 0x6d, 0x6b, 0x68, 0x8d, 0xfa,
	0x93, 0xa7, 0x6e, 0xcd, 0x91, 0xdc, 0x2b, 0xc6, 0x43, 0x4f, 0xa7, 0x3a, 0xef, 0x77, 0xa1, 0x3b,
	0x65, 0x52, 0xdd, 0x5f, 0x82, 0xf4, 0x61, 0x87, 0x85, 0xf6, 0xce, 0xb0, 0x3d, 0xea, 0x78, 0x3b,
	0x2c, 0x24, 0x4f, 0x01, 0x38, 0x4d, 0x70, 0x96, 0x61, 0x84, 0x6f, 0xed, 0xf6, 0xd0, 0x1a, 0x75,
	0xbc, 0x4e, 0x81, 0x78, 0x05, 0x40, 0x4e, 0xa1, 0x1f, 0x17, 0x07, 0x9f, 0x49, 0x8c, 0x31, 0x50,
	0x22, 0xb3, 0x77, 0x35, 0xb5, 0xa7, 0xd1, 0xeb, 0x12, 0x24, 0x53, 0xe8, 0xbf, 0xc9, 0x31, 0x5b,
	0xcd, 0x14, 0x26, 0x69, 0x4c, 0x15, 0xda, 0x7b, 0x43, 0x6b, 0xd4, 0x9d, 0x9c, 0xd6, 0x1e, 0xe9,
	0x85, 0x5e, 0xfd, 0xea, 0xbf, 0xc6, 0x40, 0x79, 0x3d, 0x4d, 0xfe, 0xad, 0xe4, 0x92, 0x73, 0x00,
	0xa3, 0x96, 0x50, 0x79, 0x63, 0xef, 0x6b, 0xa5, 0xcf, 0xff, 0xa3, 0xa4, 0x2f, 0xa3, 0x90, 0xfa,
	0x91, 0x61, 0x1c, 0xfe, 0x4c, 0xe5, 0x8d, 0xd7, 0xd1, 0xb4, 0x62, 0x49, 0x5e, 0xc1, 0xe3, 0x0c,
	0x55, 0x9e, 0x71, 0x0c, 0x67, 0xf3, 0x22, 0x41, 0x1a, 0xb5, 0x83, 0xe6, 0x6a, 0xa4, 0x12, 0xd0,
	0x90, 0xd4, 0xb2, 0x0e, 0xf4, 0x44, 0x16, 0x62, 0x36, 0xf3, 0x57, 0xb3, 0x94, 0xaa, 0x85, 0x7d,
	0xa8, 0x27, 0xd6, 0xd5, 0xe0, 0xf9, 0xea, 0x25, 0x55, 0x0b, 0xf2, 0x35, 0x1c, 0x9b, 0x9c, 0x10,
	0x65, 0x80, 0x3c, 0x64, 0x3c, 0xb2, 0x3b, 0x43, 0x6b, 0x74, 0xe8, 0x1d, 0x69, 0xfc, 0x62, 0x0d,
	0x93, 0x27, 0xd0, 0x49, 0x69, 0x84, 0x33, 0xc9, 0xde, 0xa1, 0xdd, 0x1f, 0x5a, 0xa3, 0x3d, 0xef,
	0xb0, 0x00, 0xae, 0xd9, 0x3b, 0x24, 0x27, 0xb0, 0x2f, 0xe6, 0x73, 0x89, 0xca, 0x3e, 0xd2, 0x3b,
	0x65, 0xe4, 0xfc, 0x6d, 0x41, 0xef, 0x55, 0x1a, 0x52, 0x85, 0x95, 0x0f, 0x2e, 0xe1, 0x41, 0xcc,
	0xa4, 0x9a, 0x65, 0x26, 0xd6, 0x7e, 0xe8, 0x4e, 0xbe, 0xa8, 0x1d, 0xfe, 0x86, 0x87, 0xbc, 0x6e,
	0xbc, 0x61, 0xa8, 0x0b, 0xe8, 0xe6, 0x5a, 0xd9, 0x0c, 0xab, 0xdd, 0x7c, 0x58, 0x60, 0x78, 0x7a,
	0x48, 0xbf, 0xc0, 0x51, 0xa9, 0xb2, 0xb6, 0xc3, 0xee, 0xff, 0xb1, 0x43, 0xdf, 0xb0, 0x2b, 0x3f,
	0x38, 0xcf, 0xa0, 0x5f, 0xf5, 0x2b, 0x53, 0xc1, 0x25, 0x12, 0x1b, 0x0e, 0x4c, 0x8e, 0xf1, 0x7e,
	0xdb, 0xab, 0x42, 0xe7, 0x0a, 0x1e, 0x16, 0xdd, 0xbd, 0x10, 0x39, 0x57, 0xeb, 0xf4, 0xc7, 0xb0,
	0x17, 0x14, 0x40, 0x99, 0x6c, 0x02, 0x32, 0x84, 0x2e, 0x4d, 0xd3, 0x4c, 0xbc, 0x65, 0x49, 0x71,
	0xc4, 0x1d, 0x7d, 0x45, 0x9b, 0x50, 0x51, 0xf8, 0x02, 0x63, 0xdc, 0x2e, 0x1c, 0x6a, 0xc4, 0x14,
	0x3e, 0xf4, 0xaa, 0xd0, 0x39, 0x85, 0x87, 0x1b, 0x9f, 0x78, 0x99, 0x7e, 0x0c, 0xed, 0x1b, 0x5c,
	0xd9, 0x96, 0xfe, 0x66, 0x8a, 0xe5, 0xe4, 0xfd, 0x01, 0xec, 0x9b, 0x66, 0xc9, 0x9f, 0x70, 0x74,
	0x89, 0x6a, 0xb3, 0x73, 0xe2, 0xdc, 0x31, 0x20, 0x0f, 0xe7, 0x83, 0x66, 0x43, 0x74, 0x5a, 0x24,
	0xac, 0x46, 0x71, 0x8b, 0x4a, 0xd2, 0xc8, 0x14, 0x8d, 0x6b, 0x7c, 0x6b, 0x91, 0x05, 0x10, 0x3d,
	0xec, 0xfb, 0x94, 0x79, 0xf6, 0xd1, 0xac, 0xad, 0x3b, 0x74, 0x5a, 0xc4, 0x87, 0xe3, 0x6b, 0xba,
	0xc4, 0xad, 0x81, 0x35, 0x3b, 0x68, 0xf3, 0x99, 0x2d, 0xe0, 0x91, 0xb1, 0xda, 0x76, 0x3b, 0x5f,
	0xd6, 0xf2, 0xb7, 0x3e, 0xc4, 0xc1, 0x57, 0x77, 0xe6, 0xad, 0xbb, 0x99, 0x03, 0x31, 0xde, 0xba,
	0x4f, 0x3f, 0xf5, 0x75, 0xb6, 0xfd, 0xea, 0xb4, 0xc8, 0x6b, 0x78, 0xb0, 0xf9, 0xfa, 0x90, 0x6f,
	0x6a, 0xa9, 0x1f, 0x78, 0xa4, 0x3e, 0x76, 0x43, 0xff, 0x36, 0xbb, 0xd3, 0x22, 0x53, 0x53, 0x4b,
	0x44, 0xa5, 0xc3, 0x4f, 0x5c, 0xf3, 0x2e, 0xba, 0xd5, 0xbb, 0xe8, 0xfe, 0x50, 0xbc, 0x8b, 0x83,
	0x7a, 0x9b, 0x4f, 0x45, 0x34, 0xc5, 0x25, 0xc6, 0xd2, 0x69, 0x91, 0xdf, 0xa1, 0x57, 0xdc, 0xf7,
	0xad, 0x5c, 0x03, 0x5a, 0x33, 0xe9, 0xf3, 0x05, 0x7c, 0xc6, 0x85, 0xcb, 0x7d, 0x97, 0x73, 0x5a,
	0x47, 0x38, 0xef, 0x99, 0xb2, 0xd7, 0x98, 0x2d, 0x59, 0x80, 0x2f, 0xad, 0x3f, 0x26, 0x11, 0x53,
	0x8b, 0xdc, 0x2f, 0x7e, 0x00, 0xc7, 0x3c, 0xe6, 0x7f, 0xd1, 0xf1, 0x9a, 0xfa, 0x9c, 0xa6, 0xec,
	0x79, 0x24, 0xc6, 0xeb, 0xbf, 0x0f, 0xdf, 0x9b, 0x95, 0xbf, 0xaf, 0x5b, 0xff, 0xee, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0x7f, 0x56, 0xec, 0x8a, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigClient interface {
	// Get a config object by ID
	GetConfigObject(ctx context.Context, in *ConfigRef, opts ...grpc.CallOption) (*ConfigObject, error)
	// List a set of config objects
	ListConfigObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Config_ListConfigObjectsClient, error)
	// Count config objects
	CountConfigObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// Save a config object
	SaveConfigObject(ctx context.Context, in *ConfigObject, opts ...grpc.CallOption) (*ConfigObject, error)
	// Update config objects
	UpdateConfigObjects(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete a config object
	DeleteConfigObject(ctx context.Context, in *ConfigObject, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetLabelKeys(ctx context.Context, in *GetLabelKeysRequest, opts ...grpc.CallOption) (*LabelKeysResponse, error)
	GetLogConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogLevels, error)
	SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error)
}

type configClient struct {
	cc *grpc.ClientConn
}

func NewConfigClient(cc *grpc.ClientConn) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) GetConfigObject(ctx context.Context, in *ConfigRef, opts ...grpc.CallOption) (*ConfigObject, error) {
	out := new(ConfigObject)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/GetConfigObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListConfigObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Config_ListConfigObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Config_serviceDesc.Streams[0], "/veidemann.api.config.v1.Config/ListConfigObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &configListConfigObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Config_ListConfigObjectsClient interface {
	Recv() (*ConfigObject, error)
	grpc.ClientStream
}

type configListConfigObjectsClient struct {
	grpc.ClientStream
}

func (x *configListConfigObjectsClient) Recv() (*ConfigObject, error) {
	m := new(ConfigObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configClient) CountConfigObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/CountConfigObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) SaveConfigObject(ctx context.Context, in *ConfigObject, opts ...grpc.CallOption) (*ConfigObject, error) {
	out := new(ConfigObject)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/SaveConfigObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateConfigObjects(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/UpdateConfigObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteConfigObject(ctx context.Context, in *ConfigObject, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/DeleteConfigObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetLabelKeys(ctx context.Context, in *GetLabelKeysRequest, opts ...grpc.CallOption) (*LabelKeysResponse, error) {
	out := new(LabelKeysResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/GetLabelKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetLogConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/GetLogConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := c.cc.Invoke(ctx, "/veidemann.api.config.v1.Config/SaveLogConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
type ConfigServer interface {
	// Get a config object by ID
	GetConfigObject(context.Context, *ConfigRef) (*ConfigObject, error)
	// List a set of config objects
	ListConfigObjects(*ListRequest, Config_ListConfigObjectsServer) error
	// Count config objects
	CountConfigObjects(context.Context, *ListRequest) (*ListCountResponse, error)
	// Save a config object
	SaveConfigObject(context.Context, *ConfigObject) (*ConfigObject, error)
	// Update config objects
	UpdateConfigObjects(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete a config object
	DeleteConfigObject(context.Context, *ConfigObject) (*DeleteResponse, error)
	GetLabelKeys(context.Context, *GetLabelKeysRequest) (*LabelKeysResponse, error)
	GetLogConfig(context.Context, *empty.Empty) (*LogLevels, error)
	SaveLogConfig(context.Context, *LogLevels) (*LogLevels, error)
}

// UnimplementedConfigServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (*UnimplementedConfigServer) GetConfigObject(ctx context.Context, req *ConfigRef) (*ConfigObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigObject not implemented")
}
func (*UnimplementedConfigServer) ListConfigObjects(req *ListRequest, srv Config_ListConfigObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListConfigObjects not implemented")
}
func (*UnimplementedConfigServer) CountConfigObjects(ctx context.Context, req *ListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountConfigObjects not implemented")
}
func (*UnimplementedConfigServer) SaveConfigObject(ctx context.Context, req *ConfigObject) (*ConfigObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfigObject not implemented")
}
func (*UnimplementedConfigServer) UpdateConfigObjects(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigObjects not implemented")
}
func (*UnimplementedConfigServer) DeleteConfigObject(ctx context.Context, req *ConfigObject) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigObject not implemented")
}
func (*UnimplementedConfigServer) GetLabelKeys(ctx context.Context, req *GetLabelKeysRequest) (*LabelKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelKeys not implemented")
}
func (*UnimplementedConfigServer) GetLogConfig(ctx context.Context, req *empty.Empty) (*LogLevels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogConfig not implemented")
}
func (*UnimplementedConfigServer) SaveLogConfig(ctx context.Context, req *LogLevels) (*LogLevels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLogConfig not implemented")
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_GetConfigObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetConfigObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/GetConfigObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetConfigObject(ctx, req.(*ConfigRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListConfigObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigServer).ListConfigObjects(m, &configListConfigObjectsServer{stream})
}

type Config_ListConfigObjectsServer interface {
	Send(*ConfigObject) error
	grpc.ServerStream
}

type configListConfigObjectsServer struct {
	grpc.ServerStream
}

func (x *configListConfigObjectsServer) Send(m *ConfigObject) error {
	return x.ServerStream.SendMsg(m)
}

func _Config_CountConfigObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CountConfigObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/CountConfigObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CountConfigObjects(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_SaveConfigObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).SaveConfigObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/SaveConfigObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).SaveConfigObject(ctx, req.(*ConfigObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateConfigObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateConfigObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/UpdateConfigObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateConfigObjects(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteConfigObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteConfigObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/DeleteConfigObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteConfigObject(ctx, req.(*ConfigObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetLabelKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetLabelKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/GetLabelKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetLabelKeys(ctx, req.(*GetLabelKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/GetLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetLogConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_SaveLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).SaveLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.config.v1.Config/SaveLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).SaveLogConfig(ctx, req.(*LogLevels))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.config.v1.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigObject",
			Handler:    _Config_GetConfigObject_Handler,
		},
		{
			MethodName: "CountConfigObjects",
			Handler:    _Config_CountConfigObjects_Handler,
		},
		{
			MethodName: "SaveConfigObject",
			Handler:    _Config_SaveConfigObject_Handler,
		},
		{
			MethodName: "UpdateConfigObjects",
			Handler:    _Config_UpdateConfigObjects_Handler,
		},
		{
			MethodName: "DeleteConfigObject",
			Handler:    _Config_DeleteConfigObject_Handler,
		},
		{
			MethodName: "GetLabelKeys",
			Handler:    _Config_GetLabelKeys_Handler,
		},
		{
			MethodName: "GetLogConfig",
			Handler:    _Config_GetLogConfig_Handler,
		},
		{
			MethodName: "SaveLogConfig",
			Handler:    _Config_SaveLogConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConfigObjects",
			Handler:       _Config_ListConfigObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config/v1/config.proto",
}
