// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.11.4
// source: config/v1/resources.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Kind int32

const (
	Kind_undefined            Kind = 0
	Kind_crawlEntity          Kind = 5
	Kind_seed                 Kind = 6
	Kind_crawlJob             Kind = 7
	Kind_crawlConfig          Kind = 8
	Kind_crawlScheduleConfig  Kind = 9
	Kind_browserConfig        Kind = 10
	Kind_politenessConfig     Kind = 11
	Kind_browserScript        Kind = 12
	Kind_crawlHostGroupConfig Kind = 13
	Kind_roleMapping          Kind = 14
	Kind_collection           Kind = 15
)

// Enum value maps for Kind.
var (
	Kind_name = map[int32]string{
		0:  "undefined",
		5:  "crawlEntity",
		6:  "seed",
		7:  "crawlJob",
		8:  "crawlConfig",
		9:  "crawlScheduleConfig",
		10: "browserConfig",
		11: "politenessConfig",
		12: "browserScript",
		13: "crawlHostGroupConfig",
		14: "roleMapping",
		15: "collection",
	}
	Kind_value = map[string]int32{
		"undefined":            0,
		"crawlEntity":          5,
		"seed":                 6,
		"crawlJob":             7,
		"crawlConfig":          8,
		"crawlScheduleConfig":  9,
		"browserConfig":        10,
		"politenessConfig":     11,
		"browserScript":        12,
		"crawlHostGroupConfig": 13,
		"roleMapping":          14,
		"collection":           15,
	}
)

func (x Kind) Enum() *Kind {
	p := new(Kind)
	*p = x
	return p
}

func (x Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_resources_proto_enumTypes[0].Descriptor()
}

func (Kind) Type() protoreflect.EnumType {
	return &file_config_v1_resources_proto_enumTypes[0]
}

func (x Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kind.Descriptor instead.
func (Kind) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{0}
}

type Role int32

const (
	// Any authenticated user
	Role_ANY_USER Role = 0
	// Any user including unauthenticated users
	Role_ANY Role = 1
	// Administrator
	Role_ADMIN Role = 2
	// Curator
	Role_CURATOR Role = 3
	// A user with permission to read internal data
	Role_READONLY Role = 4
	// A crawl operator
	Role_OPERATOR Role = 5
	// Machine to machine
	Role_SYSTEM Role = 6
	// A user with permission to maintain seeds and entities
	Role_CONSULTANT Role = 7
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ANY_USER",
		1: "ANY",
		2: "ADMIN",
		3: "CURATOR",
		4: "READONLY",
		5: "OPERATOR",
		6: "SYSTEM",
		7: "CONSULTANT",
	}
	Role_value = map[string]int32{
		"ANY_USER":   0,
		"ANY":        1,
		"ADMIN":      2,
		"CURATOR":    3,
		"READONLY":   4,
		"OPERATOR":   5,
		"SYSTEM":     6,
		"CONSULTANT": 7,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_resources_proto_enumTypes[1].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_config_v1_resources_proto_enumTypes[1]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{1}
}

type PolitenessConfig_RobotsPolicy int32

const (
	// Obey robots.txt on a page level. The requested URI is evaluated, but any embedded resources are
	// fetched without respecting robots.txt
	PolitenessConfig_OBEY_ROBOTS PolitenessConfig_RobotsPolicy = 0
	// Ignore robots.txt completely
	PolitenessConfig_IGNORE_ROBOTS PolitenessConfig_RobotsPolicy = 1
	// Use submitted robots.txt instead of the one served by the target site. Only the requested URI is
	// evaluated.
	PolitenessConfig_CUSTOM_ROBOTS PolitenessConfig_RobotsPolicy = 2
	// Obey robots.txt for all URI's
	PolitenessConfig_OBEY_ROBOTS_CLASSIC PolitenessConfig_RobotsPolicy = 3
	// Use submitted robots.txt instead of the one served by the target site. All URI's are
	// evaluated.
	PolitenessConfig_CUSTOM_ROBOTS_CLASSIC PolitenessConfig_RobotsPolicy = 4
	// Use submitted robots.txt if no one is served by the target site. Only the requested URI is
	// evaluated.
	PolitenessConfig_CUSTOM_IF_MISSING PolitenessConfig_RobotsPolicy = 5
	// Use submitted robots.txt if no one is served by the target site. All URI's are
	// evaluated.
	PolitenessConfig_CUSTOM_IF_MISSING_CLASSIC PolitenessConfig_RobotsPolicy = 6
)

// Enum value maps for PolitenessConfig_RobotsPolicy.
var (
	PolitenessConfig_RobotsPolicy_name = map[int32]string{
		0: "OBEY_ROBOTS",
		1: "IGNORE_ROBOTS",
		2: "CUSTOM_ROBOTS",
		3: "OBEY_ROBOTS_CLASSIC",
		4: "CUSTOM_ROBOTS_CLASSIC",
		5: "CUSTOM_IF_MISSING",
		6: "CUSTOM_IF_MISSING_CLASSIC",
	}
	PolitenessConfig_RobotsPolicy_value = map[string]int32{
		"OBEY_ROBOTS":               0,
		"IGNORE_ROBOTS":             1,
		"CUSTOM_ROBOTS":             2,
		"OBEY_ROBOTS_CLASSIC":       3,
		"CUSTOM_ROBOTS_CLASSIC":     4,
		"CUSTOM_IF_MISSING":         5,
		"CUSTOM_IF_MISSING_CLASSIC": 6,
	}
)

func (x PolitenessConfig_RobotsPolicy) Enum() *PolitenessConfig_RobotsPolicy {
	p := new(PolitenessConfig_RobotsPolicy)
	*p = x
	return p
}

func (x PolitenessConfig_RobotsPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolitenessConfig_RobotsPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_resources_proto_enumTypes[2].Descriptor()
}

func (PolitenessConfig_RobotsPolicy) Type() protoreflect.EnumType {
	return &file_config_v1_resources_proto_enumTypes[2]
}

func (x PolitenessConfig_RobotsPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolitenessConfig_RobotsPolicy.Descriptor instead.
func (PolitenessConfig_RobotsPolicy) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{13, 0}
}

type BrowserScript_BrowserScriptType int32

const (
	BrowserScript_UNDEFINED        BrowserScript_BrowserScriptType = 0
	BrowserScript_EXTRACT_OUTLINKS BrowserScript_BrowserScriptType = 1
	BrowserScript_REPLACEMENT      BrowserScript_BrowserScriptType = 2
	BrowserScript_ON_LOAD          BrowserScript_BrowserScriptType = 3
	BrowserScript_ON_NEW_DOCUMENT  BrowserScript_BrowserScriptType = 4
)

// Enum value maps for BrowserScript_BrowserScriptType.
var (
	BrowserScript_BrowserScriptType_name = map[int32]string{
		0: "UNDEFINED",
		1: "EXTRACT_OUTLINKS",
		2: "REPLACEMENT",
		3: "ON_LOAD",
		4: "ON_NEW_DOCUMENT",
	}
	BrowserScript_BrowserScriptType_value = map[string]int32{
		"UNDEFINED":        0,
		"EXTRACT_OUTLINKS": 1,
		"REPLACEMENT":      2,
		"ON_LOAD":          3,
		"ON_NEW_DOCUMENT":  4,
	}
)

func (x BrowserScript_BrowserScriptType) Enum() *BrowserScript_BrowserScriptType {
	p := new(BrowserScript_BrowserScriptType)
	*p = x
	return p
}

func (x BrowserScript_BrowserScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrowserScript_BrowserScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_resources_proto_enumTypes[3].Descriptor()
}

func (BrowserScript_BrowserScriptType) Type() protoreflect.EnumType {
	return &file_config_v1_resources_proto_enumTypes[3]
}

func (x BrowserScript_BrowserScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrowserScript_BrowserScriptType.Descriptor instead.
func (BrowserScript_BrowserScriptType) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{14, 0}
}

type Collection_RotationPolicy int32

const (
	Collection_NONE    Collection_RotationPolicy = 0
	Collection_HOURLY  Collection_RotationPolicy = 1
	Collection_DAILY   Collection_RotationPolicy = 2
	Collection_MONTHLY Collection_RotationPolicy = 3
	Collection_YEARLY  Collection_RotationPolicy = 4
)

// Enum value maps for Collection_RotationPolicy.
var (
	Collection_RotationPolicy_name = map[int32]string{
		0: "NONE",
		1: "HOURLY",
		2: "DAILY",
		3: "MONTHLY",
		4: "YEARLY",
	}
	Collection_RotationPolicy_value = map[string]int32{
		"NONE":    0,
		"HOURLY":  1,
		"DAILY":   2,
		"MONTHLY": 3,
		"YEARLY":  4,
	}
)

func (x Collection_RotationPolicy) Enum() *Collection_RotationPolicy {
	p := new(Collection_RotationPolicy)
	*p = x
	return p
}

func (x Collection_RotationPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Collection_RotationPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_resources_proto_enumTypes[4].Descriptor()
}

func (Collection_RotationPolicy) Type() protoreflect.EnumType {
	return &file_config_v1_resources_proto_enumTypes[4]
}

func (x Collection_RotationPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Collection_RotationPolicy.Descriptor instead.
func (Collection_RotationPolicy) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{18, 0}
}

type Collection_SubCollectionType int32

const (
	Collection_UNDEFINED  Collection_SubCollectionType = 0
	Collection_SCREENSHOT Collection_SubCollectionType = 1
	Collection_DNS        Collection_SubCollectionType = 2
)

// Enum value maps for Collection_SubCollectionType.
var (
	Collection_SubCollectionType_name = map[int32]string{
		0: "UNDEFINED",
		1: "SCREENSHOT",
		2: "DNS",
	}
	Collection_SubCollectionType_value = map[string]int32{
		"UNDEFINED":  0,
		"SCREENSHOT": 1,
		"DNS":        2,
	}
)

func (x Collection_SubCollectionType) Enum() *Collection_SubCollectionType {
	p := new(Collection_SubCollectionType)
	*p = x
	return p
}

func (x Collection_SubCollectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Collection_SubCollectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_resources_proto_enumTypes[5].Descriptor()
}

func (Collection_SubCollectionType) Type() protoreflect.EnumType {
	return &file_config_v1_resources_proto_enumTypes[5]
}

func (x Collection_SubCollectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Collection_SubCollectionType.Descriptor instead.
func (Collection_SubCollectionType) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{18, 1}
}

type LogLevels_Level int32

const (
	LogLevels_UNDEFINED LogLevels_Level = 0
	LogLevels_ALL       LogLevels_Level = 1
	LogLevels_TRACE     LogLevels_Level = 2
	LogLevels_DEBUG     LogLevels_Level = 3
	LogLevels_INFO      LogLevels_Level = 4
	LogLevels_WARN      LogLevels_Level = 5
	LogLevels_ERROR     LogLevels_Level = 6
	LogLevels_FATAL     LogLevels_Level = 7
	LogLevels_OFF       LogLevels_Level = 8
)

// Enum value maps for LogLevels_Level.
var (
	LogLevels_Level_name = map[int32]string{
		0: "UNDEFINED",
		1: "ALL",
		2: "TRACE",
		3: "DEBUG",
		4: "INFO",
		5: "WARN",
		6: "ERROR",
		7: "FATAL",
		8: "OFF",
	}
	LogLevels_Level_value = map[string]int32{
		"UNDEFINED": 0,
		"ALL":       1,
		"TRACE":     2,
		"DEBUG":     3,
		"INFO":      4,
		"WARN":      5,
		"ERROR":     6,
		"FATAL":     7,
		"OFF":       8,
	}
)

func (x LogLevels_Level) Enum() *LogLevels_Level {
	p := new(LogLevels_Level)
	*p = x
	return p
}

func (x LogLevels_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevels_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_resources_proto_enumTypes[6].Descriptor()
}

func (LogLevels_Level) Type() protoreflect.EnumType {
	return &file_config_v1_resources_proto_enumTypes[6]
}

func (x LogLevels_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevels_Level.Descriptor instead.
func (LogLevels_Level) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{19, 0}
}

type ConfigObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApiVersion string `protobuf:"bytes,2,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       Kind   `protobuf:"varint,3,opt,name=kind,proto3,enum=veidemann.api.config.v1.Kind" json:"kind,omitempty"`
	Meta       *Meta  `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are assignable to Spec:
	//	*ConfigObject_CrawlEntity
	//	*ConfigObject_Seed
	//	*ConfigObject_CrawlJob
	//	*ConfigObject_CrawlConfig
	//	*ConfigObject_CrawlScheduleConfig
	//	*ConfigObject_BrowserConfig
	//	*ConfigObject_PolitenessConfig
	//	*ConfigObject_BrowserScript
	//	*ConfigObject_CrawlHostGroupConfig
	//	*ConfigObject_RoleMapping
	//	*ConfigObject_Collection
	Spec isConfigObject_Spec `protobuf_oneof:"spec"`
}

func (x *ConfigObject) Reset() {
	*x = ConfigObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigObject) ProtoMessage() {}

func (x *ConfigObject) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigObject.ProtoReflect.Descriptor instead.
func (*ConfigObject) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigObject) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ConfigObject) GetKind() Kind {
	if x != nil {
		return x.Kind
	}
	return Kind_undefined
}

func (x *ConfigObject) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *ConfigObject) GetSpec() isConfigObject_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *ConfigObject) GetCrawlEntity() *CrawlEntity {
	if x, ok := x.GetSpec().(*ConfigObject_CrawlEntity); ok {
		return x.CrawlEntity
	}
	return nil
}

func (x *ConfigObject) GetSeed() *Seed {
	if x, ok := x.GetSpec().(*ConfigObject_Seed); ok {
		return x.Seed
	}
	return nil
}

func (x *ConfigObject) GetCrawlJob() *CrawlJob {
	if x, ok := x.GetSpec().(*ConfigObject_CrawlJob); ok {
		return x.CrawlJob
	}
	return nil
}

func (x *ConfigObject) GetCrawlConfig() *CrawlConfig {
	if x, ok := x.GetSpec().(*ConfigObject_CrawlConfig); ok {
		return x.CrawlConfig
	}
	return nil
}

func (x *ConfigObject) GetCrawlScheduleConfig() *CrawlScheduleConfig {
	if x, ok := x.GetSpec().(*ConfigObject_CrawlScheduleConfig); ok {
		return x.CrawlScheduleConfig
	}
	return nil
}

func (x *ConfigObject) GetBrowserConfig() *BrowserConfig {
	if x, ok := x.GetSpec().(*ConfigObject_BrowserConfig); ok {
		return x.BrowserConfig
	}
	return nil
}

func (x *ConfigObject) GetPolitenessConfig() *PolitenessConfig {
	if x, ok := x.GetSpec().(*ConfigObject_PolitenessConfig); ok {
		return x.PolitenessConfig
	}
	return nil
}

func (x *ConfigObject) GetBrowserScript() *BrowserScript {
	if x, ok := x.GetSpec().(*ConfigObject_BrowserScript); ok {
		return x.BrowserScript
	}
	return nil
}

func (x *ConfigObject) GetCrawlHostGroupConfig() *CrawlHostGroupConfig {
	if x, ok := x.GetSpec().(*ConfigObject_CrawlHostGroupConfig); ok {
		return x.CrawlHostGroupConfig
	}
	return nil
}

func (x *ConfigObject) GetRoleMapping() *RoleMapping {
	if x, ok := x.GetSpec().(*ConfigObject_RoleMapping); ok {
		return x.RoleMapping
	}
	return nil
}

func (x *ConfigObject) GetCollection() *Collection {
	if x, ok := x.GetSpec().(*ConfigObject_Collection); ok {
		return x.Collection
	}
	return nil
}

type isConfigObject_Spec interface {
	isConfigObject_Spec()
}

type ConfigObject_CrawlEntity struct {
	CrawlEntity *CrawlEntity `protobuf:"bytes,5,opt,name=crawl_entity,json=crawlEntity,proto3,oneof"`
}

type ConfigObject_Seed struct {
	Seed *Seed `protobuf:"bytes,6,opt,name=seed,proto3,oneof"`
}

type ConfigObject_CrawlJob struct {
	CrawlJob *CrawlJob `protobuf:"bytes,7,opt,name=crawl_job,json=crawlJob,proto3,oneof"`
}

type ConfigObject_CrawlConfig struct {
	CrawlConfig *CrawlConfig `protobuf:"bytes,8,opt,name=crawl_config,json=crawlConfig,proto3,oneof"`
}

type ConfigObject_CrawlScheduleConfig struct {
	CrawlScheduleConfig *CrawlScheduleConfig `protobuf:"bytes,9,opt,name=crawl_schedule_config,json=crawlScheduleConfig,proto3,oneof"`
}

type ConfigObject_BrowserConfig struct {
	BrowserConfig *BrowserConfig `protobuf:"bytes,10,opt,name=browser_config,json=browserConfig,proto3,oneof"`
}

type ConfigObject_PolitenessConfig struct {
	PolitenessConfig *PolitenessConfig `protobuf:"bytes,11,opt,name=politeness_config,json=politenessConfig,proto3,oneof"`
}

type ConfigObject_BrowserScript struct {
	BrowserScript *BrowserScript `protobuf:"bytes,12,opt,name=browser_script,json=browserScript,proto3,oneof"`
}

type ConfigObject_CrawlHostGroupConfig struct {
	CrawlHostGroupConfig *CrawlHostGroupConfig `protobuf:"bytes,13,opt,name=crawl_host_group_config,json=crawlHostGroupConfig,proto3,oneof"`
}

type ConfigObject_RoleMapping struct {
	RoleMapping *RoleMapping `protobuf:"bytes,14,opt,name=role_mapping,json=roleMapping,proto3,oneof"`
}

type ConfigObject_Collection struct {
	Collection *Collection `protobuf:"bytes,15,opt,name=collection,proto3,oneof"`
}

func (*ConfigObject_CrawlEntity) isConfigObject_Spec() {}

func (*ConfigObject_Seed) isConfigObject_Spec() {}

func (*ConfigObject_CrawlJob) isConfigObject_Spec() {}

func (*ConfigObject_CrawlConfig) isConfigObject_Spec() {}

func (*ConfigObject_CrawlScheduleConfig) isConfigObject_Spec() {}

func (*ConfigObject_BrowserConfig) isConfigObject_Spec() {}

func (*ConfigObject_PolitenessConfig) isConfigObject_Spec() {}

func (*ConfigObject_BrowserScript) isConfigObject_Spec() {}

func (*ConfigObject_CrawlHostGroupConfig) isConfigObject_Spec() {}

func (*ConfigObject_RoleMapping) isConfigObject_Spec() {}

func (*ConfigObject_Collection) isConfigObject_Spec() {}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Created        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy      string               `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastModified   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	LastModifiedBy string               `protobuf:"bytes,6,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	Label          []*Label             `protobuf:"bytes,7,rep,name=label,proto3" json:"label,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{1}
}

func (x *Meta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Meta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Meta) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Meta) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Meta) GetLastModified() *timestamp.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Meta) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *Meta) GetLabel() []*Label {
	if x != nil {
		return x.Label
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{2}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Reference to another ConfigObject
type ConfigRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind Kind   `protobuf:"varint,1,opt,name=kind,proto3,enum=veidemann.api.config.v1.Kind" json:"kind,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfigRef) Reset() {
	*x = ConfigRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRef) ProtoMessage() {}

func (x *ConfigRef) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRef.ProtoReflect.Descriptor instead.
func (*ConfigRef) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigRef) GetKind() Kind {
	if x != nil {
		return x.Kind
	}
	return Kind_undefined
}

func (x *ConfigRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A crawl entity (might be an organisation with one or more seeds)
type CrawlEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CrawlEntity) Reset() {
	*x = CrawlEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlEntity) ProtoMessage() {}

func (x *CrawlEntity) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlEntity.ProtoReflect.Descriptor instead.
func (*CrawlEntity) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{4}
}

type Seed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityRef *ConfigRef   `protobuf:"bytes,3,opt,name=entity_ref,json=entityRef,proto3" json:"entity_ref,omitempty"`
	Scope     *CrawlScope  `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	JobRef    []*ConfigRef `protobuf:"bytes,5,rep,name=job_ref,json=jobRef,proto3" json:"job_ref,omitempty"`
	Disabled  bool         `protobuf:"varint,18,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *Seed) Reset() {
	*x = Seed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seed) ProtoMessage() {}

func (x *Seed) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seed.ProtoReflect.Descriptor instead.
func (*Seed) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{5}
}

func (x *Seed) GetEntityRef() *ConfigRef {
	if x != nil {
		return x.EntityRef
	}
	return nil
}

func (x *Seed) GetScope() *CrawlScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Seed) GetJobRef() []*ConfigRef {
	if x != nil {
		return x.JobRef
	}
	return nil
}

func (x *Seed) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type CrawlJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleRef    *ConfigRef         `protobuf:"bytes,3,opt,name=schedule_ref,json=scheduleRef,proto3" json:"schedule_ref,omitempty"`
	Limits         *CrawlLimitsConfig `protobuf:"bytes,4,opt,name=limits,proto3" json:"limits,omitempty"`
	CrawlConfigRef *ConfigRef         `protobuf:"bytes,5,opt,name=crawl_config_ref,json=crawlConfigRef,proto3" json:"crawl_config_ref,omitempty"`
	Disabled       bool               `protobuf:"varint,18,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *CrawlJob) Reset() {
	*x = CrawlJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlJob) ProtoMessage() {}

func (x *CrawlJob) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlJob.ProtoReflect.Descriptor instead.
func (*CrawlJob) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{6}
}

func (x *CrawlJob) GetScheduleRef() *ConfigRef {
	if x != nil {
		return x.ScheduleRef
	}
	return nil
}

func (x *CrawlJob) GetLimits() *CrawlLimitsConfig {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *CrawlJob) GetCrawlConfigRef() *ConfigRef {
	if x != nil {
		return x.CrawlConfigRef
	}
	return nil
}

func (x *CrawlJob) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type CrawlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionRef    *ConfigRef   `protobuf:"bytes,6,opt,name=collection_ref,json=collectionRef,proto3" json:"collection_ref,omitempty"`
	BrowserConfigRef *ConfigRef   `protobuf:"bytes,7,opt,name=browser_config_ref,json=browserConfigRef,proto3" json:"browser_config_ref,omitempty"`
	PolitenessRef    *ConfigRef   `protobuf:"bytes,8,opt,name=politeness_ref,json=politenessRef,proto3" json:"politeness_ref,omitempty"`
	Extra            *ExtraConfig `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	MinimumDnsTtlS   int32        `protobuf:"varint,10,opt,name=minimum_dns_ttl_s,json=minimumDnsTtlS,proto3" json:"minimum_dns_ttl_s,omitempty"` // Not implemented
	// The weighting between jobs when two jobs compete on fetching resources from the same hosts.
	// The job will be randomly chosen, but weighted such that if two jobs with weight 1.0 and one job with
	// weight 2.0 compete, then the two first jobs will each have 25% probability of being chosen and the the third
	// job will have 50% probability of being chosen.
	PriorityWeight float64 `protobuf:"fixed64,11,opt,name=priority_weight,json=priorityWeight,proto3" json:"priority_weight,omitempty"`
}

func (x *CrawlConfig) Reset() {
	*x = CrawlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlConfig) ProtoMessage() {}

func (x *CrawlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlConfig.ProtoReflect.Descriptor instead.
func (*CrawlConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{7}
}

func (x *CrawlConfig) GetCollectionRef() *ConfigRef {
	if x != nil {
		return x.CollectionRef
	}
	return nil
}

func (x *CrawlConfig) GetBrowserConfigRef() *ConfigRef {
	if x != nil {
		return x.BrowserConfigRef
	}
	return nil
}

func (x *CrawlConfig) GetPolitenessRef() *ConfigRef {
	if x != nil {
		return x.PolitenessRef
	}
	return nil
}

func (x *CrawlConfig) GetExtra() *ExtraConfig {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *CrawlConfig) GetMinimumDnsTtlS() int32 {
	if x != nil {
		return x.MinimumDnsTtlS
	}
	return 0
}

func (x *CrawlConfig) GetPriorityWeight() float64 {
	if x != nil {
		return x.PriorityWeight
	}
	return 0
}

type ExtraConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtractText      bool `protobuf:"varint,5,opt,name=extract_text,json=extractText,proto3" json:"extract_text,omitempty"` // Not implemented
	CreateScreenshot bool `protobuf:"varint,6,opt,name=create_screenshot,json=createScreenshot,proto3" json:"create_screenshot,omitempty"`
}

func (x *ExtraConfig) Reset() {
	*x = ExtraConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraConfig) ProtoMessage() {}

func (x *ExtraConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraConfig.ProtoReflect.Descriptor instead.
func (*ExtraConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{8}
}

func (x *ExtraConfig) GetExtractText() bool {
	if x != nil {
		return x.ExtractText
	}
	return false
}

func (x *ExtraConfig) GetCreateScreenshot() bool {
	if x != nil {
		return x.CreateScreenshot
	}
	return false
}

type CrawlScheduleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronExpression string               `protobuf:"bytes,3,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	ValidFrom      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo        *timestamp.Timestamp `protobuf:"bytes,5,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
}

func (x *CrawlScheduleConfig) Reset() {
	*x = CrawlScheduleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlScheduleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlScheduleConfig) ProtoMessage() {}

func (x *CrawlScheduleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlScheduleConfig.ProtoReflect.Descriptor instead.
func (*CrawlScheduleConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{9}
}

func (x *CrawlScheduleConfig) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *CrawlScheduleConfig) GetValidFrom() *timestamp.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *CrawlScheduleConfig) GetValidTo() *timestamp.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

type CrawlScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurtPrefix string `protobuf:"bytes,1,opt,name=surt_prefix,json=surtPrefix,proto3" json:"surt_prefix,omitempty"`
}

func (x *CrawlScope) Reset() {
	*x = CrawlScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlScope) ProtoMessage() {}

func (x *CrawlScope) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlScope.ProtoReflect.Descriptor instead.
func (*CrawlScope) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{10}
}

func (x *CrawlScope) GetSurtPrefix() string {
	if x != nil {
		return x.SurtPrefix
	}
	return ""
}

type CrawlLimitsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How deep from a seed to crawl
	Depth int32 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	// Maximum time in seconds allowed for crawl to finish
	MaxDurationS int64 `protobuf:"varint,2,opt,name=max_duration_s,json=maxDurationS,proto3" json:"max_duration_s,omitempty"`
	// Maximum number of bytes to fetch before ending crawl
	MaxBytes int64 `protobuf:"varint,3,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
}

func (x *CrawlLimitsConfig) Reset() {
	*x = CrawlLimitsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlLimitsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlLimitsConfig) ProtoMessage() {}

func (x *CrawlLimitsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlLimitsConfig.ProtoReflect.Descriptor instead.
func (*CrawlLimitsConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{11}
}

func (x *CrawlLimitsConfig) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *CrawlLimitsConfig) GetMaxDurationS() int64 {
	if x != nil {
		return x.MaxDurationS
	}
	return 0
}

func (x *CrawlLimitsConfig) GetMaxBytes() int64 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

type BrowserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgent         string `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	WindowWidth       int32  `protobuf:"varint,4,opt,name=window_width,json=windowWidth,proto3" json:"window_width,omitempty"`
	WindowHeight      int32  `protobuf:"varint,5,opt,name=window_height,json=windowHeight,proto3" json:"window_height,omitempty"`
	PageLoadTimeoutMs int64  `protobuf:"varint,6,opt,name=page_load_timeout_ms,json=pageLoadTimeoutMs,proto3" json:"page_load_timeout_ms,omitempty"`
	// Select scripts by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	ScriptSelector   []string          `protobuf:"bytes,7,rep,name=script_selector,json=scriptSelector,proto3" json:"script_selector,omitempty"`
	ScriptRef        []*ConfigRef      `protobuf:"bytes,8,rep,name=script_ref,json=scriptRef,proto3" json:"script_ref,omitempty"`
	Headers          map[string]string `protobuf:"bytes,16,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScriptParameters map[string]string `protobuf:"bytes,17,rep,name=script_parameters,json=scriptParameters,proto3" json:"script_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Not implemented
	// Max time to wait for network activity
	MaxInactivityTimeMs int64 `protobuf:"varint,18,opt,name=max_inactivity_time_ms,json=maxInactivityTimeMs,proto3" json:"max_inactivity_time_ms,omitempty"`
}

func (x *BrowserConfig) Reset() {
	*x = BrowserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserConfig) ProtoMessage() {}

func (x *BrowserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserConfig.ProtoReflect.Descriptor instead.
func (*BrowserConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{12}
}

func (x *BrowserConfig) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *BrowserConfig) GetWindowWidth() int32 {
	if x != nil {
		return x.WindowWidth
	}
	return 0
}

func (x *BrowserConfig) GetWindowHeight() int32 {
	if x != nil {
		return x.WindowHeight
	}
	return 0
}

func (x *BrowserConfig) GetPageLoadTimeoutMs() int64 {
	if x != nil {
		return x.PageLoadTimeoutMs
	}
	return 0
}

func (x *BrowserConfig) GetScriptSelector() []string {
	if x != nil {
		return x.ScriptSelector
	}
	return nil
}

func (x *BrowserConfig) GetScriptRef() []*ConfigRef {
	if x != nil {
		return x.ScriptRef
	}
	return nil
}

func (x *BrowserConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *BrowserConfig) GetScriptParameters() map[string]string {
	if x != nil {
		return x.ScriptParameters
	}
	return nil
}

func (x *BrowserConfig) GetMaxInactivityTimeMs() int64 {
	if x != nil {
		return x.MaxInactivityTimeMs
	}
	return 0
}

type PolitenessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotsPolicy                   PolitenessConfig_RobotsPolicy `protobuf:"varint,3,opt,name=robots_policy,json=robotsPolicy,proto3,enum=veidemann.api.config.v1.PolitenessConfig_RobotsPolicy" json:"robots_policy,omitempty"`
	MinimumRobotsValidityDurationS int32                         `protobuf:"varint,11,opt,name=minimum_robots_validity_duration_s,json=minimumRobotsValidityDurationS,proto3" json:"minimum_robots_validity_duration_s,omitempty"`
	CustomRobots                   string                        `protobuf:"bytes,20,opt,name=custom_robots,json=customRobots,proto3" json:"custom_robots,omitempty"`
	MinTimeBetweenPageLoadMs       int64                         `protobuf:"varint,4,opt,name=min_time_between_page_load_ms,json=minTimeBetweenPageLoadMs,proto3" json:"min_time_between_page_load_ms,omitempty"`
	MaxTimeBetweenPageLoadMs       int64                         `protobuf:"varint,5,opt,name=max_time_between_page_load_ms,json=maxTimeBetweenPageLoadMs,proto3" json:"max_time_between_page_load_ms,omitempty"`
	//*
	// The fetch time of the URI is multiplied with this value to get the delay time before fetching the next URI.
	// If min_time_between_page_load_ms and/or max_time_between_page_load_ms are set, then those values are used as
	// the upper/lower limits for delay.
	// If delay_factor is unset or zero, then a delay_facor of one is assumed. If delay_factor is negative,
	// a delay_factor of zero is assumed.
	DelayFactor       float32 `protobuf:"fixed32,6,opt,name=delay_factor,json=delayFactor,proto3" json:"delay_factor,omitempty"`
	MaxRetries        int32   `protobuf:"varint,7,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"` // The maximum number of retries before giving up fetching a uri
	RetryDelaySeconds int32   `protobuf:"varint,8,opt,name=retry_delay_seconds,json=retryDelaySeconds,proto3" json:"retry_delay_seconds,omitempty"`
	// Select crawl host groups by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	CrawlHostGroupSelector []string `protobuf:"bytes,9,rep,name=crawl_host_group_selector,json=crawlHostGroupSelector,proto3" json:"crawl_host_group_selector,omitempty"`
	// If true, use hostname instead of ip for politeness
	UseHostname bool `protobuf:"varint,10,opt,name=use_hostname,json=useHostname,proto3" json:"use_hostname,omitempty"`
}

func (x *PolitenessConfig) Reset() {
	*x = PolitenessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolitenessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolitenessConfig) ProtoMessage() {}

func (x *PolitenessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolitenessConfig.ProtoReflect.Descriptor instead.
func (*PolitenessConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{13}
}

func (x *PolitenessConfig) GetRobotsPolicy() PolitenessConfig_RobotsPolicy {
	if x != nil {
		return x.RobotsPolicy
	}
	return PolitenessConfig_OBEY_ROBOTS
}

func (x *PolitenessConfig) GetMinimumRobotsValidityDurationS() int32 {
	if x != nil {
		return x.MinimumRobotsValidityDurationS
	}
	return 0
}

func (x *PolitenessConfig) GetCustomRobots() string {
	if x != nil {
		return x.CustomRobots
	}
	return ""
}

func (x *PolitenessConfig) GetMinTimeBetweenPageLoadMs() int64 {
	if x != nil {
		return x.MinTimeBetweenPageLoadMs
	}
	return 0
}

func (x *PolitenessConfig) GetMaxTimeBetweenPageLoadMs() int64 {
	if x != nil {
		return x.MaxTimeBetweenPageLoadMs
	}
	return 0
}

func (x *PolitenessConfig) GetDelayFactor() float32 {
	if x != nil {
		return x.DelayFactor
	}
	return 0
}

func (x *PolitenessConfig) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *PolitenessConfig) GetRetryDelaySeconds() int32 {
	if x != nil {
		return x.RetryDelaySeconds
	}
	return 0
}

func (x *PolitenessConfig) GetCrawlHostGroupSelector() []string {
	if x != nil {
		return x.CrawlHostGroupSelector
	}
	return nil
}

func (x *PolitenessConfig) GetUseHostname() bool {
	if x != nil {
		return x.UseHostname
	}
	return false
}

// Message containing a javascript to be run in a browser
type BrowserScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script            string                          `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	UrlRegexp         []string                        `protobuf:"bytes,4,rep,name=url_regexp,json=urlRegexp,proto3" json:"url_regexp,omitempty"`
	BrowserScriptType BrowserScript_BrowserScriptType `protobuf:"varint,5,opt,name=browser_script_type,json=browserScriptType,proto3,enum=veidemann.api.config.v1.BrowserScript_BrowserScriptType" json:"browser_script_type,omitempty"`
}

func (x *BrowserScript) Reset() {
	*x = BrowserScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserScript) ProtoMessage() {}

func (x *BrowserScript) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserScript.ProtoReflect.Descriptor instead.
func (*BrowserScript) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{14}
}

func (x *BrowserScript) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *BrowserScript) GetUrlRegexp() []string {
	if x != nil {
		return x.UrlRegexp
	}
	return nil
}

func (x *BrowserScript) GetBrowserScriptType() BrowserScript_BrowserScriptType {
	if x != nil {
		return x.BrowserScriptType
	}
	return BrowserScript_UNDEFINED
}

type CrawlHostGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRange []*CrawlHostGroupConfig_IpRange `protobuf:"bytes,3,rep,name=ip_range,json=ipRange,proto3" json:"ip_range,omitempty"`
}

func (x *CrawlHostGroupConfig) Reset() {
	*x = CrawlHostGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlHostGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlHostGroupConfig) ProtoMessage() {}

func (x *CrawlHostGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlHostGroupConfig.ProtoReflect.Descriptor instead.
func (*CrawlHostGroupConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{15}
}

func (x *CrawlHostGroupConfig) GetIpRange() []*CrawlHostGroupConfig_IpRange {
	if x != nil {
		return x.IpRange
	}
	return nil
}

type ApiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string               `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ValidUntil *timestamp.Timestamp `protobuf:"bytes,2,opt,name=validUntil,proto3" json:"validUntil,omitempty"`
}

func (x *ApiKey) Reset() {
	*x = ApiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKey) ProtoMessage() {}

func (x *ApiKey) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKey.ProtoReflect.Descriptor instead.
func (*ApiKey) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{16}
}

func (x *ApiKey) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ApiKey) GetValidUntil() *timestamp.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

type RoleMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EmailOrGroup:
	//	*RoleMapping_ApiKey
	//	*RoleMapping_Email
	//	*RoleMapping_Group
	EmailOrGroup isRoleMapping_EmailOrGroup `protobuf_oneof:"email_or_group"`
	Role         []Role                     `protobuf:"varint,4,rep,packed,name=role,proto3,enum=veidemann.api.config.v1.Role" json:"role,omitempty"`
}

func (x *RoleMapping) Reset() {
	*x = RoleMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMapping) ProtoMessage() {}

func (x *RoleMapping) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMapping.ProtoReflect.Descriptor instead.
func (*RoleMapping) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{17}
}

func (m *RoleMapping) GetEmailOrGroup() isRoleMapping_EmailOrGroup {
	if m != nil {
		return m.EmailOrGroup
	}
	return nil
}

func (x *RoleMapping) GetApiKey() *ApiKey {
	if x, ok := x.GetEmailOrGroup().(*RoleMapping_ApiKey); ok {
		return x.ApiKey
	}
	return nil
}

func (x *RoleMapping) GetEmail() string {
	if x, ok := x.GetEmailOrGroup().(*RoleMapping_Email); ok {
		return x.Email
	}
	return ""
}

func (x *RoleMapping) GetGroup() string {
	if x, ok := x.GetEmailOrGroup().(*RoleMapping_Group); ok {
		return x.Group
	}
	return ""
}

func (x *RoleMapping) GetRole() []Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type isRoleMapping_EmailOrGroup interface {
	isRoleMapping_EmailOrGroup()
}

type RoleMapping_ApiKey struct {
	ApiKey *ApiKey `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3,oneof"`
}

type RoleMapping_Email struct {
	Email string `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type RoleMapping_Group struct {
	Group string `protobuf:"bytes,3,opt,name=group,proto3,oneof"`
}

func (*RoleMapping_ApiKey) isRoleMapping_EmailOrGroup() {}

func (*RoleMapping_Email) isRoleMapping_EmailOrGroup() {}

func (*RoleMapping_Group) isRoleMapping_EmailOrGroup() {}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionDedupPolicy Collection_RotationPolicy   `protobuf:"varint,1,opt,name=collection_dedup_policy,json=collectionDedupPolicy,proto3,enum=veidemann.api.config.v1.Collection_RotationPolicy" json:"collection_dedup_policy,omitempty"`
	FileRotationPolicy    Collection_RotationPolicy   `protobuf:"varint,2,opt,name=file_rotation_policy,json=fileRotationPolicy,proto3,enum=veidemann.api.config.v1.Collection_RotationPolicy" json:"file_rotation_policy,omitempty"`
	Compress              bool                        `protobuf:"varint,3,opt,name=compress,proto3" json:"compress,omitempty"`
	FileSize              int64                       `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	SubCollections        []*Collection_SubCollection `protobuf:"bytes,10,rep,name=sub_collections,json=subCollections,proto3" json:"sub_collections,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{18}
}

func (x *Collection) GetCollectionDedupPolicy() Collection_RotationPolicy {
	if x != nil {
		return x.CollectionDedupPolicy
	}
	return Collection_NONE
}

func (x *Collection) GetFileRotationPolicy() Collection_RotationPolicy {
	if x != nil {
		return x.FileRotationPolicy
	}
	return Collection_NONE
}

func (x *Collection) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Collection) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Collection) GetSubCollections() []*Collection_SubCollection {
	if x != nil {
		return x.SubCollections
	}
	return nil
}

type LogLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel []*LogLevels_LogLevel `protobuf:"bytes,1,rep,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
}

func (x *LogLevels) Reset() {
	*x = LogLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLevels) ProtoMessage() {}

func (x *LogLevels) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLevels.ProtoReflect.Descriptor instead.
func (*LogLevels) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{19}
}

func (x *LogLevels) GetLogLevel() []*LogLevels_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return nil
}

type CrawlHostGroupConfig_IpRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpFrom string `protobuf:"bytes,1,opt,name=ip_from,json=ipFrom,proto3" json:"ip_from,omitempty"`
	IpTo   string `protobuf:"bytes,2,opt,name=ip_to,json=ipTo,proto3" json:"ip_to,omitempty"`
}

func (x *CrawlHostGroupConfig_IpRange) Reset() {
	*x = CrawlHostGroupConfig_IpRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlHostGroupConfig_IpRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlHostGroupConfig_IpRange) ProtoMessage() {}

func (x *CrawlHostGroupConfig_IpRange) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlHostGroupConfig_IpRange.ProtoReflect.Descriptor instead.
func (*CrawlHostGroupConfig_IpRange) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CrawlHostGroupConfig_IpRange) GetIpFrom() string {
	if x != nil {
		return x.IpFrom
	}
	return ""
}

func (x *CrawlHostGroupConfig_IpRange) GetIpTo() string {
	if x != nil {
		return x.IpTo
	}
	return ""
}

type Collection_SubCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Collection_SubCollectionType `protobuf:"varint,1,opt,name=type,proto3,enum=veidemann.api.config.v1.Collection_SubCollectionType" json:"type,omitempty"`
	Name string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Collection_SubCollection) Reset() {
	*x = Collection_SubCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_SubCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_SubCollection) ProtoMessage() {}

func (x *Collection_SubCollection) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_SubCollection.ProtoReflect.Descriptor instead.
func (*Collection_SubCollection) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Collection_SubCollection) GetType() Collection_SubCollectionType {
	if x != nil {
		return x.Type
	}
	return Collection_UNDEFINED
}

func (x *Collection_SubCollection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LogLevels_LogLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logger string          `protobuf:"bytes,1,opt,name=logger,proto3" json:"logger,omitempty"`
	Level  LogLevels_Level `protobuf:"varint,2,opt,name=level,proto3,enum=veidemann.api.config.v1.LogLevels_Level" json:"level,omitempty"`
}

func (x *LogLevels_LogLevel) Reset() {
	*x = LogLevels_LogLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v1_resources_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLevels_LogLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLevels_LogLevel) ProtoMessage() {}

func (x *LogLevels_LogLevel) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_resources_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLevels_LogLevel.ProtoReflect.Descriptor instead.
func (*LogLevels_LogLevel) Descriptor() ([]byte, []int) {
	return file_config_v1_resources_proto_rawDescGZIP(), []int{19, 0}
}

func (x *LogLevels_LogLevel) GetLogger() string {
	if x != nil {
		return x.Logger
	}
	return ""
}

func (x *LogLevels_LogLevel) GetLevel() LogLevels_Level {
	if x != nil {
		return x.Level
	}
	return LogLevels_UNDEFINED
}

var File_config_v1_resources_proto protoreflect.FileDescriptor

var file_config_v1_resources_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x08, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0c,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x4a,
	0x6f, 0x62, 0x48, 0x00, 0x52, 0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x49,
	0x0a, 0x0c, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x15, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a,
	0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x0d, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58,
	0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x49, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xb2, 0x02, 0x0a, 0x04,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x2f, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x4e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x12, 0x31,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0xdd, 0x01, 0x0a, 0x04, 0x53, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x66, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x12, 0x39, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65,
	0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6a, 0x6f,
	0x62, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xff, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x45, 0x0a,
	0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x85, 0x03, 0x0a, 0x0b, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x50, 0x0a,
	0x12, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x10, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x12,
	0x49, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x70, 0x6f, 0x6c,
	0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x6e, 0x73, 0x54, 0x74, 0x6c,
	0x53, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5d, 0x0a, 0x0b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x22, 0x2d, 0x0a, 0x0a,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x72, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x6c, 0x0a, 0x11, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x83, 0x05, 0x0a, 0x0d, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x66, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x4d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x69,
	0x0a, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe6, 0x05, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x76, 0x65,
	0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x73, 0x12, 0x3f, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x4d, 0x73, 0x12, 0x3f, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x45, 0x59, 0x5f,
	0x52, 0x4f, 0x42, 0x4f, 0x54, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x53, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x4f, 0x42, 0x45, 0x59, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x53, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x43, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x49, 0x46, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x49, 0x46, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x10, 0x06, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x12, 0x68, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x11, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x4c, 0x49,
	0x4e, 0x4b, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x50, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x69, 0x70, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0x37, 0x0a, 0x07, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x70, 0x5f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x54, 0x6f, 0x22, 0x5a, 0x0a, 0x06,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xec, 0x04, 0x0a, 0x0a, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x64, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x6e, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4a, 0x0a, 0x0e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x04, 0x22, 0x3b, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10, 0x02, 0x22, 0xa3, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x1a, 0x62, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x68, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41,
	0x54, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x08, 0x2a, 0xdf,
	0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x4a, 0x6f, 0x62, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10,
	0x70, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x0d, 0x12,
	0x0f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x0e,
	0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f,
	0x2a, 0x6d, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x59, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x41, 0x44, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4c, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x07, 0x42,
	0x6a, 0x0a, 0x21, 0x6e, 0x6f, 0x2e, 0x6e, 0x62, 0x2e, 0x6e, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6c, 0x6e, 0x77, 0x61, 0x2f, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_config_v1_resources_proto_rawDescOnce sync.Once
	file_config_v1_resources_proto_rawDescData = file_config_v1_resources_proto_rawDesc
)

func file_config_v1_resources_proto_rawDescGZIP() []byte {
	file_config_v1_resources_proto_rawDescOnce.Do(func() {
		file_config_v1_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_v1_resources_proto_rawDescData)
	})
	return file_config_v1_resources_proto_rawDescData
}

var file_config_v1_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_config_v1_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_config_v1_resources_proto_goTypes = []interface{}{
	(Kind)(0),                            // 0: veidemann.api.config.v1.Kind
	(Role)(0),                            // 1: veidemann.api.config.v1.Role
	(PolitenessConfig_RobotsPolicy)(0),   // 2: veidemann.api.config.v1.PolitenessConfig.RobotsPolicy
	(BrowserScript_BrowserScriptType)(0), // 3: veidemann.api.config.v1.BrowserScript.BrowserScriptType
	(Collection_RotationPolicy)(0),       // 4: veidemann.api.config.v1.Collection.RotationPolicy
	(Collection_SubCollectionType)(0),    // 5: veidemann.api.config.v1.Collection.SubCollectionType
	(LogLevels_Level)(0),                 // 6: veidemann.api.config.v1.LogLevels.Level
	(*ConfigObject)(nil),                 // 7: veidemann.api.config.v1.ConfigObject
	(*Meta)(nil),                         // 8: veidemann.api.config.v1.Meta
	(*Label)(nil),                        // 9: veidemann.api.config.v1.Label
	(*ConfigRef)(nil),                    // 10: veidemann.api.config.v1.ConfigRef
	(*CrawlEntity)(nil),                  // 11: veidemann.api.config.v1.CrawlEntity
	(*Seed)(nil),                         // 12: veidemann.api.config.v1.Seed
	(*CrawlJob)(nil),                     // 13: veidemann.api.config.v1.CrawlJob
	(*CrawlConfig)(nil),                  // 14: veidemann.api.config.v1.CrawlConfig
	(*ExtraConfig)(nil),                  // 15: veidemann.api.config.v1.ExtraConfig
	(*CrawlScheduleConfig)(nil),          // 16: veidemann.api.config.v1.CrawlScheduleConfig
	(*CrawlScope)(nil),                   // 17: veidemann.api.config.v1.CrawlScope
	(*CrawlLimitsConfig)(nil),            // 18: veidemann.api.config.v1.CrawlLimitsConfig
	(*BrowserConfig)(nil),                // 19: veidemann.api.config.v1.BrowserConfig
	(*PolitenessConfig)(nil),             // 20: veidemann.api.config.v1.PolitenessConfig
	(*BrowserScript)(nil),                // 21: veidemann.api.config.v1.BrowserScript
	(*CrawlHostGroupConfig)(nil),         // 22: veidemann.api.config.v1.CrawlHostGroupConfig
	(*ApiKey)(nil),                       // 23: veidemann.api.config.v1.ApiKey
	(*RoleMapping)(nil),                  // 24: veidemann.api.config.v1.RoleMapping
	(*Collection)(nil),                   // 25: veidemann.api.config.v1.Collection
	(*LogLevels)(nil),                    // 26: veidemann.api.config.v1.LogLevels
	nil,                                  // 27: veidemann.api.config.v1.BrowserConfig.HeadersEntry
	nil,                                  // 28: veidemann.api.config.v1.BrowserConfig.ScriptParametersEntry
	(*CrawlHostGroupConfig_IpRange)(nil), // 29: veidemann.api.config.v1.CrawlHostGroupConfig.IpRange
	(*Collection_SubCollection)(nil),     // 30: veidemann.api.config.v1.Collection.SubCollection
	(*LogLevels_LogLevel)(nil),           // 31: veidemann.api.config.v1.LogLevels.LogLevel
	(*timestamp.Timestamp)(nil),          // 32: google.protobuf.Timestamp
}
var file_config_v1_resources_proto_depIdxs = []int32{
	0,  // 0: veidemann.api.config.v1.ConfigObject.kind:type_name -> veidemann.api.config.v1.Kind
	8,  // 1: veidemann.api.config.v1.ConfigObject.meta:type_name -> veidemann.api.config.v1.Meta
	11, // 2: veidemann.api.config.v1.ConfigObject.crawl_entity:type_name -> veidemann.api.config.v1.CrawlEntity
	12, // 3: veidemann.api.config.v1.ConfigObject.seed:type_name -> veidemann.api.config.v1.Seed
	13, // 4: veidemann.api.config.v1.ConfigObject.crawl_job:type_name -> veidemann.api.config.v1.CrawlJob
	14, // 5: veidemann.api.config.v1.ConfigObject.crawl_config:type_name -> veidemann.api.config.v1.CrawlConfig
	16, // 6: veidemann.api.config.v1.ConfigObject.crawl_schedule_config:type_name -> veidemann.api.config.v1.CrawlScheduleConfig
	19, // 7: veidemann.api.config.v1.ConfigObject.browser_config:type_name -> veidemann.api.config.v1.BrowserConfig
	20, // 8: veidemann.api.config.v1.ConfigObject.politeness_config:type_name -> veidemann.api.config.v1.PolitenessConfig
	21, // 9: veidemann.api.config.v1.ConfigObject.browser_script:type_name -> veidemann.api.config.v1.BrowserScript
	22, // 10: veidemann.api.config.v1.ConfigObject.crawl_host_group_config:type_name -> veidemann.api.config.v1.CrawlHostGroupConfig
	24, // 11: veidemann.api.config.v1.ConfigObject.role_mapping:type_name -> veidemann.api.config.v1.RoleMapping
	25, // 12: veidemann.api.config.v1.ConfigObject.collection:type_name -> veidemann.api.config.v1.Collection
	32, // 13: veidemann.api.config.v1.Meta.created:type_name -> google.protobuf.Timestamp
	32, // 14: veidemann.api.config.v1.Meta.last_modified:type_name -> google.protobuf.Timestamp
	9,  // 15: veidemann.api.config.v1.Meta.label:type_name -> veidemann.api.config.v1.Label
	0,  // 16: veidemann.api.config.v1.ConfigRef.kind:type_name -> veidemann.api.config.v1.Kind
	10, // 17: veidemann.api.config.v1.Seed.entity_ref:type_name -> veidemann.api.config.v1.ConfigRef
	17, // 18: veidemann.api.config.v1.Seed.scope:type_name -> veidemann.api.config.v1.CrawlScope
	10, // 19: veidemann.api.config.v1.Seed.job_ref:type_name -> veidemann.api.config.v1.ConfigRef
	10, // 20: veidemann.api.config.v1.CrawlJob.schedule_ref:type_name -> veidemann.api.config.v1.ConfigRef
	18, // 21: veidemann.api.config.v1.CrawlJob.limits:type_name -> veidemann.api.config.v1.CrawlLimitsConfig
	10, // 22: veidemann.api.config.v1.CrawlJob.crawl_config_ref:type_name -> veidemann.api.config.v1.ConfigRef
	10, // 23: veidemann.api.config.v1.CrawlConfig.collection_ref:type_name -> veidemann.api.config.v1.ConfigRef
	10, // 24: veidemann.api.config.v1.CrawlConfig.browser_config_ref:type_name -> veidemann.api.config.v1.ConfigRef
	10, // 25: veidemann.api.config.v1.CrawlConfig.politeness_ref:type_name -> veidemann.api.config.v1.ConfigRef
	15, // 26: veidemann.api.config.v1.CrawlConfig.extra:type_name -> veidemann.api.config.v1.ExtraConfig
	32, // 27: veidemann.api.config.v1.CrawlScheduleConfig.valid_from:type_name -> google.protobuf.Timestamp
	32, // 28: veidemann.api.config.v1.CrawlScheduleConfig.valid_to:type_name -> google.protobuf.Timestamp
	10, // 29: veidemann.api.config.v1.BrowserConfig.script_ref:type_name -> veidemann.api.config.v1.ConfigRef
	27, // 30: veidemann.api.config.v1.BrowserConfig.headers:type_name -> veidemann.api.config.v1.BrowserConfig.HeadersEntry
	28, // 31: veidemann.api.config.v1.BrowserConfig.script_parameters:type_name -> veidemann.api.config.v1.BrowserConfig.ScriptParametersEntry
	2,  // 32: veidemann.api.config.v1.PolitenessConfig.robots_policy:type_name -> veidemann.api.config.v1.PolitenessConfig.RobotsPolicy
	3,  // 33: veidemann.api.config.v1.BrowserScript.browser_script_type:type_name -> veidemann.api.config.v1.BrowserScript.BrowserScriptType
	29, // 34: veidemann.api.config.v1.CrawlHostGroupConfig.ip_range:type_name -> veidemann.api.config.v1.CrawlHostGroupConfig.IpRange
	32, // 35: veidemann.api.config.v1.ApiKey.validUntil:type_name -> google.protobuf.Timestamp
	23, // 36: veidemann.api.config.v1.RoleMapping.api_key:type_name -> veidemann.api.config.v1.ApiKey
	1,  // 37: veidemann.api.config.v1.RoleMapping.role:type_name -> veidemann.api.config.v1.Role
	4,  // 38: veidemann.api.config.v1.Collection.collection_dedup_policy:type_name -> veidemann.api.config.v1.Collection.RotationPolicy
	4,  // 39: veidemann.api.config.v1.Collection.file_rotation_policy:type_name -> veidemann.api.config.v1.Collection.RotationPolicy
	30, // 40: veidemann.api.config.v1.Collection.sub_collections:type_name -> veidemann.api.config.v1.Collection.SubCollection
	31, // 41: veidemann.api.config.v1.LogLevels.log_level:type_name -> veidemann.api.config.v1.LogLevels.LogLevel
	5,  // 42: veidemann.api.config.v1.Collection.SubCollection.type:type_name -> veidemann.api.config.v1.Collection.SubCollectionType
	6,  // 43: veidemann.api.config.v1.LogLevels.LogLevel.level:type_name -> veidemann.api.config.v1.LogLevels.Level
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_config_v1_resources_proto_init() }
func file_config_v1_resources_proto_init() {
	if File_config_v1_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_v1_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlScheduleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlLimitsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolitenessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlHostGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlHostGroupConfig_IpRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_SubCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v1_resources_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLevels_LogLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_v1_resources_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConfigObject_CrawlEntity)(nil),
		(*ConfigObject_Seed)(nil),
		(*ConfigObject_CrawlJob)(nil),
		(*ConfigObject_CrawlConfig)(nil),
		(*ConfigObject_CrawlScheduleConfig)(nil),
		(*ConfigObject_BrowserConfig)(nil),
		(*ConfigObject_PolitenessConfig)(nil),
		(*ConfigObject_BrowserScript)(nil),
		(*ConfigObject_CrawlHostGroupConfig)(nil),
		(*ConfigObject_RoleMapping)(nil),
		(*ConfigObject_Collection)(nil),
	}
	file_config_v1_resources_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*RoleMapping_ApiKey)(nil),
		(*RoleMapping_Email)(nil),
		(*RoleMapping_Group)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_v1_resources_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_resources_proto_goTypes,
		DependencyIndexes: file_config_v1_resources_proto_depIdxs,
		EnumInfos:         file_config_v1_resources_proto_enumTypes,
		MessageInfos:      file_config_v1_resources_proto_msgTypes,
	}.Build()
	File_config_v1_resources_proto = out.File
	file_config_v1_resources_proto_rawDesc = nil
	file_config_v1_resources_proto_goTypes = nil
	file_config_v1_resources_proto_depIdxs = nil
}
