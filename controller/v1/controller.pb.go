// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller/v1/controller.proto

package controller

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1 "github.com/nlnwa/veidemann-api-go/config/v1"
	v11 "github.com/nlnwa/veidemann-api-go/frontier/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunStatus int32

const (
	RunStatus_RUNNING         RunStatus = 0
	RunStatus_PAUSED          RunStatus = 1
	RunStatus_PAUSE_REQUESTED RunStatus = 2
)

var RunStatus_name = map[int32]string{
	0: "RUNNING",
	1: "PAUSED",
	2: "PAUSE_REQUESTED",
}

var RunStatus_value = map[string]int32{
	"RUNNING":         0,
	"PAUSED":          1,
	"PAUSE_REQUESTED": 2,
}

func (x RunStatus) String() string {
	return proto.EnumName(RunStatus_name, int32(x))
}

func (RunStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c57a989ad0a26b70, []int{0}
}

// Kick of a crawl job immediately
// If a job is already running for this job_id, then new seeds are added to the job instead of starting a new one.
type RunCrawlRequest struct {
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// If seed id is submitted, only this seed will be harvested.
	// If empty, all seeds configured with the submitted job id will be harvested.
	SeedId               string   `protobuf:"bytes,6,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunCrawlRequest) Reset()         { *m = RunCrawlRequest{} }
func (m *RunCrawlRequest) String() string { return proto.CompactTextString(m) }
func (*RunCrawlRequest) ProtoMessage()    {}
func (*RunCrawlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57a989ad0a26b70, []int{0}
}

func (m *RunCrawlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunCrawlRequest.Unmarshal(m, b)
}
func (m *RunCrawlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunCrawlRequest.Marshal(b, m, deterministic)
}
func (m *RunCrawlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCrawlRequest.Merge(m, src)
}
func (m *RunCrawlRequest) XXX_Size() int {
	return xxx_messageInfo_RunCrawlRequest.Size(m)
}
func (m *RunCrawlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCrawlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunCrawlRequest proto.InternalMessageInfo

func (m *RunCrawlRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *RunCrawlRequest) GetSeedId() string {
	if m != nil {
		return m.SeedId
	}
	return ""
}

type RunCrawlReply struct {
	JobExecutionId       string   `protobuf:"bytes,1,opt,name=job_execution_id,json=jobExecutionId,proto3" json:"job_execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunCrawlReply) Reset()         { *m = RunCrawlReply{} }
func (m *RunCrawlReply) String() string { return proto.CompactTextString(m) }
func (*RunCrawlReply) ProtoMessage()    {}
func (*RunCrawlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57a989ad0a26b70, []int{1}
}

func (m *RunCrawlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunCrawlReply.Unmarshal(m, b)
}
func (m *RunCrawlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunCrawlReply.Marshal(b, m, deterministic)
}
func (m *RunCrawlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCrawlReply.Merge(m, src)
}
func (m *RunCrawlReply) XXX_Size() int {
	return xxx_messageInfo_RunCrawlReply.Size(m)
}
func (m *RunCrawlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCrawlReply.DiscardUnknown(m)
}

var xxx_messageInfo_RunCrawlReply proto.InternalMessageInfo

func (m *RunCrawlReply) GetJobExecutionId() string {
	if m != nil {
		return m.JobExecutionId
	}
	return ""
}

type RoleList struct {
	Role                 []v1.Role `protobuf:"varint,1,rep,packed,name=role,proto3,enum=veidemann.api.config.v1.Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RoleList) Reset()         { *m = RoleList{} }
func (m *RoleList) String() string { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()    {}
func (*RoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57a989ad0a26b70, []int{2}
}

func (m *RoleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleList.Unmarshal(m, b)
}
func (m *RoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleList.Marshal(b, m, deterministic)
}
func (m *RoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleList.Merge(m, src)
}
func (m *RoleList) XXX_Size() int {
	return xxx_messageInfo_RoleList.Size(m)
}
func (m *RoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleList.DiscardUnknown(m)
}

var xxx_messageInfo_RoleList proto.InternalMessageInfo

func (m *RoleList) GetRole() []v1.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type OpenIdConnectIssuerReply struct {
	OpenIdConnectIssuer  string   `protobuf:"bytes,1,opt,name=open_id_connect_issuer,json=openIdConnectIssuer,proto3" json:"open_id_connect_issuer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenIdConnectIssuerReply) Reset()         { *m = OpenIdConnectIssuerReply{} }
func (m *OpenIdConnectIssuerReply) String() string { return proto.CompactTextString(m) }
func (*OpenIdConnectIssuerReply) ProtoMessage()    {}
func (*OpenIdConnectIssuerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57a989ad0a26b70, []int{3}
}

func (m *OpenIdConnectIssuerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenIdConnectIssuerReply.Unmarshal(m, b)
}
func (m *OpenIdConnectIssuerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenIdConnectIssuerReply.Marshal(b, m, deterministic)
}
func (m *OpenIdConnectIssuerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenIdConnectIssuerReply.Merge(m, src)
}
func (m *OpenIdConnectIssuerReply) XXX_Size() int {
	return xxx_messageInfo_OpenIdConnectIssuerReply.Size(m)
}
func (m *OpenIdConnectIssuerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenIdConnectIssuerReply.DiscardUnknown(m)
}

var xxx_messageInfo_OpenIdConnectIssuerReply proto.InternalMessageInfo

func (m *OpenIdConnectIssuerReply) GetOpenIdConnectIssuer() string {
	if m != nil {
		return m.OpenIdConnectIssuer
	}
	return ""
}

type CrawlerStatus struct {
	RunStatus            RunStatus `protobuf:"varint,1,opt,name=runStatus,proto3,enum=veidemann.api.controller.v1.RunStatus" json:"runStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CrawlerStatus) Reset()         { *m = CrawlerStatus{} }
func (m *CrawlerStatus) String() string { return proto.CompactTextString(m) }
func (*CrawlerStatus) ProtoMessage()    {}
func (*CrawlerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57a989ad0a26b70, []int{4}
}

func (m *CrawlerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlerStatus.Unmarshal(m, b)
}
func (m *CrawlerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlerStatus.Marshal(b, m, deterministic)
}
func (m *CrawlerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlerStatus.Merge(m, src)
}
func (m *CrawlerStatus) XXX_Size() int {
	return xxx_messageInfo_CrawlerStatus.Size(m)
}
func (m *CrawlerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlerStatus proto.InternalMessageInfo

func (m *CrawlerStatus) GetRunStatus() RunStatus {
	if m != nil {
		return m.RunStatus
	}
	return RunStatus_RUNNING
}

func init() {
	proto.RegisterEnum("veidemann.api.controller.v1.RunStatus", RunStatus_name, RunStatus_value)
	proto.RegisterType((*RunCrawlRequest)(nil), "veidemann.api.controller.v1.RunCrawlRequest")
	proto.RegisterType((*RunCrawlReply)(nil), "veidemann.api.controller.v1.RunCrawlReply")
	proto.RegisterType((*RoleList)(nil), "veidemann.api.controller.v1.RoleList")
	proto.RegisterType((*OpenIdConnectIssuerReply)(nil), "veidemann.api.controller.v1.OpenIdConnectIssuerReply")
	proto.RegisterType((*CrawlerStatus)(nil), "veidemann.api.controller.v1.CrawlerStatus")
}

func init() { proto.RegisterFile("controller/v1/controller.proto", fileDescriptor_c57a989ad0a26b70) }

var fileDescriptor_c57a989ad0a26b70 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xed, 0x4f, 0xd3, 0x5e,
	0x14, 0xee, 0x7e, 0x3f, 0x19, 0x70, 0x94, 0x31, 0x2e, 0x01, 0x71, 0x04, 0x43, 0x9a, 0x60, 0x16,
	0x22, 0xb7, 0x19, 0xc4, 0x0f, 0x68, 0x4c, 0x1c, 0x30, 0x49, 0x8d, 0x19, 0xd8, 0xd9, 0xc4, 0xf8,
	0x65, 0xe9, 0xcb, 0x59, 0xbd, 0xa4, 0xdc, 0x5b, 0x6f, 0x6f, 0x0b, 0xfc, 0xdd, 0xfe, 0x03, 0xa6,
	0xed, 0x5e, 0x85, 0x55, 0x8d, 0xdf, 0x76, 0x5e, 0x9e, 0xe7, 0x39, 0x3d, 0xe7, 0xb9, 0x83, 0xe7,
	0x9e, 0xe0, 0x4a, 0x8a, 0x30, 0x44, 0x69, 0xa4, 0x2d, 0x63, 0x12, 0xd1, 0x48, 0x0a, 0x25, 0xc8,
	0x76, 0x8a, 0xcc, 0xc7, 0x6b, 0x87, 0x73, 0xea, 0x44, 0x8c, 0x4e, 0xd5, 0xd3, 0x56, 0x63, 0x67,
	0x16, 0x2c, 0x31, 0x16, 0x89, 0xf4, 0x30, 0x2e, 0xb0, 0x8d, 0xed, 0x81, 0x14, 0x5c, 0xb1, 0x87,
	0x8b, 0xcf, 0x3c, 0xc1, 0x07, 0x2c, 0x78, 0x10, 0x17, 0x08, 0x11, 0x84, 0x68, 0xe4, 0x91, 0x9b,
	0x0c, 0x0c, 0xbc, 0x8e, 0xd4, 0x5d, 0x51, 0xd4, 0xdb, 0xb0, 0x6a, 0x25, 0xfc, 0x54, 0x3a, 0x37,
	0xa1, 0x85, 0xdf, 0x13, 0x8c, 0x15, 0xd9, 0x80, 0xea, 0x95, 0x70, 0xfb, 0xcc, 0xdf, 0x5a, 0xd8,
	0xad, 0x34, 0x97, 0xad, 0x85, 0x2b, 0xe1, 0x9a, 0x3e, 0x79, 0x0a, 0x8b, 0x31, 0xa2, 0x9f, 0xe5,
	0xab, 0x79, 0xbe, 0x9a, 0x85, 0xa6, 0xaf, 0x1f, 0xc3, 0xca, 0x84, 0x22, 0x0a, 0xef, 0x48, 0x13,
	0xea, 0x19, 0x01, 0xde, 0xa2, 0x97, 0x28, 0x26, 0x78, 0x06, 0xa9, 0xe4, 0x90, 0xda, 0x95, 0x70,
	0x3b, 0xa3, 0xb4, 0xe9, 0xeb, 0x6f, 0x61, 0xc9, 0x12, 0x21, 0x7e, 0x64, 0xb1, 0x22, 0x2d, 0x78,
	0x24, 0x45, 0x88, 0x5b, 0x95, 0xdd, 0xff, 0x9b, 0xb5, 0xc3, 0x1d, 0x7a, 0x6f, 0x53, 0x03, 0x16,
	0xd0, 0xb4, 0x45, 0x33, 0x80, 0x95, 0xb7, 0xea, 0x17, 0xb0, 0x75, 0x11, 0x21, 0x37, 0xfd, 0x53,
	0xc1, 0x39, 0x7a, 0xca, 0x8c, 0xe3, 0x04, 0x65, 0x31, 0xc4, 0x11, 0x6c, 0x8a, 0x08, 0x33, 0xed,
	0xbe, 0x57, 0x54, 0xfb, 0x2c, 0x2f, 0x0f, 0x47, 0x59, 0x17, 0xf7, 0x91, 0xba, 0x0d, 0x2b, 0xf9,
	0x77, 0xa0, 0xec, 0x29, 0x47, 0x25, 0x31, 0x39, 0x83, 0x65, 0x99, 0xf0, 0x22, 0xc8, 0x81, 0xb5,
	0xc3, 0x17, 0xb4, 0xe4, 0x86, 0xd4, 0x1a, 0x75, 0x5b, 0x13, 0xe0, 0xfe, 0x31, 0x2c, 0x8f, 0xf3,
	0xe4, 0x31, 0x2c, 0x5a, 0x76, 0xb7, 0x6b, 0x76, 0xcf, 0xeb, 0x1a, 0x01, 0xa8, 0x5e, 0xb6, 0xed,
	0x5e, 0xe7, 0xac, 0x5e, 0x21, 0xeb, 0xb0, 0x9a, 0xff, 0xee, 0x5b, 0x9d, 0x4f, 0x76, 0xa7, 0xf7,
	0xb9, 0x73, 0x56, 0xff, 0xef, 0xf0, 0xc7, 0x02, 0xc0, 0xe9, 0x58, 0x81, 0x7c, 0x81, 0x8d, 0x73,
	0x54, 0xd9, 0x0a, 0xe2, 0xf7, 0x42, 0xb6, 0x3d, 0xc5, 0x52, 0xb4, 0x63, 0x94, 0x64, 0x93, 0x16,
	0x57, 0xa6, 0xa3, 0x2b, 0xd3, 0x4e, 0x76, 0xe5, 0xc6, 0x5e, 0xf9, 0xb4, 0xc3, 0xe5, 0xeb, 0x1a,
	0x19, 0xc0, 0xd2, 0xe8, 0x8a, 0xe4, 0xe5, 0xef, 0x3e, 0x71, 0xda, 0x2f, 0x8d, 0xfd, 0x3f, 0xec,
	0x8e, 0xc2, 0x3b, 0x5d, 0x23, 0x12, 0xd6, 0xdb, 0xae, 0x90, 0x2a, 0x4f, 0x8e, 0xbd, 0x40, 0x9a,
	0xa5, 0x24, 0x53, 0x9e, 0x69, 0x18, 0xbf, 0x74, 0x8e, 0x5e, 0x45, 0xd6, 0x37, 0x4b, 0x5a, 0x2c,
	0x5c, 0xd7, 0x08, 0x87, 0xb5, 0x5c, 0xf3, 0xc3, 0x94, 0xfb, 0xfe, 0x42, 0xf1, 0xa0, 0x44, 0x71,
	0x9a, 0x72, 0xac, 0xc7, 0x60, 0xf3, 0x1c, 0xd5, 0x03, 0xd6, 0x9c, 0x7b, 0xa6, 0x57, 0xa5, 0xc3,
	0xcc, 0x33, 0xb9, 0xae, 0x91, 0x77, 0xf0, 0xe4, 0xd2, 0x49, 0x62, 0x1c, 0xda, 0x76, 0xae, 0xc0,
	0x9c, 0xbc, 0xae, 0x91, 0x13, 0xa8, 0xd9, 0xfc, 0x1f, 0x39, 0xba, 0x50, 0x1d, 0xba, 0x7b, 0x1e,
	0xb6, 0xdc, 0x24, 0x33, 0x8f, 0x4e, 0xd7, 0x4e, 0x6e, 0x61, 0x8f, 0x0b, 0xca, 0x5d, 0xca, 0xb9,
	0x53, 0x06, 0x3c, 0x59, 0x9b, 0xbc, 0x8d, 0x1e, 0xca, 0x94, 0x79, 0x78, 0x59, 0xf9, 0xfa, 0x3a,
	0x60, 0xea, 0x5b, 0xe2, 0x52, 0x4f, 0x5c, 0x1b, 0x3c, 0xe4, 0x37, 0x8e, 0x31, 0xa6, 0x38, 0x70,
	0x22, 0x76, 0x10, 0x08, 0x63, 0xe6, 0x9f, 0xf6, 0xcd, 0x24, 0x72, 0xab, 0xf9, 0xdc, 0x47, 0x3f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x06, 0x67, 0x2c, 0xb7, 0xc9, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	GetRolesForActiveUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoleList, error)
	RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error)
	// Abort a crawl execution
	AbortCrawlExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v11.CrawlExecutionStatus, error)
	// Abort a job execution
	AbortJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v11.JobExecutionStatus, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error)
	PauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	UnPauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrawlerStatus, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) GetRolesForActiveUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/GetRolesForActiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error) {
	out := new(RunCrawlReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/RunCrawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AbortCrawlExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v11.CrawlExecutionStatus, error) {
	out := new(v11.CrawlExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/AbortCrawlExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AbortJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v11.JobExecutionStatus, error) {
	out := new(v11.JobExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/AbortJobExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetOpenIdConnectIssuer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error) {
	out := new(OpenIdConnectIssuerReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/GetOpenIdConnectIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) PauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/PauseCrawler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UnPauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/UnPauseCrawler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrawlerStatus, error) {
	out := new(CrawlerStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	GetRolesForActiveUser(context.Context, *empty.Empty) (*RoleList, error)
	RunCrawl(context.Context, *RunCrawlRequest) (*RunCrawlReply, error)
	// Abort a crawl execution
	AbortCrawlExecution(context.Context, *ExecutionId) (*v11.CrawlExecutionStatus, error)
	// Abort a job execution
	AbortJobExecution(context.Context, *ExecutionId) (*v11.JobExecutionStatus, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(context.Context, *empty.Empty) (*OpenIdConnectIssuerReply, error)
	PauseCrawler(context.Context, *empty.Empty) (*empty.Empty, error)
	UnPauseCrawler(context.Context, *empty.Empty) (*empty.Empty, error)
	Status(context.Context, *empty.Empty) (*CrawlerStatus, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) GetRolesForActiveUser(ctx context.Context, req *empty.Empty) (*RoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForActiveUser not implemented")
}
func (*UnimplementedControllerServer) RunCrawl(ctx context.Context, req *RunCrawlRequest) (*RunCrawlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCrawl not implemented")
}
func (*UnimplementedControllerServer) AbortCrawlExecution(ctx context.Context, req *ExecutionId) (*v11.CrawlExecutionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortCrawlExecution not implemented")
}
func (*UnimplementedControllerServer) AbortJobExecution(ctx context.Context, req *ExecutionId) (*v11.JobExecutionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortJobExecution not implemented")
}
func (*UnimplementedControllerServer) GetOpenIdConnectIssuer(ctx context.Context, req *empty.Empty) (*OpenIdConnectIssuerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenIdConnectIssuer not implemented")
}
func (*UnimplementedControllerServer) PauseCrawler(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCrawler not implemented")
}
func (*UnimplementedControllerServer) UnPauseCrawler(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPauseCrawler not implemented")
}
func (*UnimplementedControllerServer) Status(ctx context.Context, req *empty.Empty) (*CrawlerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_GetRolesForActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/GetRolesForActiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RunCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RunCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/RunCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RunCrawl(ctx, req.(*RunCrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AbortCrawlExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AbortCrawlExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/AbortCrawlExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AbortCrawlExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AbortJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AbortJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/AbortJobExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AbortJobExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetOpenIdConnectIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/GetOpenIdConnectIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_PauseCrawler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).PauseCrawler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/PauseCrawler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).PauseCrawler(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UnPauseCrawler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UnPauseCrawler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/UnPauseCrawler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UnPauseCrawler(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.controller.v1.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRolesForActiveUser",
			Handler:    _Controller_GetRolesForActiveUser_Handler,
		},
		{
			MethodName: "RunCrawl",
			Handler:    _Controller_RunCrawl_Handler,
		},
		{
			MethodName: "AbortCrawlExecution",
			Handler:    _Controller_AbortCrawlExecution_Handler,
		},
		{
			MethodName: "AbortJobExecution",
			Handler:    _Controller_AbortJobExecution_Handler,
		},
		{
			MethodName: "GetOpenIdConnectIssuer",
			Handler:    _Controller_GetOpenIdConnectIssuer_Handler,
		},
		{
			MethodName: "PauseCrawler",
			Handler:    _Controller_PauseCrawler_Handler,
		},
		{
			MethodName: "UnPauseCrawler",
			Handler:    _Controller_UnPauseCrawler_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Controller_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/v1/controller.proto",
}
