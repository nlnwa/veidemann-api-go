// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package controller

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1 "github.com/nlnwa/veidemann-api-go/frontier/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	GetRolesForActiveUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoleList, error)
	RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error)
	// Abort a crawl execution
	AbortCrawlExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v1.CrawlExecutionStatus, error)
	// Abort a job execution
	AbortJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v1.JobExecutionStatus, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error)
	PauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	UnPauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrawlerStatus, error)
	// Number of queued URI's for a CrawlExecution
	QueueCountForCrawlExecution(ctx context.Context, in *v1.CrawlExecutionId, opts ...grpc.CallOption) (*v1.CountResponse, error)
	// Number of queued URI's for a CrawlHostGroup
	QueueCountForCrawlHostGroup(ctx context.Context, in *v1.CrawlHostGroup, opts ...grpc.CallOption) (*v1.CountResponse, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) GetRolesForActiveUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/GetRolesForActiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error) {
	out := new(RunCrawlReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/RunCrawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AbortCrawlExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v1.CrawlExecutionStatus, error) {
	out := new(v1.CrawlExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/AbortCrawlExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AbortJobExecution(ctx context.Context, in *ExecutionId, opts ...grpc.CallOption) (*v1.JobExecutionStatus, error) {
	out := new(v1.JobExecutionStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/AbortJobExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetOpenIdConnectIssuer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error) {
	out := new(OpenIdConnectIssuerReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/GetOpenIdConnectIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) PauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/PauseCrawler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UnPauseCrawler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/UnPauseCrawler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrawlerStatus, error) {
	out := new(CrawlerStatus)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) QueueCountForCrawlExecution(ctx context.Context, in *v1.CrawlExecutionId, opts ...grpc.CallOption) (*v1.CountResponse, error) {
	out := new(v1.CountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/QueueCountForCrawlExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) QueueCountForCrawlHostGroup(ctx context.Context, in *v1.CrawlHostGroup, opts ...grpc.CallOption) (*v1.CountResponse, error) {
	out := new(v1.CountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.controller.v1.Controller/QueueCountForCrawlHostGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	GetRolesForActiveUser(context.Context, *empty.Empty) (*RoleList, error)
	RunCrawl(context.Context, *RunCrawlRequest) (*RunCrawlReply, error)
	// Abort a crawl execution
	AbortCrawlExecution(context.Context, *ExecutionId) (*v1.CrawlExecutionStatus, error)
	// Abort a job execution
	AbortJobExecution(context.Context, *ExecutionId) (*v1.JobExecutionStatus, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(context.Context, *empty.Empty) (*OpenIdConnectIssuerReply, error)
	PauseCrawler(context.Context, *empty.Empty) (*empty.Empty, error)
	UnPauseCrawler(context.Context, *empty.Empty) (*empty.Empty, error)
	Status(context.Context, *empty.Empty) (*CrawlerStatus, error)
	// Number of queued URI's for a CrawlExecution
	QueueCountForCrawlExecution(context.Context, *v1.CrawlExecutionId) (*v1.CountResponse, error)
	// Number of queued URI's for a CrawlHostGroup
	QueueCountForCrawlHostGroup(context.Context, *v1.CrawlHostGroup) (*v1.CountResponse, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) GetRolesForActiveUser(context.Context, *empty.Empty) (*RoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForActiveUser not implemented")
}
func (UnimplementedControllerServer) RunCrawl(context.Context, *RunCrawlRequest) (*RunCrawlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCrawl not implemented")
}
func (UnimplementedControllerServer) AbortCrawlExecution(context.Context, *ExecutionId) (*v1.CrawlExecutionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortCrawlExecution not implemented")
}
func (UnimplementedControllerServer) AbortJobExecution(context.Context, *ExecutionId) (*v1.JobExecutionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortJobExecution not implemented")
}
func (UnimplementedControllerServer) GetOpenIdConnectIssuer(context.Context, *empty.Empty) (*OpenIdConnectIssuerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenIdConnectIssuer not implemented")
}
func (UnimplementedControllerServer) PauseCrawler(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCrawler not implemented")
}
func (UnimplementedControllerServer) UnPauseCrawler(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPauseCrawler not implemented")
}
func (UnimplementedControllerServer) Status(context.Context, *empty.Empty) (*CrawlerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedControllerServer) QueueCountForCrawlExecution(context.Context, *v1.CrawlExecutionId) (*v1.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCountForCrawlExecution not implemented")
}
func (UnimplementedControllerServer) QueueCountForCrawlHostGroup(context.Context, *v1.CrawlHostGroup) (*v1.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCountForCrawlHostGroup not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_GetRolesForActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/GetRolesForActiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RunCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RunCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/RunCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RunCrawl(ctx, req.(*RunCrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AbortCrawlExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AbortCrawlExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/AbortCrawlExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AbortCrawlExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AbortJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AbortJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/AbortJobExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AbortJobExecution(ctx, req.(*ExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetOpenIdConnectIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/GetOpenIdConnectIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_PauseCrawler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).PauseCrawler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/PauseCrawler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).PauseCrawler(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UnPauseCrawler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UnPauseCrawler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/UnPauseCrawler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UnPauseCrawler(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_QueueCountForCrawlExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CrawlExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).QueueCountForCrawlExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/QueueCountForCrawlExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).QueueCountForCrawlExecution(ctx, req.(*v1.CrawlExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_QueueCountForCrawlHostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CrawlHostGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).QueueCountForCrawlHostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.controller.v1.Controller/QueueCountForCrawlHostGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).QueueCountForCrawlHostGroup(ctx, req.(*v1.CrawlHostGroup))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.controller.v1.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRolesForActiveUser",
			Handler:    _Controller_GetRolesForActiveUser_Handler,
		},
		{
			MethodName: "RunCrawl",
			Handler:    _Controller_RunCrawl_Handler,
		},
		{
			MethodName: "AbortCrawlExecution",
			Handler:    _Controller_AbortCrawlExecution_Handler,
		},
		{
			MethodName: "AbortJobExecution",
			Handler:    _Controller_AbortJobExecution_Handler,
		},
		{
			MethodName: "GetOpenIdConnectIssuer",
			Handler:    _Controller_GetOpenIdConnectIssuer_Handler,
		},
		{
			MethodName: "PauseCrawler",
			Handler:    _Controller_PauseCrawler_Handler,
		},
		{
			MethodName: "UnPauseCrawler",
			Handler:    _Controller_UnPauseCrawler_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Controller_Status_Handler,
		},
		{
			MethodName: "QueueCountForCrawlExecution",
			Handler:    _Controller_QueueCountForCrawlExecution_Handler,
		},
		{
			MethodName: "QueueCountForCrawlHostGroup",
			Handler:    _Controller_QueueCountForCrawlHostGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/v1/controller.proto",
}
