// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: report/v1/report.proto

package report

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v11 "github.com/nlnwa/veidemann-api-go/commons/v1"
	v1 "github.com/nlnwa/veidemann-api-go/frontier/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Specification of which entities to get.
type CrawlLogListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select objects by one or more id's
	WarcId             []string       `protobuf:"bytes,2,rep,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	QueryTemplate      *v1.CrawlLog   `protobuf:"bytes,5,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask          *v11.FieldMask `protobuf:"bytes,6,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask *v11.FieldMask `protobuf:"bytes,7,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath        string         `protobuf:"bytes,8,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending    bool           `protobuf:"varint,9,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch              bool           `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize           int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset             int32          `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *CrawlLogListRequest) Reset() {
	*x = CrawlLogListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_v1_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlLogListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlLogListRequest) ProtoMessage() {}

func (x *CrawlLogListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_report_v1_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlLogListRequest.ProtoReflect.Descriptor instead.
func (*CrawlLogListRequest) Descriptor() ([]byte, []int) {
	return file_report_v1_report_proto_rawDescGZIP(), []int{0}
}

func (x *CrawlLogListRequest) GetWarcId() []string {
	if x != nil {
		return x.WarcId
	}
	return nil
}

func (x *CrawlLogListRequest) GetQueryTemplate() *v1.CrawlLog {
	if x != nil {
		return x.QueryTemplate
	}
	return nil
}

func (x *CrawlLogListRequest) GetQueryMask() *v11.FieldMask {
	if x != nil {
		return x.QueryMask
	}
	return nil
}

func (x *CrawlLogListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if x != nil {
		return x.ReturnedFieldsMask
	}
	return nil
}

func (x *CrawlLogListRequest) GetOrderByPath() string {
	if x != nil {
		return x.OrderByPath
	}
	return ""
}

func (x *CrawlLogListRequest) GetOrderDescending() bool {
	if x != nil {
		return x.OrderDescending
	}
	return false
}

func (x *CrawlLogListRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *CrawlLogListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CrawlLogListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type PageLogListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select objects by one or more id's
	WarcId             []string       `protobuf:"bytes,2,rep,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	QueryTemplate      *v1.PageLog    `protobuf:"bytes,5,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask          *v11.FieldMask `protobuf:"bytes,6,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask *v11.FieldMask `protobuf:"bytes,7,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath        string         `protobuf:"bytes,8,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending    bool           `protobuf:"varint,9,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch              bool           `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize           int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset             int32          `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PageLogListRequest) Reset() {
	*x = PageLogListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_v1_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageLogListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageLogListRequest) ProtoMessage() {}

func (x *PageLogListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_report_v1_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageLogListRequest.ProtoReflect.Descriptor instead.
func (*PageLogListRequest) Descriptor() ([]byte, []int) {
	return file_report_v1_report_proto_rawDescGZIP(), []int{1}
}

func (x *PageLogListRequest) GetWarcId() []string {
	if x != nil {
		return x.WarcId
	}
	return nil
}

func (x *PageLogListRequest) GetQueryTemplate() *v1.PageLog {
	if x != nil {
		return x.QueryTemplate
	}
	return nil
}

func (x *PageLogListRequest) GetQueryMask() *v11.FieldMask {
	if x != nil {
		return x.QueryMask
	}
	return nil
}

func (x *PageLogListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if x != nil {
		return x.ReturnedFieldsMask
	}
	return nil
}

func (x *PageLogListRequest) GetOrderByPath() string {
	if x != nil {
		return x.OrderByPath
	}
	return ""
}

func (x *PageLogListRequest) GetOrderDescending() bool {
	if x != nil {
		return x.OrderDescending
	}
	return false
}

func (x *PageLogListRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *PageLogListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageLogListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ExecuteDbQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to execute
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Maximum number of rows to return. A limit of -1 indicates no limit. If unset or zero, use default limit.
	Limit int32 `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ExecuteDbQueryRequest) Reset() {
	*x = ExecuteDbQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_v1_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteDbQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteDbQueryRequest) ProtoMessage() {}

func (x *ExecuteDbQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_report_v1_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteDbQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteDbQueryRequest) Descriptor() ([]byte, []int) {
	return file_report_v1_report_proto_rawDescGZIP(), []int{2}
}

func (x *ExecuteDbQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExecuteDbQueryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ExecuteDbQueryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record string `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *ExecuteDbQueryReply) Reset() {
	*x = ExecuteDbQueryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_v1_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteDbQueryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteDbQueryReply) ProtoMessage() {}

func (x *ExecuteDbQueryReply) ProtoReflect() protoreflect.Message {
	mi := &file_report_v1_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteDbQueryReply.ProtoReflect.Descriptor instead.
func (*ExecuteDbQueryReply) Descriptor() ([]byte, []int) {
	return file_report_v1_report_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteDbQueryReply) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

type ListCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Approximate bool  `protobuf:"varint,2,opt,name=approximate,proto3" json:"approximate,omitempty"`
}

func (x *ListCountResponse) Reset() {
	*x = ListCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_v1_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCountResponse) ProtoMessage() {}

func (x *ListCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_report_v1_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCountResponse.ProtoReflect.Descriptor instead.
func (*ListCountResponse) Descriptor() ([]byte, []int) {
	return file_report_v1_report_proto_rawDescGZIP(), []int{4}
}

func (x *ListCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListCountResponse) GetApproximate() bool {
	if x != nil {
		return x.Approximate
	}
	return false
}

type CrawlExecutionsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select objects by one or more id's
	Id                 []string                        `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	State              []v1.CrawlExecutionStatus_State `protobuf:"varint,2,rep,packed,name=state,proto3,enum=veidemann.api.frontier.v1.CrawlExecutionStatus_State" json:"state,omitempty"`
	StartTimeFrom      *timestamp.Timestamp            `protobuf:"bytes,3,opt,name=start_time_from,json=startTimeFrom,proto3" json:"start_time_from,omitempty"`
	StartTimeTo        *timestamp.Timestamp            `protobuf:"bytes,4,opt,name=start_time_to,json=startTimeTo,proto3" json:"start_time_to,omitempty"`
	HasError           bool                            `protobuf:"varint,5,opt,name=has_error,json=hasError,proto3" json:"has_error,omitempty"`
	QueryTemplate      *v1.CrawlExecutionStatus        `protobuf:"bytes,6,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask          *v11.FieldMask                  `protobuf:"bytes,7,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask *v11.FieldMask                  `protobuf:"bytes,8,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath        string                          `protobuf:"bytes,9,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending    bool                            `protobuf:"varint,10,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch              bool                            `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize           int32                           `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset             int32                           `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *CrawlExecutionsListRequest) Reset() {
	*x = CrawlExecutionsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_v1_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlExecutionsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlExecutionsListRequest) ProtoMessage() {}

func (x *CrawlExecutionsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_report_v1_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlExecutionsListRequest.ProtoReflect.Descriptor instead.
func (*CrawlExecutionsListRequest) Descriptor() ([]byte, []int) {
	return file_report_v1_report_proto_rawDescGZIP(), []int{5}
}

func (x *CrawlExecutionsListRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CrawlExecutionsListRequest) GetState() []v1.CrawlExecutionStatus_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CrawlExecutionsListRequest) GetStartTimeFrom() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimeFrom
	}
	return nil
}

func (x *CrawlExecutionsListRequest) GetStartTimeTo() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimeTo
	}
	return nil
}

func (x *CrawlExecutionsListRequest) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

func (x *CrawlExecutionsListRequest) GetQueryTemplate() *v1.CrawlExecutionStatus {
	if x != nil {
		return x.QueryTemplate
	}
	return nil
}

func (x *CrawlExecutionsListRequest) GetQueryMask() *v11.FieldMask {
	if x != nil {
		return x.QueryMask
	}
	return nil
}

func (x *CrawlExecutionsListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if x != nil {
		return x.ReturnedFieldsMask
	}
	return nil
}

func (x *CrawlExecutionsListRequest) GetOrderByPath() string {
	if x != nil {
		return x.OrderByPath
	}
	return ""
}

func (x *CrawlExecutionsListRequest) GetOrderDescending() bool {
	if x != nil {
		return x.OrderDescending
	}
	return false
}

func (x *CrawlExecutionsListRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *CrawlExecutionsListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CrawlExecutionsListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type JobExecutionsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select objects by one or more id's
	Id                 []string                      `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	State              []v1.JobExecutionStatus_State `protobuf:"varint,2,rep,packed,name=state,proto3,enum=veidemann.api.frontier.v1.JobExecutionStatus_State" json:"state,omitempty"`
	StartTimeFrom      *timestamp.Timestamp          `protobuf:"bytes,3,opt,name=start_time_from,json=startTimeFrom,proto3" json:"start_time_from,omitempty"`
	StartTimeTo        *timestamp.Timestamp          `protobuf:"bytes,4,opt,name=start_time_to,json=startTimeTo,proto3" json:"start_time_to,omitempty"`
	QueryTemplate      *v1.JobExecutionStatus        `protobuf:"bytes,6,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask          *v11.FieldMask                `protobuf:"bytes,7,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask *v11.FieldMask                `protobuf:"bytes,8,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath        string                        `protobuf:"bytes,9,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending    bool                          `protobuf:"varint,10,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch              bool                          `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize           int32                         `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset             int32                         `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *JobExecutionsListRequest) Reset() {
	*x = JobExecutionsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_v1_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobExecutionsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobExecutionsListRequest) ProtoMessage() {}

func (x *JobExecutionsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_report_v1_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobExecutionsListRequest.ProtoReflect.Descriptor instead.
func (*JobExecutionsListRequest) Descriptor() ([]byte, []int) {
	return file_report_v1_report_proto_rawDescGZIP(), []int{6}
}

func (x *JobExecutionsListRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *JobExecutionsListRequest) GetState() []v1.JobExecutionStatus_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *JobExecutionsListRequest) GetStartTimeFrom() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimeFrom
	}
	return nil
}

func (x *JobExecutionsListRequest) GetStartTimeTo() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimeTo
	}
	return nil
}

func (x *JobExecutionsListRequest) GetQueryTemplate() *v1.JobExecutionStatus {
	if x != nil {
		return x.QueryTemplate
	}
	return nil
}

func (x *JobExecutionsListRequest) GetQueryMask() *v11.FieldMask {
	if x != nil {
		return x.QueryMask
	}
	return nil
}

func (x *JobExecutionsListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if x != nil {
		return x.ReturnedFieldsMask
	}
	return nil
}

func (x *JobExecutionsListRequest) GetOrderByPath() string {
	if x != nil {
		return x.OrderByPath
	}
	return ""
}

func (x *JobExecutionsListRequest) GetOrderDescending() bool {
	if x != nil {
		return x.OrderDescending
	}
	return false
}

func (x *JobExecutionsListRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *JobExecutionsListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *JobExecutionsListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

var File_report_v1_report_proto protoreflect.FileDescriptor

var file_report_v1_report_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x03, 0x0a, 0x13,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x72, 0x63, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x55, 0x0a, 0x14,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xad, 0x03,
	0x0a, 0x12, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x72, 0x63, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x55, 0x0a, 0x14,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x43, 0x0a,
	0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x62, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x4b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x22, 0xa7,
	0x05, 0x0a, 0x1a, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x0e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x55, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x84, 0x05, 0x0a, 0x18, 0x4a, 0x6f, 0x62,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x12, 0x54, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x55,
	0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32,
	0x9a, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x66, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x76, 0x65,
	0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x4c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x4c, 0x6f, 0x67, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x6c, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x2b, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x72, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x62, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x79, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x42, 0x68, 0x0a, 0x21,
	0x6e, 0x6f, 0x2e, 0x6e, 0x62, 0x2e, 0x6e, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x42, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e,
	0x6c, 0x6e, 0x77, 0x61, 0x2f, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_report_v1_report_proto_rawDescOnce sync.Once
	file_report_v1_report_proto_rawDescData = file_report_v1_report_proto_rawDesc
)

func file_report_v1_report_proto_rawDescGZIP() []byte {
	file_report_v1_report_proto_rawDescOnce.Do(func() {
		file_report_v1_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_report_v1_report_proto_rawDescData)
	})
	return file_report_v1_report_proto_rawDescData
}

var file_report_v1_report_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_report_v1_report_proto_goTypes = []interface{}{
	(*CrawlLogListRequest)(nil),        // 0: veidemann.api.report.v1.CrawlLogListRequest
	(*PageLogListRequest)(nil),         // 1: veidemann.api.report.v1.PageLogListRequest
	(*ExecuteDbQueryRequest)(nil),      // 2: veidemann.api.report.v1.ExecuteDbQueryRequest
	(*ExecuteDbQueryReply)(nil),        // 3: veidemann.api.report.v1.ExecuteDbQueryReply
	(*ListCountResponse)(nil),          // 4: veidemann.api.report.v1.ListCountResponse
	(*CrawlExecutionsListRequest)(nil), // 5: veidemann.api.report.v1.CrawlExecutionsListRequest
	(*JobExecutionsListRequest)(nil),   // 6: veidemann.api.report.v1.JobExecutionsListRequest
	(*v1.CrawlLog)(nil),                // 7: veidemann.api.frontier.v1.CrawlLog
	(*v11.FieldMask)(nil),              // 8: veidemann.api.commons.v1.FieldMask
	(*v1.PageLog)(nil),                 // 9: veidemann.api.frontier.v1.PageLog
	(v1.CrawlExecutionStatus_State)(0), // 10: veidemann.api.frontier.v1.CrawlExecutionStatus.State
	(*timestamp.Timestamp)(nil),        // 11: google.protobuf.Timestamp
	(*v1.CrawlExecutionStatus)(nil),    // 12: veidemann.api.frontier.v1.CrawlExecutionStatus
	(v1.JobExecutionStatus_State)(0),   // 13: veidemann.api.frontier.v1.JobExecutionStatus.State
	(*v1.JobExecutionStatus)(nil),      // 14: veidemann.api.frontier.v1.JobExecutionStatus
}
var file_report_v1_report_proto_depIdxs = []int32{
	7,  // 0: veidemann.api.report.v1.CrawlLogListRequest.query_template:type_name -> veidemann.api.frontier.v1.CrawlLog
	8,  // 1: veidemann.api.report.v1.CrawlLogListRequest.query_mask:type_name -> veidemann.api.commons.v1.FieldMask
	8,  // 2: veidemann.api.report.v1.CrawlLogListRequest.returned_fields_mask:type_name -> veidemann.api.commons.v1.FieldMask
	9,  // 3: veidemann.api.report.v1.PageLogListRequest.query_template:type_name -> veidemann.api.frontier.v1.PageLog
	8,  // 4: veidemann.api.report.v1.PageLogListRequest.query_mask:type_name -> veidemann.api.commons.v1.FieldMask
	8,  // 5: veidemann.api.report.v1.PageLogListRequest.returned_fields_mask:type_name -> veidemann.api.commons.v1.FieldMask
	10, // 6: veidemann.api.report.v1.CrawlExecutionsListRequest.state:type_name -> veidemann.api.frontier.v1.CrawlExecutionStatus.State
	11, // 7: veidemann.api.report.v1.CrawlExecutionsListRequest.start_time_from:type_name -> google.protobuf.Timestamp
	11, // 8: veidemann.api.report.v1.CrawlExecutionsListRequest.start_time_to:type_name -> google.protobuf.Timestamp
	12, // 9: veidemann.api.report.v1.CrawlExecutionsListRequest.query_template:type_name -> veidemann.api.frontier.v1.CrawlExecutionStatus
	8,  // 10: veidemann.api.report.v1.CrawlExecutionsListRequest.query_mask:type_name -> veidemann.api.commons.v1.FieldMask
	8,  // 11: veidemann.api.report.v1.CrawlExecutionsListRequest.returned_fields_mask:type_name -> veidemann.api.commons.v1.FieldMask
	13, // 12: veidemann.api.report.v1.JobExecutionsListRequest.state:type_name -> veidemann.api.frontier.v1.JobExecutionStatus.State
	11, // 13: veidemann.api.report.v1.JobExecutionsListRequest.start_time_from:type_name -> google.protobuf.Timestamp
	11, // 14: veidemann.api.report.v1.JobExecutionsListRequest.start_time_to:type_name -> google.protobuf.Timestamp
	14, // 15: veidemann.api.report.v1.JobExecutionsListRequest.query_template:type_name -> veidemann.api.frontier.v1.JobExecutionStatus
	8,  // 16: veidemann.api.report.v1.JobExecutionsListRequest.query_mask:type_name -> veidemann.api.commons.v1.FieldMask
	8,  // 17: veidemann.api.report.v1.JobExecutionsListRequest.returned_fields_mask:type_name -> veidemann.api.commons.v1.FieldMask
	0,  // 18: veidemann.api.report.v1.Report.ListCrawlLogs:input_type -> veidemann.api.report.v1.CrawlLogListRequest
	0,  // 19: veidemann.api.report.v1.Report.CountCrawlLogs:input_type -> veidemann.api.report.v1.CrawlLogListRequest
	1,  // 20: veidemann.api.report.v1.Report.ListPageLogs:input_type -> veidemann.api.report.v1.PageLogListRequest
	1,  // 21: veidemann.api.report.v1.Report.CountPageLogs:input_type -> veidemann.api.report.v1.PageLogListRequest
	2,  // 22: veidemann.api.report.v1.Report.ExecuteDbQuery:input_type -> veidemann.api.report.v1.ExecuteDbQueryRequest
	5,  // 23: veidemann.api.report.v1.Report.ListExecutions:input_type -> veidemann.api.report.v1.CrawlExecutionsListRequest
	6,  // 24: veidemann.api.report.v1.Report.ListJobExecutions:input_type -> veidemann.api.report.v1.JobExecutionsListRequest
	7,  // 25: veidemann.api.report.v1.Report.ListCrawlLogs:output_type -> veidemann.api.frontier.v1.CrawlLog
	4,  // 26: veidemann.api.report.v1.Report.CountCrawlLogs:output_type -> veidemann.api.report.v1.ListCountResponse
	9,  // 27: veidemann.api.report.v1.Report.ListPageLogs:output_type -> veidemann.api.frontier.v1.PageLog
	4,  // 28: veidemann.api.report.v1.Report.CountPageLogs:output_type -> veidemann.api.report.v1.ListCountResponse
	3,  // 29: veidemann.api.report.v1.Report.ExecuteDbQuery:output_type -> veidemann.api.report.v1.ExecuteDbQueryReply
	12, // 30: veidemann.api.report.v1.Report.ListExecutions:output_type -> veidemann.api.frontier.v1.CrawlExecutionStatus
	14, // 31: veidemann.api.report.v1.Report.ListJobExecutions:output_type -> veidemann.api.frontier.v1.JobExecutionStatus
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_report_v1_report_proto_init() }
func file_report_v1_report_proto_init() {
	if File_report_v1_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_report_v1_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlLogListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_v1_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageLogListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_v1_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteDbQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_v1_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteDbQueryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_v1_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_v1_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlExecutionsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_v1_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobExecutionsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_report_v1_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_report_v1_report_proto_goTypes,
		DependencyIndexes: file_report_v1_report_proto_depIdxs,
		MessageInfos:      file_report_v1_report_proto_msgTypes,
	}.Build()
	File_report_v1_report_proto = out.File
	file_report_v1_report_proto_rawDesc = nil
	file_report_v1_report_proto_goTypes = nil
	file_report_v1_report_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportClient interface {
	// List crawl logs
	ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Report_ListCrawlLogsClient, error)
	// Count crawl logs objects
	CountCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// List page logs
	ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Report_ListPageLogsClient, error)
	// Count page logs objects
	CountPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// Execute a query against the database
	ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (Report_ExecuteDbQueryClient, error)
	// List a set of crawl executions
	ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (Report_ListExecutionsClient, error)
	// List a set of job executions
	ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (Report_ListJobExecutionsClient, error)
}

type reportClient struct {
	cc grpc.ClientConnInterface
}

func NewReportClient(cc grpc.ClientConnInterface) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Report_ListCrawlLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[0], "/veidemann.api.report.v1.Report/ListCrawlLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListCrawlLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListCrawlLogsClient interface {
	Recv() (*v1.CrawlLog, error)
	grpc.ClientStream
}

type reportListCrawlLogsClient struct {
	grpc.ClientStream
}

func (x *reportListCrawlLogsClient) Recv() (*v1.CrawlLog, error) {
	m := new(v1.CrawlLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) CountCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.report.v1.Report/CountCrawlLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Report_ListPageLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[1], "/veidemann.api.report.v1.Report/ListPageLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListPageLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListPageLogsClient interface {
	Recv() (*v1.PageLog, error)
	grpc.ClientStream
}

type reportListPageLogsClient struct {
	grpc.ClientStream
}

func (x *reportListPageLogsClient) Recv() (*v1.PageLog, error) {
	m := new(v1.PageLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) CountPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.report.v1.Report/CountPageLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (Report_ExecuteDbQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[2], "/veidemann.api.report.v1.Report/ExecuteDbQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportExecuteDbQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ExecuteDbQueryClient interface {
	Recv() (*ExecuteDbQueryReply, error)
	grpc.ClientStream
}

type reportExecuteDbQueryClient struct {
	grpc.ClientStream
}

func (x *reportExecuteDbQueryClient) Recv() (*ExecuteDbQueryReply, error) {
	m := new(ExecuteDbQueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (Report_ListExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[3], "/veidemann.api.report.v1.Report/ListExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListExecutionsClient interface {
	Recv() (*v1.CrawlExecutionStatus, error)
	grpc.ClientStream
}

type reportListExecutionsClient struct {
	grpc.ClientStream
}

func (x *reportListExecutionsClient) Recv() (*v1.CrawlExecutionStatus, error) {
	m := new(v1.CrawlExecutionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (Report_ListJobExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[4], "/veidemann.api.report.v1.Report/ListJobExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListJobExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListJobExecutionsClient interface {
	Recv() (*v1.JobExecutionStatus, error)
	grpc.ClientStream
}

type reportListJobExecutionsClient struct {
	grpc.ClientStream
}

func (x *reportListJobExecutionsClient) Recv() (*v1.JobExecutionStatus, error) {
	m := new(v1.JobExecutionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReportServer is the server API for Report service.
type ReportServer interface {
	// List crawl logs
	ListCrawlLogs(*CrawlLogListRequest, Report_ListCrawlLogsServer) error
	// Count crawl logs objects
	CountCrawlLogs(context.Context, *CrawlLogListRequest) (*ListCountResponse, error)
	// List page logs
	ListPageLogs(*PageLogListRequest, Report_ListPageLogsServer) error
	// Count page logs objects
	CountPageLogs(context.Context, *PageLogListRequest) (*ListCountResponse, error)
	// Execute a query against the database
	ExecuteDbQuery(*ExecuteDbQueryRequest, Report_ExecuteDbQueryServer) error
	// List a set of crawl executions
	ListExecutions(*CrawlExecutionsListRequest, Report_ListExecutionsServer) error
	// List a set of job executions
	ListJobExecutions(*JobExecutionsListRequest, Report_ListJobExecutionsServer) error
}

// UnimplementedReportServer can be embedded to have forward compatible implementations.
type UnimplementedReportServer struct {
}

func (*UnimplementedReportServer) ListCrawlLogs(*CrawlLogListRequest, Report_ListCrawlLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCrawlLogs not implemented")
}
func (*UnimplementedReportServer) CountCrawlLogs(context.Context, *CrawlLogListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCrawlLogs not implemented")
}
func (*UnimplementedReportServer) ListPageLogs(*PageLogListRequest, Report_ListPageLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPageLogs not implemented")
}
func (*UnimplementedReportServer) CountPageLogs(context.Context, *PageLogListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPageLogs not implemented")
}
func (*UnimplementedReportServer) ExecuteDbQuery(*ExecuteDbQueryRequest, Report_ExecuteDbQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteDbQuery not implemented")
}
func (*UnimplementedReportServer) ListExecutions(*CrawlExecutionsListRequest, Report_ListExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListExecutions not implemented")
}
func (*UnimplementedReportServer) ListJobExecutions(*JobExecutionsListRequest, Report_ListJobExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListJobExecutions not implemented")
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_ListCrawlLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListCrawlLogs(m, &reportListCrawlLogsServer{stream})
}

type Report_ListCrawlLogsServer interface {
	Send(*v1.CrawlLog) error
	grpc.ServerStream
}

type reportListCrawlLogsServer struct {
	grpc.ServerStream
}

func (x *reportListCrawlLogsServer) Send(m *v1.CrawlLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_CountCrawlLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).CountCrawlLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.report.v1.Report/CountCrawlLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).CountCrawlLogs(ctx, req.(*CrawlLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ListPageLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListPageLogs(m, &reportListPageLogsServer{stream})
}

type Report_ListPageLogsServer interface {
	Send(*v1.PageLog) error
	grpc.ServerStream
}

type reportListPageLogsServer struct {
	grpc.ServerStream
}

func (x *reportListPageLogsServer) Send(m *v1.PageLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_CountPageLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).CountPageLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.report.v1.Report/CountPageLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).CountPageLogs(ctx, req.(*PageLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ExecuteDbQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteDbQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ExecuteDbQuery(m, &reportExecuteDbQueryServer{stream})
}

type Report_ExecuteDbQueryServer interface {
	Send(*ExecuteDbQueryReply) error
	grpc.ServerStream
}

type reportExecuteDbQueryServer struct {
	grpc.ServerStream
}

func (x *reportExecuteDbQueryServer) Send(m *ExecuteDbQueryReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_ListExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListExecutions(m, &reportListExecutionsServer{stream})
}

type Report_ListExecutionsServer interface {
	Send(*v1.CrawlExecutionStatus) error
	grpc.ServerStream
}

type reportListExecutionsServer struct {
	grpc.ServerStream
}

func (x *reportListExecutionsServer) Send(m *v1.CrawlExecutionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_ListJobExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListJobExecutions(m, &reportListJobExecutionsServer{stream})
}

type Report_ListJobExecutionsServer interface {
	Send(*v1.JobExecutionStatus) error
	grpc.ServerStream
}

type reportListJobExecutionsServer struct {
	grpc.ServerStream
}

func (x *reportListJobExecutionsServer) Send(m *v1.JobExecutionStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.report.v1.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCrawlLogs",
			Handler:    _Report_CountCrawlLogs_Handler,
		},
		{
			MethodName: "CountPageLogs",
			Handler:    _Report_CountPageLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCrawlLogs",
			Handler:       _Report_ListCrawlLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPageLogs",
			Handler:       _Report_ListPageLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteDbQuery",
			Handler:       _Report_ExecuteDbQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListExecutions",
			Handler:       _Report_ListExecutions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListJobExecutions",
			Handler:       _Report_ListJobExecutions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "report/v1/report.proto",
}
