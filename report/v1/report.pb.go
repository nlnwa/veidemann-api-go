// Code generated by protoc-gen-go. DO NOT EDIT.
// source: report/v1/report.proto

package report

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v11 "github.com/nlnwa/veidemann-api-go/commons/v1"
	v1 "github.com/nlnwa/veidemann-api-go/frontier/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Specification of which entities to get.
type CrawlLogListRequest struct {
	// Select objects by one or more id's
	WarcId               []string       `protobuf:"bytes,2,rep,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	QueryTemplate        *v1.CrawlLog   `protobuf:"bytes,5,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask            *v11.FieldMask `protobuf:"bytes,6,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask   *v11.FieldMask `protobuf:"bytes,7,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath          string         `protobuf:"bytes,8,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending      bool           `protobuf:"varint,9,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch                bool           `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize             int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset               int32          `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CrawlLogListRequest) Reset()         { *m = CrawlLogListRequest{} }
func (m *CrawlLogListRequest) String() string { return proto.CompactTextString(m) }
func (*CrawlLogListRequest) ProtoMessage()    {}
func (*CrawlLogListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_722307953bda848c, []int{0}
}

func (m *CrawlLogListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlLogListRequest.Unmarshal(m, b)
}
func (m *CrawlLogListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlLogListRequest.Marshal(b, m, deterministic)
}
func (m *CrawlLogListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlLogListRequest.Merge(m, src)
}
func (m *CrawlLogListRequest) XXX_Size() int {
	return xxx_messageInfo_CrawlLogListRequest.Size(m)
}
func (m *CrawlLogListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlLogListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlLogListRequest proto.InternalMessageInfo

func (m *CrawlLogListRequest) GetWarcId() []string {
	if m != nil {
		return m.WarcId
	}
	return nil
}

func (m *CrawlLogListRequest) GetQueryTemplate() *v1.CrawlLog {
	if m != nil {
		return m.QueryTemplate
	}
	return nil
}

func (m *CrawlLogListRequest) GetQueryMask() *v11.FieldMask {
	if m != nil {
		return m.QueryMask
	}
	return nil
}

func (m *CrawlLogListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if m != nil {
		return m.ReturnedFieldsMask
	}
	return nil
}

func (m *CrawlLogListRequest) GetOrderByPath() string {
	if m != nil {
		return m.OrderByPath
	}
	return ""
}

func (m *CrawlLogListRequest) GetOrderDescending() bool {
	if m != nil {
		return m.OrderDescending
	}
	return false
}

func (m *CrawlLogListRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *CrawlLogListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlLogListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type PageLogListRequest struct {
	// Select objects by one or more id's
	WarcId               []string       `protobuf:"bytes,2,rep,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	QueryTemplate        *v1.PageLog    `protobuf:"bytes,5,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask            *v11.FieldMask `protobuf:"bytes,6,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask   *v11.FieldMask `protobuf:"bytes,7,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath          string         `protobuf:"bytes,8,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending      bool           `protobuf:"varint,9,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch                bool           `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize             int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset               int32          `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PageLogListRequest) Reset()         { *m = PageLogListRequest{} }
func (m *PageLogListRequest) String() string { return proto.CompactTextString(m) }
func (*PageLogListRequest) ProtoMessage()    {}
func (*PageLogListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_722307953bda848c, []int{1}
}

func (m *PageLogListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageLogListRequest.Unmarshal(m, b)
}
func (m *PageLogListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageLogListRequest.Marshal(b, m, deterministic)
}
func (m *PageLogListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageLogListRequest.Merge(m, src)
}
func (m *PageLogListRequest) XXX_Size() int {
	return xxx_messageInfo_PageLogListRequest.Size(m)
}
func (m *PageLogListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PageLogListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PageLogListRequest proto.InternalMessageInfo

func (m *PageLogListRequest) GetWarcId() []string {
	if m != nil {
		return m.WarcId
	}
	return nil
}

func (m *PageLogListRequest) GetQueryTemplate() *v1.PageLog {
	if m != nil {
		return m.QueryTemplate
	}
	return nil
}

func (m *PageLogListRequest) GetQueryMask() *v11.FieldMask {
	if m != nil {
		return m.QueryMask
	}
	return nil
}

func (m *PageLogListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if m != nil {
		return m.ReturnedFieldsMask
	}
	return nil
}

func (m *PageLogListRequest) GetOrderByPath() string {
	if m != nil {
		return m.OrderByPath
	}
	return ""
}

func (m *PageLogListRequest) GetOrderDescending() bool {
	if m != nil {
		return m.OrderDescending
	}
	return false
}

func (m *PageLogListRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *PageLogListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageLogListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ExecuteDbQueryRequest struct {
	// The query to execute
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Maximum number of rows to return. A limit of -1 indicates no limit. If unset or zero, use default limit.
	Limit                int32    `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteDbQueryRequest) Reset()         { *m = ExecuteDbQueryRequest{} }
func (m *ExecuteDbQueryRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteDbQueryRequest) ProtoMessage()    {}
func (*ExecuteDbQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_722307953bda848c, []int{2}
}

func (m *ExecuteDbQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteDbQueryRequest.Unmarshal(m, b)
}
func (m *ExecuteDbQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteDbQueryRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteDbQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteDbQueryRequest.Merge(m, src)
}
func (m *ExecuteDbQueryRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteDbQueryRequest.Size(m)
}
func (m *ExecuteDbQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteDbQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteDbQueryRequest proto.InternalMessageInfo

func (m *ExecuteDbQueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ExecuteDbQueryRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ExecuteDbQueryReply struct {
	Record               string   `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteDbQueryReply) Reset()         { *m = ExecuteDbQueryReply{} }
func (m *ExecuteDbQueryReply) String() string { return proto.CompactTextString(m) }
func (*ExecuteDbQueryReply) ProtoMessage()    {}
func (*ExecuteDbQueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_722307953bda848c, []int{3}
}

func (m *ExecuteDbQueryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteDbQueryReply.Unmarshal(m, b)
}
func (m *ExecuteDbQueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteDbQueryReply.Marshal(b, m, deterministic)
}
func (m *ExecuteDbQueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteDbQueryReply.Merge(m, src)
}
func (m *ExecuteDbQueryReply) XXX_Size() int {
	return xxx_messageInfo_ExecuteDbQueryReply.Size(m)
}
func (m *ExecuteDbQueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteDbQueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteDbQueryReply proto.InternalMessageInfo

func (m *ExecuteDbQueryReply) GetRecord() string {
	if m != nil {
		return m.Record
	}
	return ""
}

type ListCountResponse struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Approximate          bool     `protobuf:"varint,2,opt,name=approximate,proto3" json:"approximate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCountResponse) Reset()         { *m = ListCountResponse{} }
func (m *ListCountResponse) String() string { return proto.CompactTextString(m) }
func (*ListCountResponse) ProtoMessage()    {}
func (*ListCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_722307953bda848c, []int{4}
}

func (m *ListCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCountResponse.Unmarshal(m, b)
}
func (m *ListCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCountResponse.Marshal(b, m, deterministic)
}
func (m *ListCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountResponse.Merge(m, src)
}
func (m *ListCountResponse) XXX_Size() int {
	return xxx_messageInfo_ListCountResponse.Size(m)
}
func (m *ListCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountResponse proto.InternalMessageInfo

func (m *ListCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListCountResponse) GetApproximate() bool {
	if m != nil {
		return m.Approximate
	}
	return false
}

type CrawlExecutionsListRequest struct {
	// Select objects by one or more id's
	Id                   []string                        `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	State                []v1.CrawlExecutionStatus_State `protobuf:"varint,2,rep,packed,name=state,proto3,enum=veidemann.api.frontier.v1.CrawlExecutionStatus_State" json:"state,omitempty"`
	StartTimeFrom        *timestamp.Timestamp            `protobuf:"bytes,3,opt,name=start_time_from,json=startTimeFrom,proto3" json:"start_time_from,omitempty"`
	StartTimeTo          *timestamp.Timestamp            `protobuf:"bytes,4,opt,name=start_time_to,json=startTimeTo,proto3" json:"start_time_to,omitempty"`
	HasError             bool                            `protobuf:"varint,5,opt,name=has_error,json=hasError,proto3" json:"has_error,omitempty"`
	QueryTemplate        *v1.CrawlExecutionStatus        `protobuf:"bytes,6,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask            *v11.FieldMask                  `protobuf:"bytes,7,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask   *v11.FieldMask                  `protobuf:"bytes,8,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath          string                          `protobuf:"bytes,9,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending      bool                            `protobuf:"varint,10,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch                bool                            `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize             int32                           `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset               int32                           `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CrawlExecutionsListRequest) Reset()         { *m = CrawlExecutionsListRequest{} }
func (m *CrawlExecutionsListRequest) String() string { return proto.CompactTextString(m) }
func (*CrawlExecutionsListRequest) ProtoMessage()    {}
func (*CrawlExecutionsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_722307953bda848c, []int{5}
}

func (m *CrawlExecutionsListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlExecutionsListRequest.Unmarshal(m, b)
}
func (m *CrawlExecutionsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlExecutionsListRequest.Marshal(b, m, deterministic)
}
func (m *CrawlExecutionsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlExecutionsListRequest.Merge(m, src)
}
func (m *CrawlExecutionsListRequest) XXX_Size() int {
	return xxx_messageInfo_CrawlExecutionsListRequest.Size(m)
}
func (m *CrawlExecutionsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlExecutionsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlExecutionsListRequest proto.InternalMessageInfo

func (m *CrawlExecutionsListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CrawlExecutionsListRequest) GetState() []v1.CrawlExecutionStatus_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CrawlExecutionsListRequest) GetStartTimeFrom() *timestamp.Timestamp {
	if m != nil {
		return m.StartTimeFrom
	}
	return nil
}

func (m *CrawlExecutionsListRequest) GetStartTimeTo() *timestamp.Timestamp {
	if m != nil {
		return m.StartTimeTo
	}
	return nil
}

func (m *CrawlExecutionsListRequest) GetHasError() bool {
	if m != nil {
		return m.HasError
	}
	return false
}

func (m *CrawlExecutionsListRequest) GetQueryTemplate() *v1.CrawlExecutionStatus {
	if m != nil {
		return m.QueryTemplate
	}
	return nil
}

func (m *CrawlExecutionsListRequest) GetQueryMask() *v11.FieldMask {
	if m != nil {
		return m.QueryMask
	}
	return nil
}

func (m *CrawlExecutionsListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if m != nil {
		return m.ReturnedFieldsMask
	}
	return nil
}

func (m *CrawlExecutionsListRequest) GetOrderByPath() string {
	if m != nil {
		return m.OrderByPath
	}
	return ""
}

func (m *CrawlExecutionsListRequest) GetOrderDescending() bool {
	if m != nil {
		return m.OrderDescending
	}
	return false
}

func (m *CrawlExecutionsListRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *CrawlExecutionsListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlExecutionsListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type JobExecutionsListRequest struct {
	// Select objects by one or more id's
	Id                   []string                      `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	State                []v1.JobExecutionStatus_State `protobuf:"varint,2,rep,packed,name=state,proto3,enum=veidemann.api.frontier.v1.JobExecutionStatus_State" json:"state,omitempty"`
	StartTimeFrom        *timestamp.Timestamp          `protobuf:"bytes,3,opt,name=start_time_from,json=startTimeFrom,proto3" json:"start_time_from,omitempty"`
	StartTimeTo          *timestamp.Timestamp          `protobuf:"bytes,4,opt,name=start_time_to,json=startTimeTo,proto3" json:"start_time_to,omitempty"`
	QueryTemplate        *v1.JobExecutionStatus        `protobuf:"bytes,6,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask            *v11.FieldMask                `protobuf:"bytes,7,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask   *v11.FieldMask                `protobuf:"bytes,8,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	OrderByPath          string                        `protobuf:"bytes,9,opt,name=order_by_path,json=orderByPath,proto3" json:"order_by_path,omitempty"`
	OrderDescending      bool                          `protobuf:"varint,10,opt,name=order_descending,json=orderDescending,proto3" json:"order_descending,omitempty"`
	Watch                bool                          `protobuf:"varint,13,opt,name=watch,proto3" json:"watch,omitempty"`
	PageSize             int32                         `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset               int32                         `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *JobExecutionsListRequest) Reset()         { *m = JobExecutionsListRequest{} }
func (m *JobExecutionsListRequest) String() string { return proto.CompactTextString(m) }
func (*JobExecutionsListRequest) ProtoMessage()    {}
func (*JobExecutionsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_722307953bda848c, []int{6}
}

func (m *JobExecutionsListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobExecutionsListRequest.Unmarshal(m, b)
}
func (m *JobExecutionsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobExecutionsListRequest.Marshal(b, m, deterministic)
}
func (m *JobExecutionsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobExecutionsListRequest.Merge(m, src)
}
func (m *JobExecutionsListRequest) XXX_Size() int {
	return xxx_messageInfo_JobExecutionsListRequest.Size(m)
}
func (m *JobExecutionsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobExecutionsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobExecutionsListRequest proto.InternalMessageInfo

func (m *JobExecutionsListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *JobExecutionsListRequest) GetState() []v1.JobExecutionStatus_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *JobExecutionsListRequest) GetStartTimeFrom() *timestamp.Timestamp {
	if m != nil {
		return m.StartTimeFrom
	}
	return nil
}

func (m *JobExecutionsListRequest) GetStartTimeTo() *timestamp.Timestamp {
	if m != nil {
		return m.StartTimeTo
	}
	return nil
}

func (m *JobExecutionsListRequest) GetQueryTemplate() *v1.JobExecutionStatus {
	if m != nil {
		return m.QueryTemplate
	}
	return nil
}

func (m *JobExecutionsListRequest) GetQueryMask() *v11.FieldMask {
	if m != nil {
		return m.QueryMask
	}
	return nil
}

func (m *JobExecutionsListRequest) GetReturnedFieldsMask() *v11.FieldMask {
	if m != nil {
		return m.ReturnedFieldsMask
	}
	return nil
}

func (m *JobExecutionsListRequest) GetOrderByPath() string {
	if m != nil {
		return m.OrderByPath
	}
	return ""
}

func (m *JobExecutionsListRequest) GetOrderDescending() bool {
	if m != nil {
		return m.OrderDescending
	}
	return false
}

func (m *JobExecutionsListRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *JobExecutionsListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *JobExecutionsListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*CrawlLogListRequest)(nil), "veidemann.api.report.v1.CrawlLogListRequest")
	proto.RegisterType((*PageLogListRequest)(nil), "veidemann.api.report.v1.PageLogListRequest")
	proto.RegisterType((*ExecuteDbQueryRequest)(nil), "veidemann.api.report.v1.ExecuteDbQueryRequest")
	proto.RegisterType((*ExecuteDbQueryReply)(nil), "veidemann.api.report.v1.ExecuteDbQueryReply")
	proto.RegisterType((*ListCountResponse)(nil), "veidemann.api.report.v1.ListCountResponse")
	proto.RegisterType((*CrawlExecutionsListRequest)(nil), "veidemann.api.report.v1.CrawlExecutionsListRequest")
	proto.RegisterType((*JobExecutionsListRequest)(nil), "veidemann.api.report.v1.JobExecutionsListRequest")
}

func init() { proto.RegisterFile("report/v1/report.proto", fileDescriptor_722307953bda848c) }

var fileDescriptor_722307953bda848c = []byte{
	// 876 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x51, 0x73, 0xdb, 0x44,
	0x10, 0xae, 0x63, 0xec, 0xd8, 0x1b, 0xec, 0xc0, 0x35, 0xb4, 0x1a, 0xf5, 0x01, 0x23, 0x5e, 0x0c,
	0x34, 0x32, 0x49, 0x86, 0x27, 0x66, 0x78, 0x70, 0xda, 0xce, 0xa4, 0x2d, 0x33, 0x41, 0x09, 0x3c,
	0xf0, 0xa2, 0x39, 0x4b, 0x6b, 0xfb, 0xa8, 0xa4, 0x53, 0xef, 0x4e, 0x4e, 0x9d, 0x67, 0x7e, 0x05,
	0x7f, 0x80, 0x27, 0x86, 0xbf, 0xc8, 0xdc, 0x9d, 0x6c, 0x12, 0x62, 0xa5, 0x76, 0x09, 0x33, 0x3c,
	0xf4, 0xc9, 0xb7, 0x7b, 0xb7, 0xdf, 0xde, 0x6a, 0x77, 0xbf, 0x5b, 0xc3, 0x03, 0x81, 0x39, 0x17,
	0x6a, 0x30, 0x3b, 0x18, 0xd8, 0x95, 0x9f, 0x0b, 0xae, 0x38, 0x79, 0x38, 0x43, 0x16, 0x63, 0x4a,
	0xb3, 0xcc, 0xa7, 0x39, 0xf3, 0xcb, 0xbd, 0xd9, 0x81, 0xeb, 0x46, 0x3c, 0x4d, 0x79, 0x26, 0xad,
	0x85, 0xe4, 0x85, 0x88, 0x50, 0x5a, 0x23, 0xf7, 0xd1, 0x58, 0xf0, 0x4c, 0x31, 0x14, 0xab, 0x36,
	0x3f, 0x9d, 0x70, 0x3e, 0x49, 0x70, 0x60, 0xa4, 0x51, 0x31, 0x1e, 0x28, 0x96, 0xa2, 0x54, 0x34,
	0xcd, 0xed, 0x01, 0xef, 0xcf, 0x3a, 0xdc, 0x3f, 0x16, 0xf4, 0x22, 0x79, 0xc9, 0x27, 0x2f, 0x99,
	0x54, 0x01, 0xbe, 0x2e, 0x50, 0x2a, 0xf2, 0x10, 0xb6, 0x2f, 0xa8, 0x88, 0x42, 0x16, 0x3b, 0x5b,
	0xbd, 0x7a, 0xbf, 0x1d, 0x34, 0xb5, 0x78, 0x12, 0x93, 0xe7, 0xd0, 0x7d, 0x5d, 0xa0, 0x98, 0x87,
	0x0a, 0xd3, 0x3c, 0xa1, 0x0a, 0x9d, 0x46, 0xaf, 0xd6, 0xdf, 0x39, 0xfc, 0xdc, 0xbf, 0x7e, 0xf9,
	0xc5, 0xad, 0xfc, 0xd9, 0x81, 0xbf, 0x70, 0x10, 0x74, 0x8c, 0xe9, 0x79, 0x69, 0x49, 0x86, 0x00,
	0x16, 0x2b, 0xa5, 0xf2, 0x95, 0xd3, 0x5c, 0x89, 0x53, 0x46, 0xae, 0x61, 0x9e, 0x31, 0x4c, 0xe2,
	0xef, 0xa9, 0x7c, 0x15, 0xb4, 0x8d, 0x99, 0x5e, 0x92, 0x1f, 0x61, 0x4f, 0xa0, 0x2a, 0x44, 0x86,
	0x71, 0x38, 0xd6, 0x07, 0xa4, 0x45, 0xdb, 0x5e, 0x1f, 0x8d, 0x2c, 0x00, 0x8c, 0x4a, 0x1a, 0x58,
	0x0f, 0x3a, 0x5c, 0xc4, 0x28, 0xc2, 0xd1, 0x3c, 0xcc, 0xa9, 0x9a, 0x3a, 0xad, 0x5e, 0xad, 0xdf,
	0x0e, 0x76, 0x8c, 0x72, 0x38, 0x3f, 0xa5, 0x6a, 0x4a, 0xbe, 0x80, 0x8f, 0xec, 0x99, 0x18, 0x65,
	0x84, 0x59, 0xcc, 0xb2, 0x89, 0xd3, 0xee, 0xd5, 0xfa, 0xad, 0x60, 0xd7, 0xe8, 0x9f, 0x2c, 0xd5,
	0x64, 0x0f, 0x1a, 0x17, 0x54, 0x45, 0x53, 0xa7, 0x63, 0xf6, 0xad, 0x40, 0x1e, 0x41, 0x3b, 0xa7,
	0x13, 0x0c, 0x25, 0xbb, 0x44, 0xa7, 0xdb, 0xab, 0xf5, 0x1b, 0x41, 0x4b, 0x2b, 0xce, 0xd8, 0x25,
	0x92, 0x07, 0xd0, 0xe4, 0xe3, 0xb1, 0x44, 0xe5, 0xec, 0x9a, 0x9d, 0x52, 0xf2, 0xfe, 0xa8, 0x03,
	0x39, 0xa5, 0x13, 0x5c, 0x37, 0x61, 0x27, 0x15, 0x09, 0xf3, 0x6e, 0x49, 0x58, 0x89, 0xff, 0x3e,
	0x5f, 0x77, 0x90, 0xaf, 0x63, 0xf8, 0xe4, 0xe9, 0x1b, 0x8c, 0x0a, 0x85, 0x4f, 0x46, 0x3f, 0xe8,
	0xcf, 0xb0, 0xc8, 0xd8, 0x1e, 0x34, 0xcc, 0x67, 0x71, 0x6a, 0xe6, 0xaa, 0x56, 0xd0, 0xda, 0x84,
	0xa5, 0x4c, 0x95, 0xf8, 0x56, 0xf0, 0xf6, 0xe1, 0xfe, 0x3f, 0x41, 0xf2, 0x64, 0xae, 0x7d, 0x0a,
	0x8c, 0xb8, 0x88, 0x4b, 0x8c, 0x52, 0xf2, 0x5e, 0xc0, 0xc7, 0xba, 0x36, 0x8e, 0x79, 0x91, 0xa9,
	0x00, 0x65, 0xce, 0x33, 0x89, 0x1a, 0x39, 0xd2, 0x0a, 0x73, 0xb6, 0x1e, 0x58, 0x81, 0xf4, 0x60,
	0x87, 0xe6, 0xb9, 0xe0, 0x6f, 0x58, 0xaa, 0x6b, 0x63, 0xcb, 0xc4, 0x7b, 0x55, 0xe5, 0xfd, 0xde,
	0x00, 0xd7, 0x74, 0xb0, 0xbd, 0x01, 0xe3, 0x99, 0xbc, 0x5a, 0x78, 0x5d, 0xd8, 0x62, 0xda, 0xbf,
	0xae, 0xb9, 0x2d, 0x16, 0x93, 0x17, 0xd0, 0x90, 0xca, 0x42, 0xd5, 0xfb, 0xdd, 0xc3, 0x6f, 0xde,
	0xc6, 0x0b, 0x4b, 0xd4, 0x33, 0x45, 0x55, 0x21, 0x7d, 0xfd, 0x83, 0x81, 0xc5, 0x20, 0x43, 0xd8,
	0x95, 0x8a, 0x0a, 0x15, 0x6a, 0xde, 0x0a, 0xc7, 0x82, 0xa7, 0x4e, 0xdd, 0x14, 0x8a, 0xeb, 0x5b,
	0x66, 0xf3, 0x17, 0xcc, 0xe6, 0x9f, 0x2f, 0x98, 0x2d, 0xe8, 0x18, 0x13, 0x2d, 0x3f, 0x13, 0x3c,
	0x25, 0xdf, 0x41, 0xe7, 0x0a, 0x86, 0xe2, 0xce, 0x07, 0x6f, 0x45, 0xd8, 0x59, 0x22, 0x9c, 0x73,
	0x9d, 0xf5, 0x29, 0x95, 0x21, 0x0a, 0xc1, 0x85, 0xe9, 0x9d, 0x56, 0xd0, 0x9a, 0x52, 0xf9, 0x54,
	0xcb, 0xe4, 0xa7, 0x1b, 0xdd, 0x65, 0xdb, 0x62, 0xb0, 0x61, 0xd8, 0xb7, 0xb7, 0xda, 0xf6, 0x9d,
	0xb6, 0x5a, 0xeb, 0x8e, 0x5b, 0xad, 0xbd, 0x5e, 0xab, 0xc1, 0x7f, 0xde, 0x6a, 0xbf, 0x36, 0xc0,
	0x79, 0xce, 0x47, 0xeb, 0xd5, 0xe9, 0xc9, 0xf5, 0x3a, 0x3d, 0xba, 0x25, 0x61, 0x57, 0x31, 0xff,
	0xaf, 0x55, 0x7a, 0x5e, 0x51, 0x88, 0xfb, 0x1b, 0xc5, 0xf5, 0xbe, 0x0c, 0xff, 0x7d, 0x19, 0x1e,
	0xfe, 0xd6, 0x84, 0x66, 0x60, 0x66, 0x37, 0x32, 0x86, 0x8e, 0x21, 0xe2, 0x72, 0x00, 0x92, 0xe4,
	0xb1, 0x5f, 0x31, 0xe3, 0xf9, 0x2b, 0xa6, 0x30, 0x77, 0x9d, 0xa1, 0xca, 0xbb, 0xf7, 0x75, 0x8d,
	0x24, 0xd0, 0x35, 0x64, 0xff, 0xae, 0x8e, 0xbe, 0xac, 0x3c, 0x7d, 0xe3, 0x1d, 0xf1, 0xee, 0x91,
	0x08, 0x3e, 0xd4, 0xea, 0x72, 0x4a, 0x90, 0xe4, 0xab, 0x4a, 0xeb, 0x9b, 0x83, 0x8a, 0xbb, 0xc6,
	0xdc, 0x61, 0x42, 0xfa, 0x05, 0x3a, 0xc6, 0xef, 0xbb, 0x79, 0xd9, 0x2c, 0x20, 0x01, 0xdd, 0xeb,
	0xcf, 0x2b, 0xf1, 0x2b, 0xed, 0x57, 0x3e, 0xe6, 0xee, 0xe3, 0xb5, 0xcf, 0xe7, 0xc9, 0xdc, 0xc4,
	0x77, 0x09, 0x5d, 0x7d, 0x95, 0xbf, 0xc9, 0x8a, 0x1c, 0xdd, 0x9e, 0xb2, 0x95, 0xb4, 0xe6, 0x6e,
	0xfa, 0xd0, 0x18, 0xdf, 0x73, 0x3b, 0x1f, 0x5c, 0xe3, 0x4a, 0x72, 0x50, 0xe9, 0xbe, 0x8a, 0x53,
	0xdd, 0xcd, 0xc8, 0x45, 0xbb, 0x1e, 0x4e, 0xe1, 0xb3, 0x8c, 0xfb, 0xd9, 0xc8, 0xcf, 0x32, 0x5a,
	0xe5, 0x70, 0xd8, 0xb1, 0xed, 0x73, 0x86, 0x62, 0xc6, 0x22, 0x3c, 0xad, 0xfd, 0x7c, 0x38, 0x61,
	0x6a, 0x5a, 0x8c, 0x34, 0x3b, 0x0c, 0xb2, 0x24, 0xbb, 0xa0, 0x83, 0xa5, 0xe9, 0x3e, 0xcd, 0xd9,
	0xfe, 0x84, 0x0f, 0x96, 0xff, 0xa9, 0xbe, 0xb5, 0xab, 0x51, 0xd3, 0x50, 0xe6, 0xd1, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xf8, 0x64, 0x9e, 0x9b, 0x6e, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportClient interface {
	// List crawl logs
	ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Report_ListCrawlLogsClient, error)
	// Count crawl logs objects
	CountCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// List page logs
	ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Report_ListPageLogsClient, error)
	// Count page logs objects
	CountPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// Execute a query against the database
	ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (Report_ExecuteDbQueryClient, error)
	// List a set of crawl executions
	ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (Report_ListExecutionsClient, error)
	// List a set of job executions
	ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (Report_ListJobExecutionsClient, error)
}

type reportClient struct {
	cc *grpc.ClientConn
}

func NewReportClient(cc *grpc.ClientConn) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Report_ListCrawlLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[0], "/veidemann.api.report.v1.Report/ListCrawlLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListCrawlLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListCrawlLogsClient interface {
	Recv() (*v1.CrawlLog, error)
	grpc.ClientStream
}

type reportListCrawlLogsClient struct {
	grpc.ClientStream
}

func (x *reportListCrawlLogsClient) Recv() (*v1.CrawlLog, error) {
	m := new(v1.CrawlLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) CountCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.report.v1.Report/CountCrawlLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Report_ListPageLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[1], "/veidemann.api.report.v1.Report/ListPageLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListPageLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListPageLogsClient interface {
	Recv() (*v1.PageLog, error)
	grpc.ClientStream
}

type reportListPageLogsClient struct {
	grpc.ClientStream
}

func (x *reportListPageLogsClient) Recv() (*v1.PageLog, error) {
	m := new(v1.PageLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) CountPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.report.v1.Report/CountPageLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (Report_ExecuteDbQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[2], "/veidemann.api.report.v1.Report/ExecuteDbQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportExecuteDbQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ExecuteDbQueryClient interface {
	Recv() (*ExecuteDbQueryReply, error)
	grpc.ClientStream
}

type reportExecuteDbQueryClient struct {
	grpc.ClientStream
}

func (x *reportExecuteDbQueryClient) Recv() (*ExecuteDbQueryReply, error) {
	m := new(ExecuteDbQueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (Report_ListExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[3], "/veidemann.api.report.v1.Report/ListExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListExecutionsClient interface {
	Recv() (*v1.CrawlExecutionStatus, error)
	grpc.ClientStream
}

type reportListExecutionsClient struct {
	grpc.ClientStream
}

func (x *reportListExecutionsClient) Recv() (*v1.CrawlExecutionStatus, error) {
	m := new(v1.CrawlExecutionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (Report_ListJobExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[4], "/veidemann.api.report.v1.Report/ListJobExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListJobExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListJobExecutionsClient interface {
	Recv() (*v1.JobExecutionStatus, error)
	grpc.ClientStream
}

type reportListJobExecutionsClient struct {
	grpc.ClientStream
}

func (x *reportListJobExecutionsClient) Recv() (*v1.JobExecutionStatus, error) {
	m := new(v1.JobExecutionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReportServer is the server API for Report service.
type ReportServer interface {
	// List crawl logs
	ListCrawlLogs(*CrawlLogListRequest, Report_ListCrawlLogsServer) error
	// Count crawl logs objects
	CountCrawlLogs(context.Context, *CrawlLogListRequest) (*ListCountResponse, error)
	// List page logs
	ListPageLogs(*PageLogListRequest, Report_ListPageLogsServer) error
	// Count page logs objects
	CountPageLogs(context.Context, *PageLogListRequest) (*ListCountResponse, error)
	// Execute a query against the database
	ExecuteDbQuery(*ExecuteDbQueryRequest, Report_ExecuteDbQueryServer) error
	// List a set of crawl executions
	ListExecutions(*CrawlExecutionsListRequest, Report_ListExecutionsServer) error
	// List a set of job executions
	ListJobExecutions(*JobExecutionsListRequest, Report_ListJobExecutionsServer) error
}

// UnimplementedReportServer can be embedded to have forward compatible implementations.
type UnimplementedReportServer struct {
}

func (*UnimplementedReportServer) ListCrawlLogs(req *CrawlLogListRequest, srv Report_ListCrawlLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCrawlLogs not implemented")
}
func (*UnimplementedReportServer) CountCrawlLogs(ctx context.Context, req *CrawlLogListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCrawlLogs not implemented")
}
func (*UnimplementedReportServer) ListPageLogs(req *PageLogListRequest, srv Report_ListPageLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPageLogs not implemented")
}
func (*UnimplementedReportServer) CountPageLogs(ctx context.Context, req *PageLogListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPageLogs not implemented")
}
func (*UnimplementedReportServer) ExecuteDbQuery(req *ExecuteDbQueryRequest, srv Report_ExecuteDbQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteDbQuery not implemented")
}
func (*UnimplementedReportServer) ListExecutions(req *CrawlExecutionsListRequest, srv Report_ListExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListExecutions not implemented")
}
func (*UnimplementedReportServer) ListJobExecutions(req *JobExecutionsListRequest, srv Report_ListJobExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListJobExecutions not implemented")
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_ListCrawlLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListCrawlLogs(m, &reportListCrawlLogsServer{stream})
}

type Report_ListCrawlLogsServer interface {
	Send(*v1.CrawlLog) error
	grpc.ServerStream
}

type reportListCrawlLogsServer struct {
	grpc.ServerStream
}

func (x *reportListCrawlLogsServer) Send(m *v1.CrawlLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_CountCrawlLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).CountCrawlLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.report.v1.Report/CountCrawlLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).CountCrawlLogs(ctx, req.(*CrawlLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ListPageLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListPageLogs(m, &reportListPageLogsServer{stream})
}

type Report_ListPageLogsServer interface {
	Send(*v1.PageLog) error
	grpc.ServerStream
}

type reportListPageLogsServer struct {
	grpc.ServerStream
}

func (x *reportListPageLogsServer) Send(m *v1.PageLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_CountPageLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).CountPageLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.report.v1.Report/CountPageLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).CountPageLogs(ctx, req.(*PageLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ExecuteDbQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteDbQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ExecuteDbQuery(m, &reportExecuteDbQueryServer{stream})
}

type Report_ExecuteDbQueryServer interface {
	Send(*ExecuteDbQueryReply) error
	grpc.ServerStream
}

type reportExecuteDbQueryServer struct {
	grpc.ServerStream
}

func (x *reportExecuteDbQueryServer) Send(m *ExecuteDbQueryReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_ListExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListExecutions(m, &reportListExecutionsServer{stream})
}

type Report_ListExecutionsServer interface {
	Send(*v1.CrawlExecutionStatus) error
	grpc.ServerStream
}

type reportListExecutionsServer struct {
	grpc.ServerStream
}

func (x *reportListExecutionsServer) Send(m *v1.CrawlExecutionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_ListJobExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListJobExecutions(m, &reportListJobExecutionsServer{stream})
}

type Report_ListJobExecutionsServer interface {
	Send(*v1.JobExecutionStatus) error
	grpc.ServerStream
}

type reportListJobExecutionsServer struct {
	grpc.ServerStream
}

func (x *reportListJobExecutionsServer) Send(m *v1.JobExecutionStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.report.v1.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCrawlLogs",
			Handler:    _Report_CountCrawlLogs_Handler,
		},
		{
			MethodName: "CountPageLogs",
			Handler:    _Report_CountPageLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCrawlLogs",
			Handler:       _Report_ListCrawlLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPageLogs",
			Handler:       _Report_ListPageLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteDbQuery",
			Handler:       _Report_ExecuteDbQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListExecutions",
			Handler:       _Report_ListExecutions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListJobExecutions",
			Handler:       _Report_ListJobExecutions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "report/v1/report.proto",
}
