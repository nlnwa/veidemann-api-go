// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package report

import (
	context "context"
	v1 "github.com/nlnwa/veidemann-api-go/frontier/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportClient interface {
	// List crawl logs
	ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Report_ListCrawlLogsClient, error)
	// Count crawl logs objects
	CountCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// List page logs
	ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Report_ListPageLogsClient, error)
	// Count page logs objects
	CountPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// Execute a query against the database
	ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (Report_ExecuteDbQueryClient, error)
	// List a set of crawl executions
	ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (Report_ListExecutionsClient, error)
	// List a set of job executions
	ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (Report_ListJobExecutionsClient, error)
}

type reportClient struct {
	cc grpc.ClientConnInterface
}

func NewReportClient(cc grpc.ClientConnInterface) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Report_ListCrawlLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[0], "/veidemann.api.report.v1.Report/ListCrawlLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListCrawlLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListCrawlLogsClient interface {
	Recv() (*v1.CrawlLog, error)
	grpc.ClientStream
}

type reportListCrawlLogsClient struct {
	grpc.ClientStream
}

func (x *reportListCrawlLogsClient) Recv() (*v1.CrawlLog, error) {
	m := new(v1.CrawlLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) CountCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.report.v1.Report/CountCrawlLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Report_ListPageLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[1], "/veidemann.api.report.v1.Report/ListPageLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListPageLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListPageLogsClient interface {
	Recv() (*v1.PageLog, error)
	grpc.ClientStream
}

type reportListPageLogsClient struct {
	grpc.ClientStream
}

func (x *reportListPageLogsClient) Recv() (*v1.PageLog, error) {
	m := new(v1.PageLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) CountPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.report.v1.Report/CountPageLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (Report_ExecuteDbQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[2], "/veidemann.api.report.v1.Report/ExecuteDbQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportExecuteDbQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ExecuteDbQueryClient interface {
	Recv() (*ExecuteDbQueryReply, error)
	grpc.ClientStream
}

type reportExecuteDbQueryClient struct {
	grpc.ClientStream
}

func (x *reportExecuteDbQueryClient) Recv() (*ExecuteDbQueryReply, error) {
	m := new(ExecuteDbQueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (Report_ListExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[3], "/veidemann.api.report.v1.Report/ListExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListExecutionsClient interface {
	Recv() (*v1.CrawlExecutionStatus, error)
	grpc.ClientStream
}

type reportListExecutionsClient struct {
	grpc.ClientStream
}

func (x *reportListExecutionsClient) Recv() (*v1.CrawlExecutionStatus, error) {
	m := new(v1.CrawlExecutionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportClient) ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (Report_ListJobExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[4], "/veidemann.api.report.v1.Report/ListJobExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportListJobExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_ListJobExecutionsClient interface {
	Recv() (*v1.JobExecutionStatus, error)
	grpc.ClientStream
}

type reportListJobExecutionsClient struct {
	grpc.ClientStream
}

func (x *reportListJobExecutionsClient) Recv() (*v1.JobExecutionStatus, error) {
	m := new(v1.JobExecutionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReportServer is the server API for Report service.
// All implementations must embed UnimplementedReportServer
// for forward compatibility
type ReportServer interface {
	// List crawl logs
	ListCrawlLogs(*CrawlLogListRequest, Report_ListCrawlLogsServer) error
	// Count crawl logs objects
	CountCrawlLogs(context.Context, *CrawlLogListRequest) (*ListCountResponse, error)
	// List page logs
	ListPageLogs(*PageLogListRequest, Report_ListPageLogsServer) error
	// Count page logs objects
	CountPageLogs(context.Context, *PageLogListRequest) (*ListCountResponse, error)
	// Execute a query against the database
	ExecuteDbQuery(*ExecuteDbQueryRequest, Report_ExecuteDbQueryServer) error
	// List a set of crawl executions
	ListExecutions(*CrawlExecutionsListRequest, Report_ListExecutionsServer) error
	// List a set of job executions
	ListJobExecutions(*JobExecutionsListRequest, Report_ListJobExecutionsServer) error
	mustEmbedUnimplementedReportServer()
}

// UnimplementedReportServer must be embedded to have forward compatible implementations.
type UnimplementedReportServer struct {
}

func (UnimplementedReportServer) ListCrawlLogs(*CrawlLogListRequest, Report_ListCrawlLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCrawlLogs not implemented")
}
func (UnimplementedReportServer) CountCrawlLogs(context.Context, *CrawlLogListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCrawlLogs not implemented")
}
func (UnimplementedReportServer) ListPageLogs(*PageLogListRequest, Report_ListPageLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPageLogs not implemented")
}
func (UnimplementedReportServer) CountPageLogs(context.Context, *PageLogListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPageLogs not implemented")
}
func (UnimplementedReportServer) ExecuteDbQuery(*ExecuteDbQueryRequest, Report_ExecuteDbQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteDbQuery not implemented")
}
func (UnimplementedReportServer) ListExecutions(*CrawlExecutionsListRequest, Report_ListExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListExecutions not implemented")
}
func (UnimplementedReportServer) ListJobExecutions(*JobExecutionsListRequest, Report_ListJobExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListJobExecutions not implemented")
}
func (UnimplementedReportServer) mustEmbedUnimplementedReportServer() {}

// UnsafeReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServer will
// result in compilation errors.
type UnsafeReportServer interface {
	mustEmbedUnimplementedReportServer()
}

func RegisterReportServer(s grpc.ServiceRegistrar, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_ListCrawlLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListCrawlLogs(m, &reportListCrawlLogsServer{stream})
}

type Report_ListCrawlLogsServer interface {
	Send(*v1.CrawlLog) error
	grpc.ServerStream
}

type reportListCrawlLogsServer struct {
	grpc.ServerStream
}

func (x *reportListCrawlLogsServer) Send(m *v1.CrawlLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_CountCrawlLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).CountCrawlLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.report.v1.Report/CountCrawlLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).CountCrawlLogs(ctx, req.(*CrawlLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ListPageLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListPageLogs(m, &reportListPageLogsServer{stream})
}

type Report_ListPageLogsServer interface {
	Send(*v1.PageLog) error
	grpc.ServerStream
}

type reportListPageLogsServer struct {
	grpc.ServerStream
}

func (x *reportListPageLogsServer) Send(m *v1.PageLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_CountPageLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).CountPageLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.report.v1.Report/CountPageLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).CountPageLogs(ctx, req.(*PageLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ExecuteDbQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteDbQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ExecuteDbQuery(m, &reportExecuteDbQueryServer{stream})
}

type Report_ExecuteDbQueryServer interface {
	Send(*ExecuteDbQueryReply) error
	grpc.ServerStream
}

type reportExecuteDbQueryServer struct {
	grpc.ServerStream
}

func (x *reportExecuteDbQueryServer) Send(m *ExecuteDbQueryReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_ListExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListExecutions(m, &reportListExecutionsServer{stream})
}

type Report_ListExecutionsServer interface {
	Send(*v1.CrawlExecutionStatus) error
	grpc.ServerStream
}

type reportListExecutionsServer struct {
	grpc.ServerStream
}

func (x *reportListExecutionsServer) Send(m *v1.CrawlExecutionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Report_ListJobExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListJobExecutions(m, &reportListJobExecutionsServer{stream})
}

type Report_ListJobExecutionsServer interface {
	Send(*v1.JobExecutionStatus) error
	grpc.ServerStream
}

type reportListJobExecutionsServer struct {
	grpc.ServerStream
}

func (x *reportListJobExecutionsServer) Send(m *v1.JobExecutionStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.report.v1.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCrawlLogs",
			Handler:    _Report_CountCrawlLogs_Handler,
		},
		{
			MethodName: "CountPageLogs",
			Handler:    _Report_CountPageLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCrawlLogs",
			Handler:       _Report_ListCrawlLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPageLogs",
			Handler:       _Report_ListPageLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteDbQuery",
			Handler:       _Report_ExecuteDbQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListExecutions",
			Handler:       _Report_ListExecutions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListJobExecutions",
			Handler:       _Report_ListJobExecutions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "report/v1/report.proto",
}
