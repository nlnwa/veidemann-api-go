// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ooshandler

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OosHandlerClient is the client API for OosHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OosHandlerClient interface {
	SubmitUri(ctx context.Context, in *SubmitUriRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type oosHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewOosHandlerClient(cc grpc.ClientConnInterface) OosHandlerClient {
	return &oosHandlerClient{cc}
}

func (c *oosHandlerClient) SubmitUri(ctx context.Context, in *SubmitUriRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.ooshandler.v1.OosHandler/SubmitUri", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OosHandlerServer is the server API for OosHandler service.
// All implementations must embed UnimplementedOosHandlerServer
// for forward compatibility
type OosHandlerServer interface {
	SubmitUri(context.Context, *SubmitUriRequest) (*empty.Empty, error)
	mustEmbedUnimplementedOosHandlerServer()
}

// UnimplementedOosHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedOosHandlerServer struct {
}

func (UnimplementedOosHandlerServer) SubmitUri(context.Context, *SubmitUriRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUri not implemented")
}
func (UnimplementedOosHandlerServer) mustEmbedUnimplementedOosHandlerServer() {}

// UnsafeOosHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OosHandlerServer will
// result in compilation errors.
type UnsafeOosHandlerServer interface {
	mustEmbedUnimplementedOosHandlerServer()
}

func RegisterOosHandlerServer(s grpc.ServiceRegistrar, srv OosHandlerServer) {
	s.RegisterService(&_OosHandler_serviceDesc, srv)
}

func _OosHandler_SubmitUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OosHandlerServer).SubmitUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.ooshandler.v1.OosHandler/SubmitUri",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OosHandlerServer).SubmitUri(ctx, req.(*SubmitUriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OosHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.ooshandler.v1.OosHandler",
	HandlerType: (*OosHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitUri",
			Handler:    _OosHandler_SubmitUri_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ooshandler/v1/ooshandler.proto",
}
