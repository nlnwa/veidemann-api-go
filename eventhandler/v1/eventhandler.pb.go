// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eventhandler/v1/eventhandler.proto

package eventhandler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/nlnwa/veidemann-api-go/commons/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListRequest struct {
	// Select objects by one or more id's
	Id                   []string      `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	QueryTemplate        *EventObject  `protobuf:"bytes,2,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryMask            *v1.FieldMask `protobuf:"bytes,3,opt,name=query_mask,json=queryMask,proto3" json:"query_mask,omitempty"`
	ReturnedFieldsMask   *v1.FieldMask `protobuf:"bytes,4,opt,name=returned_fields_mask,json=returnedFieldsMask,proto3" json:"returned_fields_mask,omitempty"`
	PageSize             int32         `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset               int32         `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{0}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListRequest) GetQueryTemplate() *EventObject {
	if m != nil {
		return m.QueryTemplate
	}
	return nil
}

func (m *ListRequest) GetQueryMask() *v1.FieldMask {
	if m != nil {
		return m.QueryMask
	}
	return nil
}

func (m *ListRequest) GetReturnedFieldsMask() *v1.FieldMask {
	if m != nil {
		return m.ReturnedFieldsMask
	}
	return nil
}

func (m *ListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type UpdateRequest struct {
	ListRequest          *ListRequest  `protobuf:"bytes,1,opt,name=list_request,json=listRequest,proto3" json:"list_request,omitempty"`
	UpdateMask           *v1.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	UpdateTemplate       *EventObject  `protobuf:"bytes,4,opt,name=update_template,json=updateTemplate,proto3" json:"update_template,omitempty"`
	Comment              string        `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{1}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetListRequest() *ListRequest {
	if m != nil {
		return m.ListRequest
	}
	return nil
}

func (m *UpdateRequest) GetUpdateMask() *v1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateRequest) GetUpdateTemplate() *EventObject {
	if m != nil {
		return m.UpdateTemplate
	}
	return nil
}

func (m *UpdateRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type SaveRequest struct {
	Object               *EventObject `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Comment              string       `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SaveRequest) Reset()         { *m = SaveRequest{} }
func (m *SaveRequest) String() string { return proto.CompactTextString(m) }
func (*SaveRequest) ProtoMessage()    {}
func (*SaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{2}
}

func (m *SaveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveRequest.Unmarshal(m, b)
}
func (m *SaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveRequest.Marshal(b, m, deterministic)
}
func (m *SaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRequest.Merge(m, src)
}
func (m *SaveRequest) XXX_Size() int {
	return xxx_messageInfo_SaveRequest.Size(m)
}
func (m *SaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRequest proto.InternalMessageInfo

func (m *SaveRequest) GetObject() *EventObject {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *SaveRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type UpdateResponse struct {
	Updated              int64    `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{3}
}

func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type ListCountResponse struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Approximate          bool     `protobuf:"varint,2,opt,name=approximate,proto3" json:"approximate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCountResponse) Reset()         { *m = ListCountResponse{} }
func (m *ListCountResponse) String() string { return proto.CompactTextString(m) }
func (*ListCountResponse) ProtoMessage()    {}
func (*ListCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{4}
}

func (m *ListCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCountResponse.Unmarshal(m, b)
}
func (m *ListCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCountResponse.Marshal(b, m, deterministic)
}
func (m *ListCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountResponse.Merge(m, src)
}
func (m *ListCountResponse) XXX_Size() int {
	return xxx_messageInfo_ListCountResponse.Size(m)
}
func (m *ListCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountResponse proto.InternalMessageInfo

func (m *ListCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListCountResponse) GetApproximate() bool {
	if m != nil {
		return m.Approximate
	}
	return false
}

type DeleteResponse struct {
	Deleted              bool     `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{5}
}

func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResponse.Unmarshal(m, b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteResponse.Size(m)
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type ListLabelRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListLabelRequest) Reset()         { *m = ListLabelRequest{} }
func (m *ListLabelRequest) String() string { return proto.CompactTextString(m) }
func (*ListLabelRequest) ProtoMessage()    {}
func (*ListLabelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{6}
}

func (m *ListLabelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListLabelRequest.Unmarshal(m, b)
}
func (m *ListLabelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListLabelRequest.Marshal(b, m, deterministic)
}
func (m *ListLabelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLabelRequest.Merge(m, src)
}
func (m *ListLabelRequest) XXX_Size() int {
	return xxx_messageInfo_ListLabelRequest.Size(m)
}
func (m *ListLabelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLabelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLabelRequest proto.InternalMessageInfo

func (m *ListLabelRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ListLabelResponse struct {
	Label                []string `protobuf:"bytes,1,rep,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListLabelResponse) Reset()         { *m = ListLabelResponse{} }
func (m *ListLabelResponse) String() string { return proto.CompactTextString(m) }
func (*ListLabelResponse) ProtoMessage()    {}
func (*ListLabelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b586301d1f2a5f3, []int{7}
}

func (m *ListLabelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListLabelResponse.Unmarshal(m, b)
}
func (m *ListLabelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListLabelResponse.Marshal(b, m, deterministic)
}
func (m *ListLabelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLabelResponse.Merge(m, src)
}
func (m *ListLabelResponse) XXX_Size() int {
	return xxx_messageInfo_ListLabelResponse.Size(m)
}
func (m *ListLabelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLabelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLabelResponse proto.InternalMessageInfo

func (m *ListLabelResponse) GetLabel() []string {
	if m != nil {
		return m.Label
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "veidemann.api.eventhandler.v1.ListRequest")
	proto.RegisterType((*UpdateRequest)(nil), "veidemann.api.eventhandler.v1.UpdateRequest")
	proto.RegisterType((*SaveRequest)(nil), "veidemann.api.eventhandler.v1.SaveRequest")
	proto.RegisterType((*UpdateResponse)(nil), "veidemann.api.eventhandler.v1.UpdateResponse")
	proto.RegisterType((*ListCountResponse)(nil), "veidemann.api.eventhandler.v1.ListCountResponse")
	proto.RegisterType((*DeleteResponse)(nil), "veidemann.api.eventhandler.v1.DeleteResponse")
	proto.RegisterType((*ListLabelRequest)(nil), "veidemann.api.eventhandler.v1.ListLabelRequest")
	proto.RegisterType((*ListLabelResponse)(nil), "veidemann.api.eventhandler.v1.ListLabelResponse")
}

func init() { proto.RegisterFile("eventhandler/v1/eventhandler.proto", fileDescriptor_4b586301d1f2a5f3) }

var fileDescriptor_4b586301d1f2a5f3 = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xad, 0xd3, 0x36, 0x4d, 0x26, 0x6d, 0xfa, 0x75, 0xbf, 0x0a, 0x59, 0x41, 0x88, 0xc8, 0x48,
	0x34, 0x54, 0xd4, 0x69, 0xcb, 0x25, 0x12, 0x17, 0xa1, 0xfc, 0x48, 0xb4, 0x02, 0x1c, 0x7a, 0xc3,
	0x4d, 0xb4, 0x89, 0x27, 0xa9, 0x89, 0xb3, 0x76, 0xbd, 0xeb, 0x50, 0x7a, 0xc5, 0x3b, 0xf0, 0x04,
	0xbc, 0x09, 0x8f, 0x86, 0xbc, 0x6b, 0x9b, 0x75, 0x85, 0x5a, 0x9b, 0x3b, 0xcf, 0x78, 0xf6, 0x9c,
	0xd9, 0x73, 0x66, 0x6c, 0xb0, 0x70, 0x89, 0x4c, 0x5c, 0x50, 0xe6, 0xfa, 0x18, 0xf5, 0x97, 0x47,
	0x7d, 0x3d, 0xb6, 0xc3, 0x28, 0x10, 0x01, 0x79, 0xb0, 0x44, 0xcf, 0xc5, 0x05, 0x65, 0xcc, 0xa6,
	0xa1, 0x67, 0x17, 0x2a, 0x96, 0x47, 0x9d, 0x87, 0x37, 0x21, 0x22, 0xe4, 0x41, 0x1c, 0x4d, 0x90,
	0xab, 0xf3, 0x9d, 0xce, 0x24, 0x58, 0x2c, 0x02, 0xc6, 0xff, 0xf2, 0xce, 0xfa, 0x55, 0x83, 0xd6,
	0xa9, 0xc7, 0x85, 0x83, 0x97, 0x31, 0x72, 0x41, 0xda, 0x50, 0xf3, 0x5c, 0xd3, 0xe8, 0xae, 0xf6,
	0x9a, 0x4e, 0xcd, 0x73, 0xc9, 0x47, 0x68, 0x5f, 0xc6, 0x18, 0x7d, 0x1b, 0x09, 0x5c, 0x84, 0x3e,
	0x15, 0x68, 0xd6, 0xba, 0x46, 0xaf, 0x75, 0xbc, 0x6f, 0xdf, 0xda, 0x94, 0xfd, 0x2a, 0x89, 0xdf,
	0x8f, 0xbf, 0xe0, 0x44, 0x38, 0x5b, 0x12, 0xe1, 0x53, 0x0a, 0x40, 0x06, 0x00, 0x0a, 0x72, 0x41,
	0xf9, 0xdc, 0x5c, 0x95, 0x70, 0x8f, 0x6e, 0xc0, 0xa5, 0x1d, 0x27, 0x48, 0xaf, 0x3d, 0xf4, 0xdd,
	0x33, 0xca, 0xe7, 0x4e, 0x53, 0x1e, 0x4b, 0x1e, 0xc9, 0x39, 0xec, 0x46, 0x28, 0xe2, 0x88, 0xa1,
	0x3b, 0x9a, 0x26, 0x05, 0x5c, 0xa1, 0xad, 0x95, 0x47, 0x23, 0x19, 0x80, 0x4c, 0x71, 0x09, 0x7b,
	0x1f, 0x9a, 0x21, 0x9d, 0xe1, 0x88, 0x7b, 0xd7, 0x68, 0x6e, 0x74, 0x8d, 0xde, 0xba, 0xd3, 0x48,
	0x12, 0x43, 0xef, 0x1a, 0xc9, 0x3d, 0xa8, 0x07, 0xd3, 0x29, 0x47, 0x61, 0x36, 0xe4, 0x9b, 0x34,
	0xb2, 0x7e, 0xd4, 0x60, 0xeb, 0x3c, 0x74, 0xa9, 0xc0, 0x4c, 0xc4, 0x33, 0xd8, 0xf4, 0x3d, 0x2e,
	0x46, 0x91, 0x8a, 0x4d, 0xa3, 0x94, 0x64, 0x9a, 0x0d, 0x4e, 0xcb, 0xd7, 0x3c, 0x39, 0x81, 0x56,
	0x2c, 0xf1, 0x2b, 0x2b, 0x06, 0xea, 0x9c, 0xbc, 0xdb, 0x10, 0xb6, 0x53, 0x94, 0xdc, 0xca, 0xb5,
	0xca, 0x56, 0xb6, 0x15, 0x44, 0xee, 0xa5, 0x09, 0x1b, 0x09, 0x31, 0x32, 0x61, 0xae, 0x77, 0x8d,
	0x5e, 0xd3, 0xc9, 0x42, 0x6b, 0x0e, 0xad, 0x21, 0x5d, 0xe6, 0x92, 0x0c, 0xa0, 0x1e, 0x48, 0x88,
	0x92, 0x62, 0xe8, 0xa4, 0xe9, 0x49, 0x9d, 0xac, 0x56, 0x24, 0xdb, 0x87, 0x76, 0xe6, 0x00, 0x0f,
	0x03, 0xc6, 0x65, 0x63, 0xaa, 0x55, 0x57, 0x12, 0xae, 0x3a, 0x59, 0x68, 0xbd, 0x83, 0x9d, 0x44,
	0xe9, 0x97, 0x41, 0xcc, 0x44, 0x5e, 0xbe, 0x0b, 0xeb, 0x93, 0x24, 0x91, 0x16, 0xab, 0x80, 0x74,
	0xa1, 0x45, 0xc3, 0x30, 0x0a, 0xae, 0xbc, 0x45, 0x36, 0xf9, 0x0d, 0x47, 0x4f, 0x25, 0xc4, 0x27,
	0xe8, 0x63, 0x91, 0xd8, 0x95, 0x19, 0x45, 0xdc, 0x70, 0xb2, 0xd0, 0x7a, 0x0c, 0xff, 0x25, 0xc4,
	0xa7, 0x74, 0x8c, 0x7e, 0x26, 0x0b, 0x81, 0x35, 0x81, 0x57, 0x8a, 0xb6, 0xe9, 0xc8, 0x67, 0xeb,
	0x89, 0x6a, 0x30, 0xad, 0xfb, 0xd3, 0xa0, 0x9f, 0x24, 0xd2, 0xd5, 0x54, 0xc1, 0xf1, 0xcf, 0x3a,
	0x6c, 0x4a, 0xa5, 0xde, 0x2a, 0xe5, 0xc8, 0x0c, 0xda, 0x6f, 0x50, 0x68, 0xe2, 0x91, 0xbd, 0x32,
	0x42, 0x3b, 0x38, 0xed, 0x54, 0x70, 0xc4, 0x5a, 0x21, 0x4c, 0x5d, 0x46, 0x4b, 0x72, 0x52, 0x61,
	0xc0, 0xab, 0xb1, 0x1d, 0x1a, 0x84, 0xc3, 0x8e, 0x74, 0xec, 0x9f, 0x09, 0x0f, 0x4b, 0xd4, 0x16,
	0x66, 0xc2, 0x5a, 0x21, 0x73, 0xd8, 0x4e, 0x66, 0x58, 0x97, 0xf3, 0x2e, 0x4a, 0x6d, 0xe6, 0x2b,
	0x2a, 0xca, 0x81, 0xa8, 0x19, 0x2e, 0x5c, 0xf1, 0xe9, 0x1d, 0x18, 0x85, 0x0f, 0x4f, 0xe7, 0xa0,
	0x64, 0x75, 0x7e, 0xc3, 0x10, 0x76, 0xd4, 0xfc, 0x56, 0xb9, 0xa3, 0x56, 0x7b, 0x27, 0x63, 0x71,
	0x3b, 0xac, 0x15, 0x12, 0x00, 0xe4, 0xd3, 0xcd, 0x49, 0xbf, 0x84, 0x2b, 0xfa, 0xc2, 0x94, 0xb2,
	0xb1, 0xb0, 0x39, 0x83, 0xef, 0x06, 0xec, 0xb1, 0xc0, 0x66, 0x63, 0x9b, 0x31, 0x7a, 0xfb, 0xe9,
	0xc1, 0xff, 0xfa, 0x32, 0x0d, 0x31, 0x5a, 0x7a, 0x13, 0xfc, 0x60, 0x7c, 0x7e, 0x31, 0xf3, 0xc4,
	0x45, 0x3c, 0x4e, 0xbe, 0xb1, 0x7d, 0xe6, 0xb3, 0xaf, 0xb4, 0x9f, 0xc3, 0x1c, 0xd0, 0xd0, 0x3b,
	0x98, 0x05, 0xfd, 0x1b, 0xff, 0xe0, 0xe7, 0x7a, 0x3c, 0xae, 0xcb, 0x7f, 0xed, 0xb3, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x25, 0xab, 0xdd, 0xb1, 0xed, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventHandlerClient is the client API for EventHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventHandlerClient interface {
	// Get an event object by ID
	GetEventObject(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*EventObject, error)
	// List a set of event objects
	ListEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (EventHandler_ListEventObjectsClient, error)
	// Count event objects
	CountEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// Save an event object
	SaveEventObject(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*EventObject, error)
	// Update event objects
	UpdateEventObjects(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete an event object
	DeleteEventObject(ctx context.Context, in *EventObject, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListLabels(ctx context.Context, in *ListLabelRequest, opts ...grpc.CallOption) (*ListLabelResponse, error)
}

type eventHandlerClient struct {
	cc *grpc.ClientConn
}

func NewEventHandlerClient(cc *grpc.ClientConn) EventHandlerClient {
	return &eventHandlerClient{cc}
}

func (c *eventHandlerClient) GetEventObject(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*EventObject, error) {
	out := new(EventObject)
	err := c.cc.Invoke(ctx, "/veidemann.api.eventhandler.v1.EventHandler/GetEventObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) ListEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (EventHandler_ListEventObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventHandler_serviceDesc.Streams[0], "/veidemann.api.eventhandler.v1.EventHandler/ListEventObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventHandlerListEventObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventHandler_ListEventObjectsClient interface {
	Recv() (*EventObject, error)
	grpc.ClientStream
}

type eventHandlerListEventObjectsClient struct {
	grpc.ClientStream
}

func (x *eventHandlerListEventObjectsClient) Recv() (*EventObject, error) {
	m := new(EventObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventHandlerClient) CountEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.eventhandler.v1.EventHandler/CountEventObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) SaveEventObject(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*EventObject, error) {
	out := new(EventObject)
	err := c.cc.Invoke(ctx, "/veidemann.api.eventhandler.v1.EventHandler/SaveEventObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) UpdateEventObjects(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.eventhandler.v1.EventHandler/UpdateEventObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) DeleteEventObject(ctx context.Context, in *EventObject, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.eventhandler.v1.EventHandler/DeleteEventObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) ListLabels(ctx context.Context, in *ListLabelRequest, opts ...grpc.CallOption) (*ListLabelResponse, error) {
	out := new(ListLabelResponse)
	err := c.cc.Invoke(ctx, "/veidemann.api.eventhandler.v1.EventHandler/ListLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventHandlerServer is the server API for EventHandler service.
type EventHandlerServer interface {
	// Get an event object by ID
	GetEventObject(context.Context, *EventRef) (*EventObject, error)
	// List a set of event objects
	ListEventObjects(*ListRequest, EventHandler_ListEventObjectsServer) error
	// Count event objects
	CountEventObjects(context.Context, *ListRequest) (*ListCountResponse, error)
	// Save an event object
	SaveEventObject(context.Context, *SaveRequest) (*EventObject, error)
	// Update event objects
	UpdateEventObjects(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete an event object
	DeleteEventObject(context.Context, *EventObject) (*DeleteResponse, error)
	ListLabels(context.Context, *ListLabelRequest) (*ListLabelResponse, error)
}

// UnimplementedEventHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedEventHandlerServer struct {
}

func (*UnimplementedEventHandlerServer) GetEventObject(ctx context.Context, req *EventRef) (*EventObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventObject not implemented")
}
func (*UnimplementedEventHandlerServer) ListEventObjects(req *ListRequest, srv EventHandler_ListEventObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEventObjects not implemented")
}
func (*UnimplementedEventHandlerServer) CountEventObjects(ctx context.Context, req *ListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountEventObjects not implemented")
}
func (*UnimplementedEventHandlerServer) SaveEventObject(ctx context.Context, req *SaveRequest) (*EventObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEventObject not implemented")
}
func (*UnimplementedEventHandlerServer) UpdateEventObjects(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventObjects not implemented")
}
func (*UnimplementedEventHandlerServer) DeleteEventObject(ctx context.Context, req *EventObject) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventObject not implemented")
}
func (*UnimplementedEventHandlerServer) ListLabels(ctx context.Context, req *ListLabelRequest) (*ListLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}

func RegisterEventHandlerServer(s *grpc.Server, srv EventHandlerServer) {
	s.RegisterService(&_EventHandler_serviceDesc, srv)
}

func _EventHandler_GetEventObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).GetEventObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.eventhandler.v1.EventHandler/GetEventObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).GetEventObject(ctx, req.(*EventRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_ListEventObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventHandlerServer).ListEventObjects(m, &eventHandlerListEventObjectsServer{stream})
}

type EventHandler_ListEventObjectsServer interface {
	Send(*EventObject) error
	grpc.ServerStream
}

type eventHandlerListEventObjectsServer struct {
	grpc.ServerStream
}

func (x *eventHandlerListEventObjectsServer) Send(m *EventObject) error {
	return x.ServerStream.SendMsg(m)
}

func _EventHandler_CountEventObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).CountEventObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.eventhandler.v1.EventHandler/CountEventObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).CountEventObjects(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_SaveEventObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).SaveEventObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.eventhandler.v1.EventHandler/SaveEventObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).SaveEventObject(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_UpdateEventObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).UpdateEventObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.eventhandler.v1.EventHandler/UpdateEventObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).UpdateEventObjects(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_DeleteEventObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).DeleteEventObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.eventhandler.v1.EventHandler/DeleteEventObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).DeleteEventObject(ctx, req.(*EventObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.eventhandler.v1.EventHandler/ListLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).ListLabels(ctx, req.(*ListLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.eventhandler.v1.EventHandler",
	HandlerType: (*EventHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventObject",
			Handler:    _EventHandler_GetEventObject_Handler,
		},
		{
			MethodName: "CountEventObjects",
			Handler:    _EventHandler_CountEventObjects_Handler,
		},
		{
			MethodName: "SaveEventObject",
			Handler:    _EventHandler_SaveEventObject_Handler,
		},
		{
			MethodName: "UpdateEventObjects",
			Handler:    _EventHandler_UpdateEventObjects_Handler,
		},
		{
			MethodName: "DeleteEventObject",
			Handler:    _EventHandler_DeleteEventObject_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _EventHandler_ListLabels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEventObjects",
			Handler:       _EventHandler_ListEventObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventhandler/v1/eventhandler.proto",
}
